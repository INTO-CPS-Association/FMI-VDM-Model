/**
 * This file is part of the INTO-CPS toolchain.
 *
 * Copyright (c) 2017-2019, INTO-CPS Association,
 * c/o Professor Peter Gorm Larsen, Department of Engineering
 * Finlandsgade 22, 8200 Aarhus N.
 *
 * All rights reserved.
 *
 * THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR
 * THIS INTO-CPS ASSOCIATION PUBLIC LICENSE VERSION 1.0.
 * ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES
 * RECIPIENT'S ACCEPTANCE OF THE OSMC PUBLIC LICENSE OR THE GPL 
 * VERSION 3, ACCORDING TO RECIPIENTS CHOICE.
 *
 * The INTO-CPS toolchain  and the INTO-CPS Association Public License are
 * obtained from the INTO-CPS Association, either from the above address, from
 * the URLs: http://www.into-cps.org, and in the INTO-CPS toolchain distribution.
 * GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without
 * even the implied warranty of  MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH IN THE
 * BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF
 * THE INTO-CPS ASSOCIATION.
 *
 * See the full INTO-CPS Association Public License conditions for more details.
 */

/**
 * 2.1.9 Getting Partial Derivatives
 */
functions
	/**
	 * Implementation and API for fmi2GetDirectionalDerivative.
	 */
	fmi2GetDirectionalDerivative_Impl: fmi2Component * seq of fmi2ValueReference * nat *
				seq of fmi2ValueReference * nat * seq of fmi2Real +> fmi2Status * seq of fmi2Real
	fmi2GetDirectionalDerivative_Impl(c, vUnknown_ref, nUnknown, vKnown_ref, nKnown, dvKnown) ==
		mk_(<fmi2OK>, dvKnown)	-- TODO!
	pre
		c.fmuState in set STATES_fmi2GetDirectionalDerivative
		and nUnknown = len vUnknown_ref
		and nKnown = len vKnown_ref
	post
		RESULT.#1 = <fmi2OK> => len RESULT.#2 = nKnown;

	fmi2GetDirectionalDerivative: fmi2Component * seq of fmi2ValueReference * nat *
				seq of fmi2ValueReference * nat* seq of fmi2Real +> fmi2Status * [seq of fmi2Real]
	fmi2GetDirectionalDerivative(c, vUnknown_ref, nUnknown, vKnown_ref, nKnown, dvKnown) ==
		if c.fmuState not in set STATES_fmi2GetDirectionalDerivative
		then let - = logAPIError(c, "Cannot call fmi2GetDirectionalDerivative in state %s", [c.fmuState]) in
			mk_(<fmi2Error>, nil)
		elseif nUnknown <> len vUnknown_ref or nKnown <> len vKnown_ref
		then let - = logAPIError(c, "Array length mismatch", []) in
			mk_(<fmi2Error>, nil)
		else
			fmi2GetDirectionalDerivative_Impl(c, vUnknown_ref, nUnknown, vKnown_ref, nKnown, dvKnown)
	 post
	 	RESULT.#1 <> <fmi2OK> <=> RESULT.#2 = nil;
