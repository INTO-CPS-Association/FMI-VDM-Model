/**
 * This file is part of the INTO-CPS toolchain.
 *
 * Copyright (c) 2017-2019, INTO-CPS Association,
 * c/o Professor Peter Gorm Larsen, Department of Engineering
 * Finlandsgade 22, 8200 Aarhus N.
 *
 * All rights reserved.
 *
 * THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR
 * THIS INTO-CPS ASSOCIATION PUBLIC LICENSE VERSION 1.0.
 * ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES
 * RECIPIENT'S ACCEPTANCE OF THE OSMC PUBLIC LICENSE OR THE GPL 
 * VERSION 3, ACCORDING TO RECIPIENTS CHOICE.
 *
 * The INTO-CPS toolchain  and the INTO-CPS Association Public License are
 * obtained from the INTO-CPS Association, either from the above address, from
 * the URLs: http://www.into-cps.org, and in the INTO-CPS toolchain distribution.
 * GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without
 * even the implied warranty of  MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH IN THE
 * BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF
 * THE INTO-CPS ASSOCIATION.
 *
 * See the full INTO-CPS Association Public License conditions for more details.
 */

/**
 * 3.2.2 Evaluation of Model Equations
 */
types
	fmi2EventInfo ::
		newDiscreteStatesNeeded				: fmi2Boolean
		terminateSimulation					: fmi2Boolean
		nominalsOfContinuousStatesChanged	: fmi2Boolean
		valuesOfContinuousStatesChanged		: fmi2Boolean
		nextEventTimeDefined				: fmi2Boolean
		nextEventTime						: [fmi2Real]
	inv
		info == info.nextEventTimeDefined <=> info.nextEventTime <> nil;

functions
	/**
	 * Implementation and API for fmi2EnterEventMode.
	 */
	fmi2EnterEventMode_Impl: fmi2Component +> fmi2Status
	fmi2EnterEventMode_Impl(c) ==
		is not yet specified
	pre
		c.fmuType = <fmi2ModelExchange>
		and c.fmuState in set STATES_fmi2EnterEventMode
	post
		RESULT = <fmi2OK> => c.fmuState = <EVENT_MODE>;

	fmi2EnterEventMode: fmi2Component +> fmi2Status
	fmi2EnterEventMode(c) ==
		if c.fmuType <> <fmi2ModelExchange>
		then -- @Printf("Cannot call fmi2EnterEventMode for fmi2CoSimulation\n")
			<fmi2Error>
		elseif c.fmuState not in set STATES_fmi2EnterEventMode
		then -- @Printf("Cannot call fmi2EnterEventMode in state %s\n", c.fmuState)
			<fmi2Error>
	 	else
	 		fmi2EnterEventMode_Impl(c);


	/**
	 * Implementation and API for fmi2NewDiscreteStates.
	 */
	fmi2NewDiscreteStates_Impl: fmi2Component * fmi2EventInfo +> fmi2Status
	fmi2NewDiscreteStates_Impl(c, fmi2eventInfo) ==
		is not yet specified
	pre
		c.fmuType = <fmi2ModelExchange>
		and c.fmuState in set STATES_fmi2NewDiscreteStates;

	fmi2NewDiscreteStates: fmi2Component * fmi2EventInfo +> fmi2Status
	fmi2NewDiscreteStates(c, fmi2eventInfo) ==
		if c.fmuType <> <fmi2ModelExchange>
		then -- @Printf("Cannot call fmi2NewDiscreteStates for fmi2CoSimulation\n")
			<fmi2Error>
		elseif c.fmuState not in set STATES_fmi2NewDiscreteStates
		then -- @Printf("Cannot call fmi2NewDiscreteStates in state %s\n", c.fmuState)
			<fmi2Error>
	 	else
	 		fmi2NewDiscreteStates_Impl(c, fmi2eventInfo);


	/**
	 * Implementation and API for fmi2EnterContinuousTimeMode.
	 */
	fmi2EnterContinuousTimeMode_Impl: fmi2Component +> fmi2Status * fmi2Component
	fmi2EnterContinuousTimeMode_Impl(c) ==
		is not yet specified
	pre
		c.fmuType = <fmi2ModelExchange>
		and c.fmuState in set STATES_fmi2EnterContinuousTimeMode
	post
		RESULT.#2.fmuState = <CT_MODE>;

	fmi2EnterContinuousTimeMode: fmi2Component +> fmi2Status * [fmi2Component]
	fmi2EnterContinuousTimeMode(c) ==
		if c.fmuType <> <fmi2ModelExchange>
		then -- @Printf("Cannot call fmi2EnterContinuousTimeMode for fmi2CoSimulation\n")
			mk_(<fmi2Error>, nil)
		elseif c.fmuState not in set STATES_fmi2EnterContinuousTimeMode
		then -- @Printf("Cannot call fmi2EnterContinuousTimeMode in state %s\n", c.fmuState)
			mk_(<fmi2Error>, nil)
	 	else
	 		fmi2EnterContinuousTimeMode_Impl(c)
	 post
	 	RESULT.#1 = <fmi2OK> <=> RESULT.#2 <> nil;


	/**
	 * Implementation and API for fmi2CompletedIntegratorStep.
	 */
	fmi2CompletedIntegratorStep_Impl: fmi2Component * fmi2Boolean +> fmi2Status * fmi2Boolean * fmi2Boolean
	fmi2CompletedIntegratorStep_Impl(c, noSetFMUStatePriorToCurrentPoint) ==
		is not yet specified
	pre
		c.fmuType = <fmi2ModelExchange>
		and c.fmuState in set STATES_fmi2CompletedIntegratorStep;

	fmi2CompletedIntegratorStep: fmi2Component * fmi2Boolean +> fmi2Status * [fmi2Boolean] * [fmi2Boolean]
	fmi2CompletedIntegratorStep(c, noSetFMUStatePriorToCurrentPoint) ==
		if c.fmuType <> <fmi2ModelExchange>
		then -- @Printf("Cannot call fmi2CompletedIntegratorStep for fmi2CoSimulation\n")
			mk_(<fmi2Error>, nil, nil)
		elseif c.fmuState not in set STATES_fmi2CompletedIntegratorStep
		then -- @Printf("Cannot call fmi2CompletedIntegratorStep in state %s\n", c.fmuState)
			mk_(<fmi2Error>, nil, nil)
	 	else
	 		fmi2CompletedIntegratorStep_Impl(c, noSetFMUStatePriorToCurrentPoint)
	 post
	 	RESULT.#1 = <fmi2OK> <=> RESULT.#2 <> nil and RESULT.#3 <> nil;


	/**
	 * Implementation and API for fmi2GetDerivatives.
	 */
	fmi2GetDerivatives_Impl: fmi2Component * nat +> fmi2Status * seq of fmi2Real
	fmi2GetDerivatives_Impl(c, nx) ==
		mk_(<fmi2OK>, [ c.variables(c.indexmap(vr)) | vr in seq c.continuousTimeStates ])
	pre
		c.fmuType = <fmi2ModelExchange>
		and c.fmuState in set STATES_fmi2GetDerivatives
		and nx = len c.continuousTimeStates;

	fmi2GetDerivatives: fmi2Component * nat +> fmi2Status * [seq of fmi2Real]
	fmi2GetDerivatives(c, nx) ==
		if c.fmuType <> <fmi2ModelExchange>
		then -- @Printf("Cannot call fmi2GetDerivatives for fmi2CoSimulation\n")
			mk_(<fmi2Error>, nil)
		elseif c.fmuState not in set STATES_fmi2GetDerivatives
		then -- @Printf("Cannot call fmi2GetDerivatives in state %s\n", c.fmuState)
			mk_(<fmi2Error>, nil)
		elseif nx <> len c.continuousTimeStates
		then -- @Printf("Wrong number of derivates requested, expecting %s\n", len c.continuousTimeStates)
			mk_(<fmi2Error>, nil)
	 	else
	 		fmi2GetDerivatives_Impl(c, nx)
	 post
	 	RESULT.#1 = <fmi2OK> <=> RESULT.#2 <> nil;


	/**
	 * Implementation and API for fmi2GetEventIndicators.
	 */
	fmi2GetEventIndicators_Impl: fmi2Component * nat +> fmi2Status * seq of fmi2Real
	fmi2GetEventIndicators_Impl(c, ni) ==
		is not yet specified
	pre
		c.fmuType = <fmi2ModelExchange>
		and c.fmuState in set STATES_fmi2GetEventIndicators;

	fmi2GetEventIndicators: fmi2Component * nat +> fmi2Status * [seq of fmi2Real]
	fmi2GetEventIndicators(c, ni) ==
		if c.fmuType <> <fmi2ModelExchange>
		then -- @Printf("Cannot call fmi2GetEventIndicators for fmi2CoSimulation\n")
			mk_(<fmi2Error>, nil)
		elseif c.fmuState not in set STATES_fmi2GetEventIndicators
		then -- @Printf("Cannot call fmi2GetEventIndicators in state %s\n", c.fmuState)
			mk_(<fmi2Error>, nil)
	 	else
	 		fmi2GetEventIndicators_Impl(c, ni)
	 post
	 	RESULT.#1 = <fmi2OK> <=> RESULT.#2 <> nil;


	/**
	 * Implementation and API for fmi2GetContinuousStates.
	 */
	fmi2GetContinuousStates_Impl: fmi2Component * nat +> fmi2Status * seq of fmi2Real
	fmi2GetContinuousStates_Impl(c, nx) ==
		is not yet specified
	pre
		c.fmuType = <fmi2ModelExchange>
		and c.fmuState in set STATES_fmi2GetContinuousStates
		and nx = len c.continuousTimeStates;

	fmi2GetContinuousStates: fmi2Component * nat +> fmi2Status * [seq of fmi2Real]
	fmi2GetContinuousStates(c, nx) ==
		if c.fmuType <> <fmi2ModelExchange>
		then -- @Printf("Cannot call fmi2GetContinuousStates for fmi2CoSimulation\n")
			mk_(<fmi2Error>, nil)
		elseif c.fmuState not in set STATES_fmi2GetContinuousStates
		then -- @Printf("Cannot call fmi2GetContinuousStates in state %s\n", c.fmuState)
			mk_(<fmi2Error>, nil)
		elseif nx <> len c.continuousTimeStates
		then -- @Printf("Wrong number of derivates requested, expecting %s\n", len c.continuousTimeStates)
			mk_(<fmi2Error>, nil)
	 	else
	 		fmi2GetContinuousStates_Impl(c, nx)
	 post
	 	RESULT.#1 = <fmi2OK> <=> RESULT.#2 <> nil;


	/**
	 * Implementation and API for fmi2GetNominalsOfContinuousStates.
	 */
	fmi2GetNominalsOfContinuousStates_Impl: fmi2Component * nat +> fmi2Status * seq of fmi2Real
	fmi2GetNominalsOfContinuousStates_Impl(c, nx) ==
		is not yet specified
	pre
		c.fmuType = <fmi2ModelExchange>
		and c.fmuState in set STATES_fmi2GetNominalsOfContinuousStates
		and nx = len c.continuousTimeStates;

	fmi2GetNominalsOfContinuousStates: fmi2Component * nat +> fmi2Status * [seq of fmi2Real]
	fmi2GetNominalsOfContinuousStates(c, nx) ==
		if c.fmuType <> <fmi2ModelExchange>
		then -- @Printf("Cannot call fmi2GetNominalsOfContinuousStates for fmi2CoSimulation\n")
			mk_(<fmi2Error>, nil)
		elseif c.fmuState not in set STATES_fmi2GetNominalsOfContinuousStates
		then -- @Printf("Cannot call fmi2GetNominalsOfContinuousStates in state %s\n", c.fmuState)
			mk_(<fmi2Error>, nil)
		elseif nx <> len c.continuousTimeStates
		then -- @Printf("Wrong number of derivates requested, expecting %s\n", len c.continuousTimeStates)
			mk_(<fmi2Error>, nil)
	 	else
	 		fmi2GetNominalsOfContinuousStates_Impl(c, nx)
	 post
	 	RESULT.#1 = <fmi2OK> <=> RESULT.#2 <> nil;
