/**
 * This file is part of the INTO-CPS toolchain.
 *
 * Copyright (c) 2017-2019, INTO-CPS Association,
 * c/o Professor Peter Gorm Larsen, Department of Engineering
 * Finlandsgade 22, 8200 Aarhus N.
 *
 * All rights reserved.
 *
 * THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR
 * THIS INTO-CPS ASSOCIATION PUBLIC LICENSE VERSION 1.0.
 * ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES
 * RECIPIENT'S ACCEPTANCE OF THE OSMC PUBLIC LICENSE OR THE GPL 
 * VERSION 3, ACCORDING TO RECIPIENTS CHOICE.
 *
 * The INTO-CPS toolchain  and the INTO-CPS Association Public License are
 * obtained from the INTO-CPS Association, either from the above address, from
 * the URLs: http://www.into-cps.org, and in the INTO-CPS toolchain distribution.
 * GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without
 * even the implied warranty of  MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH IN THE
 * BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF
 * THE INTO-CPS ASSOCIATION.
 *
 * See the full INTO-CPS Association Public License conditions for more details.
 */

/**
 * Model generated from win64/Test-FMUs BouncingBall implementation.
 */
values
	HEIGHT			= 1;
	VELOCITY		= 2;
	GRAVITY			= 3;
	REBOUND			= 4;
	MINIMUM			= 5;

functions
	calculateValues: fmi2Component -> fmi2Status * [fmi2Component]
	calculateValues(c) ==
		mk_(<fmi2OK>, mu(c, dirty |-> false));

	calculateDoStep: fmi2Component * fmi2Real * fmi2Real -> fmi2Status * [fmi2Component]
	calculateDoStep(c, currentCommunicationPoint, communicationStepSize) ==
		let height   = c.variables(HEIGHT),
			velocity = c.variables(VELOCITY),
			gravity  = c.variables(GRAVITY),
			endstep  = currentCommunicationPoint + communicationStepSize,
			stepsize =
				if c.eventInfo.nextEventTimeDefined and c.eventInfo.nextEventTime < endstep
				then c.eventInfo.nextEventTime - currentCommunicationPoint
				else communicationStepSize
		in
	        let height2 = height + stepsize * velocity,
	        	velocity2 = velocity + stepsize * gravity,	-- forward Euler steps
	        	c2 = mu(c,
					currentTime |-> currentCommunicationPoint + stepsize,
					variables   |-> c.variables ++ { HEIGHT |-> height2, VELOCITY |-> velocity2 })
	        in
	        	-- @Printf("DoStep: %s %s\n", c.currentTime, c.variables)
	        	if stepsize < communicationStepSize		-- Time event occurred
	        		or height * height2 < 0				-- State event occurred
	        	then
	        		mk_(<fmi2OK>, calculateEvents(c2))
	        	else
					mk_(<fmi2OK>, c2);


	calculateEvents: fmi2Component -> fmi2Component
	calculateEvents(c) ==
		let info = mk_fmi2EventInfo
			(
				false,	-- newDiscreteStatesNeeded				: fmi2Boolean
				false,	-- terminateSimulation					: fmi2Boolean
				false,	-- nominalsOfContinuousStatesChanged	: fmi2Boolean
				false,	-- valuesOfContinuousStatesChanged		: fmi2Boolean
				false,	-- nextEventTimeDefined					: fmi2Boolean
				nil		-- nextEventTime						: fmi2Real
			),
			height   = c.variables(HEIGHT),
			velocity = c.variables(VELOCITY),
			rebound  = c.variables(REBOUND),
			minimum  = c.variables(MINIMUM)
		in
			let updates =
			    if height <= 0
			    then
			        { HEIGHT |-> 0,
			          VELOCITY |-> abs(velocity * -rebound) }
			        ++ if abs velocity < minimum
			        then { VELOCITY |-> 0, GRAVITY |-> 0 }
			        else { |-> }
				else
					{ |-> }
			in
				-- @Printf("Events: %s\n", c.variables)
				mu(c,
					eventInfo |-> mu(info, valuesOfContinuousStatesChanged |-> (height <= 0)),
					variables |-> c.variables ++ updates,
					isNewEventIteration |-> false)


/**
 * VDM Model generated from modelDescription.xml on Wed Nov 13 15:02:30 GMT 2019
 */
values
	bouncingBall = mk_FMIModelDescription
	(
		mk_ModelAttributes
		(
			2,  -- Line
			"2.0",
			"BouncingBall",
			"{8c4e810f-3df3-4a00-8276-176fa3c9f003}",
			nil,
			nil,
			nil,
			nil,
			nil,
			nil,
			nil,
			nil,
			1
		),

		-- ModelExchange
		mk_ModelExchange
		(
			4,  -- Line
			"BouncingBall",
			nil,
			nil,
			nil,
			nil,
			nil,
			nil,
			nil,
			[
				mk_SourceFile
				(
					6,  -- Line
					"fmi2.c"
				),
				mk_SourceFile
				(
					7,  -- Line
					"euler.c"
				),
				mk_SourceFile
				(
					8,  -- Line
					"model.c"
				),
				mk_SourceFile
				(
					9,  -- Line
					"slave.c"
				)
			]
		),

		-- CoSimulation
		mk_CoSimulation
		(
			13,  -- Line
			"BouncingBall",
			nil,
			true,
			nil,
			nil,
			nil,
			nil,
			nil,
			nil,
			nil,
			nil,
			[
				mk_SourceFile
				(
					15,  -- Line
					"fmi2.c"
				),
				mk_SourceFile
				(
					16,  -- Line
					"euler.c"
				),
				mk_SourceFile
				(
					17,  -- Line
					"model.c"
				),
				mk_SourceFile
				(
					18,  -- Line
					"slave.c"
				)
			]

		),

		-- UnitDefinitions
		[
			mk_Unit
			(
				25,  -- Line
				"m",
				mk_BaseUnit(nil, 1, nil, nil, nil, nil, nil, nil, nil, nil),
				nil
			),
			mk_Unit
			(
				28,  -- Line
				"m/s",
				mk_BaseUnit(nil, 1, -1, nil, nil, nil, nil, nil, nil, nil),
				nil
			),
			mk_Unit
			(
				31,  -- Line
				"m/s2",
				mk_BaseUnit(nil, 1, -2, nil, nil, nil, nil, nil, nil, nil),
				nil
			)
		],

		-- TypeDefinitions
		{
			mk_SimpleType
			(
				37,  -- Line
				"Position",
				nil,
				mk_RealType("Position", "m", nil, nil, nil, nil, nil, nil)
			),
			mk_SimpleType
			(
				40,  -- Line
				"Velocity",
				nil,
				mk_RealType("Velocity", "m/s", nil, nil, nil, nil, nil, nil)
			),
			mk_SimpleType
			(
				43,  -- Line
				"Acceleration",
				nil,
				mk_RealType("Acceleration", "m/s2", nil, nil, nil, nil, nil, nil)
			)
		},

		-- LogCategories
		[
			mk_Category
			(
				18,  -- Line
				"logAll",
				nil
			),
			mk_Category
			(
				19,  -- Line
				"logError",
				nil
			),
			mk_Category
			(
				20,  -- Line
				"logFmiCall",
				nil
			),
			mk_Category
			(
				21,  -- Line
				"logEvent",
				nil
			)
		],

		-- DefaultExperiment
		mk_DefaultExperiment
		(
			48,  -- Line
			0.0,
			3.0,
			nil,
			nil
		),

		-- VendorAnnotations
		nil,

		-- ModelVariables
		[
			mk_ScalarVariable
			(
				51,  -- Line
				"h",
				0,
				"Position of the ball",
				<output>,
				<continuous>,
				<exact>,
				nil,
				mk_Real("Position", nil, nil, nil, nil, nil, nil, nil, nil, 10.0, nil, nil),
				nil
			),
			mk_ScalarVariable
			(
				54,  -- Line
				"v",
				1,
				"Velocity of the ball",
				<output>,
				<continuous>,
				<exact>,
				nil,
				mk_Real("Velocity", nil, nil, nil, nil, nil, nil, nil, nil, 0.0, 1, true),
				nil
			),
			mk_ScalarVariable
			(
				57,  -- Line
				"g",
				2,
				"Gravity acting on the ball",
				<parameter>,
				<fixed>,
				<exact>,
				nil,
				mk_Real("Acceleration", nil, nil, nil, nil, nil, nil, nil, nil, -9.81, 2, nil),
				nil
			),
			mk_ScalarVariable
			(
				60,  -- Line
				"e",
				3,
				"Rebound factor",
				<parameter>,
				<tunable>,
				<exact>,
				nil,
				mk_Real(nil, nil, nil, nil, nil, 0.5, 1.0, nil, nil, 0.6, nil, nil),
				nil
			),
			mk_ScalarVariable
			(
				63,  -- Line
				"v_min",
				4,
				"Velocity below which the ball stops bouncing",
				<parameter>,
				<fixed>,
				nil,
				nil,
				mk_Real("Velocity", nil, nil, nil, nil, nil, nil, nil, nil, 1.0, nil, nil),
				nil
			)
		],

		-- ModelStructure
		mk_ModelStructure
		(
			68,  -- Line
			-- Outputs
			[
				mk_Unknown
				(
					70,  -- Line
					1,
					nil,
					nil
				),
				mk_Unknown
				(
					71,  -- Line
					2,
					nil,
					nil
				)
			],

			-- Derivatives
			[
				mk_Unknown
				(
					74,  -- Line
					2,
					nil,
					nil
				),
				mk_Unknown
				(
					75,  -- Line
					3,
					nil,
					nil
				)
			],

			-- InitialUnknowns
			[
				mk_Unknown
				(
					78,  -- Line
					2,
					nil,
					nil
				),
				mk_Unknown
				(
					79,  -- Line
					3,
					nil,
					nil
				)
			]
		)
	);
