/**
 * This file is part of the INTO-CPS toolchain.
 *
 * Copyright (c) 2017-2019, INTO-CPS Association,
 * c/o Professor Peter Gorm Larsen, Department of Engineering
 * Finlandsgade 22, 8200 Aarhus N.
 *
 * All rights reserved.
 *
 * THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR
 * THIS INTO-CPS ASSOCIATION PUBLIC LICENSE VERSION 1.0.
 * ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES
 * RECIPIENT'S ACCEPTANCE OF THE OSMC PUBLIC LICENSE OR THE GPL 
 * VERSION 3, ACCORDING TO RECIPIENTS CHOICE.
 *
 * The INTO-CPS toolchain  and the INTO-CPS Association Public License are
 * obtained from the INTO-CPS Association, either from the above address, from
 * the URLs: http://www.into-cps.org, and in the INTO-CPS toolchain distribution.
 * GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without
 * even the implied warranty of  MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH IN THE
 * BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF
 * THE INTO-CPS ASSOCIATION.
 *
 * See the full INTO-CPS Association Public License conditions for more details.
 */

/**
 * Tests of the API.
 */
functions
	logger: fmi2ComponentEnvironment * fmi2String * fmi2Status * fmi2String * fmi2String +> ?
	logger(-, -, -, -, -) ==
		is not yet specified;

	allocateMemory: nat1 * nat1 +> token
	allocateMemory(-, -) ==
		is not yet specified;
	
	freeMemory: token +> ?
	freeMemory(-) ==
		is not yet specified;
	
	stepFinished: fmi2ComponentEnvironment * fmi2Status +> ?
	stepFinished(-, -) ==
		is not yet specified;

operations
	coSimulate: () ==> ()
	coSimulate() ==
	(
		let callbacks = mk_fmi2CallbackFunctions(logger, allocateMemory, freeMemory, stepFinished, springMassDamper) in
		let c = fmi2Instantiate("test", <fmi2CoSimulation>, "GUID", "", callbacks, false, false) in
		let startTime : real = 0, endTime : real = 1000 in 

			if fmi2SetDebugLogging(c, false, 0, []) <> <fmi2OK>
			then exit "Cannot initialize logging"
			
			elseif fmi2SetupExperiment(c, false, 0, startTime, true, endTime) <> <fmi2OK>
			then exit "Cannot set up experiment"
			
			elseif fmi2EnterInitializationMode(c) <> <fmi2OK>
			then exit "Cannot enter initialization mode"
			
			elseif fmi2ExitInitializationMode(c) <> <fmi2OK>
			then exit "Cannot exit initialization mode"
			
			else
			(
				dcl time : real := startTime, h : real := 1, hh : real := 1;
				
				while time < endTime do
				(
					if h > endTime - time
					then hh := endTime - time;
					
					let status = fmi2DoStep(c, time, hh, true) in
						if status = <fmi2Discard>
						then let mk_(s, terminated) = fmi2GetBooleanStatus(c, <fmi2Terminated>) in
							if s <> <fmi2OK>
							then exit "Cannot get terminated status"
							elseif terminated
							then exit "Simulation requested termination"
							else exit "Could not complete simulation"

						elseif status <> <fmi2OK>
						then exit "Could not complete simulation"

						else time := time + hh
				);
				
				if fmi2Terminate(c) <> <fmi2OK>
				then exit "Failed to terminate simulation"

				elseif fmi2FreeInstance(c) <> <fmi2OK>
				then exit "Failed to free instance"
			)
	);
