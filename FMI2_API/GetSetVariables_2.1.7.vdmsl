/**
 * This file is part of the INTO-CPS toolchain.
 *
 * Copyright (c) 2017-2019, INTO-CPS Association,
 * c/o Professor Peter Gorm Larsen, Department of Engineering
 * Finlandsgade 22, 8200 Aarhus N.
 *
 * All rights reserved.
 *
 * THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR
 * THIS INTO-CPS ASSOCIATION PUBLIC LICENSE VERSION 1.0.
 * ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES
 * RECIPIENT'S ACCEPTANCE OF THE OSMC PUBLIC LICENSE OR THE GPL 
 * VERSION 3, ACCORDING TO RECIPIENTS CHOICE.
 *
 * The INTO-CPS toolchain  and the INTO-CPS Association Public License are
 * obtained from the INTO-CPS Association, either from the above address, from
 * the URLs: http://www.into-cps.org, and in the INTO-CPS toolchain distribution.
 * GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without
 * even the implied warranty of  MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH IN THE
 * BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF
 * THE INTO-CPS ASSOCIATION.
 *
 * See the full INTO-CPS Association Public License conditions for more details.
 */

/**
 * 2.1.7 Getting and Setting Variable Values
 */
functions
	/**
	 * The general contracts for calling fmi2GetXXX and fmi2SetXXX functions in a given state.
	 */
	generalGetPrecondition: fmi2Component * seq of fmi2ValueReference +> bool
	generalGetPrecondition(c, vrs) ==
		cases c.fmuState:
			<INSTANTIATED>		-> false,
			<INITIALIZATION>	-> varsINIT(c, vrs),
			<EVENT_MODE>		-> true,
			<CT_MODE>			-> true,
			<STEP_COMPLETE>		-> true,
			<STEP_IN_PROGRESS>	-> false,
			<STEP_FAILED>		-> true,
			<STEP_CANCELLED>	-> true,
			<TERMINATED>		-> true,
			<ERROR>				-> true,

			others -> undefined
		end;

	generalSetPrecondition: fmi2Component * seq of fmi2ValueReference +> bool
	generalSetPrecondition(c, vrs) ==
		if c.fmuType = <fmi2ModelExchange>
		then
			cases c.fmuState:
				<INSTANTIATED>		-> varsSEA(c, vrs),
				<INITIALIZATION>	-> varsSE(c, vrs),
				<EVENT_MODE>		-> varsIN(c, vrs) or varsINC(c, vrs),
				<CT_MODE>			-> varsINC(c, vrs),
				<TERMINATED>		-> false,
				<ERROR>				-> false,

				others -> undefined
			end
		else	-- fmi2CoSimulation
			cases c.fmuState:
				<INSTANTIATED>		-> varsINI(c, vrs),
				<INITIALIZATION>	-> varsIN(c, vrs) or varsINI(c, vrs),
				<STEP_COMPLETE>		-> varsIN(c, vrs),
				<STEP_IN_PROGRESS>	-> false,
				<STEP_FAILED>		-> false,
				<STEP_CANCELLED>	-> false,
				<TERMINATED>		-> false,
				<ERROR>				-> false,

				others -> undefined
			end;

	/**
	 * Implementation and API for fmi2GetReal.
	 */
	fmi2GetReal_Impl: fmi2Component * seq of fmi2ValueReference * nat +> fmi2Status * seq of fmi2Real
	fmi2GetReal_Impl(c, vrs, nvr) ==
		is not yet specified
	pre
		len vrs = nvr and
		generalGetPrecondition(c, vrs)
	post
		RESULT.#1 = <fmi2OK> =>
			len RESULT.#2 = nvr;

	fmi2GetReal: fmi2Component * seq of fmi2ValueReference * nat +> fmi2Status * [seq of fmi2Real]
	fmi2GetReal(c, vrs, nvr) ==
		if len vrs <> nvr
		then -- @Printf("vrs and nvr do not match\n")
			mk_(<fmi2Error>, nil)
		elseif not generalGetPrecondition(c, vrs)
		then -- @Printf("Get preconditions failed\n")
			mk_(<fmi2Error>, nil)
		else
			fmi2GetReal_Impl(c, vrs, nvr)
	 post
	 	RESULT.#1 = <fmi2OK> <=> RESULT.#2 <> nil;


	/**
	 * Implementation and API for fmi2GetInteger.
	 */
	fmi2GetInteger_Impl: fmi2Component * seq of fmi2ValueReference * nat +> fmi2Status * seq of fmi2Integer
	fmi2GetInteger_Impl(c, vrs, nvr) ==
		is not yet specified
	pre
		len vrs = nvr and
		generalGetPrecondition(c, vrs)
	post
		RESULT.#1 <> <fmi2Discard>
		and (RESULT.#1 = <fmi2OK> => len RESULT.#2 = nvr);

	fmi2GetInteger: fmi2Component * seq of fmi2ValueReference * nat +> fmi2Status * [seq of fmi2Integer]
	fmi2GetInteger(c, vrs, nvr) ==
		if len vrs <> nvr
		then -- @Printf("vrs and nvr do not match\n")
			mk_(<fmi2Error>, nil)
		elseif not generalGetPrecondition(c, vrs)
		then -- @Printf("Get preconditions failed\n")
			mk_(<fmi2Error>, nil)
		else
			fmi2GetInteger_Impl(c, vrs, nvr)
	 post
	 	RESULT.#1 = <fmi2OK> <=> RESULT.#2 <> nil;


	/**
	 * Implementation and API for fmi2GetBoolean.
	 */
	fmi2GetBoolean_Impl: fmi2Component * seq of fmi2ValueReference * nat +> fmi2Status * seq of fmi2Boolean
	fmi2GetBoolean_Impl(c, vrs, nvr) ==
		is not yet specified
	pre
		len vrs = nvr and
		generalGetPrecondition(c, vrs)
	post
		RESULT.#1 <> <fmi2Discard>
		and (RESULT.#1 = <fmi2OK> => len RESULT.#2 = nvr);

	fmi2GetBoolean: fmi2Component * seq of fmi2ValueReference * nat +> fmi2Status * [seq of fmi2Boolean]
	fmi2GetBoolean(c, vrs, nvr) ==
		if len vrs <> nvr
		then -- @Printf("vrs and nvr do not match\n")
			mk_(<fmi2Error>, nil)
		elseif not generalGetPrecondition(c, vrs)
		then -- @Printf("Get preconditions failed\n")
			mk_(<fmi2Error>, nil)
		else
			fmi2GetBoolean_Impl(c, vrs, nvr)
	 post
	 	RESULT.#1 = <fmi2OK> <=> RESULT.#2 <> nil;


	/**
	 * Implementation and API for fmi2GetString.
	 */
	fmi2GetString_Impl: fmi2Component * seq of fmi2ValueReference * nat +> fmi2Status * seq of fmi2String
	fmi2GetString_Impl(c, vrs, nvr) ==
		is not yet specified
	pre
		len vrs = nvr and
		generalGetPrecondition(c, vrs)
	post
		RESULT.#1 <> <fmi2Discard>
		and (RESULT.#1 = <fmi2OK> => len RESULT.#2 = nvr);

	fmi2GetString: fmi2Component * seq of fmi2ValueReference * nat +> fmi2Status * [seq of fmi2String]
	fmi2GetString(c, vrs, nvr) ==
		if len vrs <> nvr
		then -- @Printf("vrs and nvr do not match\n")
			mk_(<fmi2Error>, nil)
		elseif not generalGetPrecondition(c, vrs)
		then -- @Printf("Get preconditions failed\n")
			mk_(<fmi2Error>, nil)
		else
			fmi2GetString_Impl(c, vrs, nvr)
	 post
	 	RESULT.#1 = <fmi2OK> <=> RESULT.#2 <> nil;


	/**
	 * Implementation and API for fmi2SetReal.
	 */
	fmi2SetReal_Impl: fmi2Component * seq1 of fmi2ValueReference * nat1 * seq1 of fmi2Real +> fmi2Status
	fmi2SetReal_Impl(c, vrs, nvr, value) ==
		is not yet specified
	pre
		len vrs = nvr and len vrs = len value
		and generalSetPrecondition(c, vrs);

	fmi2SetReal: fmi2Component * seq1 of fmi2ValueReference * nat1 * seq1 of fmi2Real +> fmi2Status
	fmi2SetReal(c, vrs, nvr, value) ==
		if len vrs <> nvr
		then -- @Printf("vrs and nvr do not match\n")
			<fmi2Error>
		elseif len vrs <> len value
		then -- @Printf("vrs and value do not match\n")
			<fmi2Error>
		elseif not generalSetPrecondition(c, vrs)
		then -- @Printf("Set preconditions failed\n")
			<fmi2Error>
		else
			fmi2SetReal_Impl(c, vrs, nvr, value);


	/**
	 * Implementation and API for fmi2SetInteger.
	 */
	fmi2SetInteger_Impl: fmi2Component * seq1 of fmi2ValueReference * nat1 * seq1 of fmi2Integer +> fmi2Status
	fmi2SetInteger_Impl(c, vrs, nvr, value) ==
		is not yet specified
	pre
		len vrs = nvr and len vrs = len value
		and generalSetPrecondition(c, vrs);

	fmi2SetInteger: fmi2Component * seq1 of fmi2ValueReference * nat1 * seq1 of fmi2Integer +> fmi2Status
	fmi2SetInteger(c, vrs, nvr, value) ==
		if len vrs <> nvr
		then -- @Printf("vrs and nvr do not match\n")
			<fmi2Error>
		elseif len vrs <> len value
		then -- @Printf("vrs and value do not match\n")
			<fmi2Error>
		elseif not generalSetPrecondition(c, vrs)
		then -- @Printf("Set preconditions failed\n")
			<fmi2Error>
		else
			fmi2SetInteger_Impl(c, vrs, nvr, value);


	/**
	 * Implementation and API for fmi2SetBoolean.
	 */
	fmi2SetBoolean_Impl: fmi2Component * seq1 of fmi2ValueReference * nat1 * seq1 of fmi2Boolean +> fmi2Status
	fmi2SetBoolean_Impl(c, vrs, nvr, value) ==
		is not yet specified
	pre
		len vrs = nvr and len vrs = len value
		and generalSetPrecondition(c, vrs);

	fmi2SetBoolean: fmi2Component * seq1 of fmi2ValueReference * nat1 * seq1 of fmi2Boolean +> fmi2Status
	fmi2SetBoolean(c, vrs, nvr, value) ==
		if len vrs <> nvr
		then -- @Printf("vrs and nvr do not match\n")
			<fmi2Error>
		elseif len vrs <> len value
		then -- @Printf("vrs and value do not match\n")
			<fmi2Error>
		elseif not generalSetPrecondition(c, vrs)
		then -- @Printf("Set preconditions failed\n")
			<fmi2Error>
		else
			fmi2SetBoolean_Impl(c, vrs, nvr, value);


	/**
	 * Implementation and API for fmi2SetString.
	 */
	fmi2SetString_Impl: fmi2Component * seq1 of fmi2ValueReference * nat1 * seq1 of fmi2String +> fmi2Status
	fmi2SetString_Impl(c, vrs, nvr, value) ==
		is not yet specified
	pre
		len vrs = nvr and len vrs = len value
		and generalSetPrecondition(c, vrs);

	fmi2SetString: fmi2Component * seq1 of fmi2ValueReference * nat1 * seq1 of fmi2String +> fmi2Status
	fmi2SetString(c, vrs, nvr, value) ==
		if len vrs <> nvr
		then -- @Printf("vrs and nvr do not match\n")
			<fmi2Error>
		elseif len vrs <> len value
		then -- @Printf("vrs and value do not match\n")
			<fmi2Error>
		elseif not generalSetPrecondition(c, vrs)
		then -- @Printf("Set preconditions failed\n")
			<fmi2Error>
		else
			fmi2SetString_Impl(c, vrs, nvr, value);
	