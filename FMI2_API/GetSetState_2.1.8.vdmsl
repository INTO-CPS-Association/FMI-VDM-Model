/**
 * This file is part of the INTO-CPS toolchain.
 *
 * Copyright (c) 2017-2019, INTO-CPS Association,
 * c/o Professor Peter Gorm Larsen, Department of Engineering
 * Finlandsgade 22, 8200 Aarhus N.
 *
 * All rights reserved.
 *
 * THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR
 * THIS INTO-CPS ASSOCIATION PUBLIC LICENSE VERSION 1.0.
 * ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES
 * RECIPIENT'S ACCEPTANCE OF THE OSMC PUBLIC LICENSE OR THE GPL 
 * VERSION 3, ACCORDING TO RECIPIENTS CHOICE.
 *
 * The INTO-CPS toolchain  and the INTO-CPS Association Public License are
 * obtained from the INTO-CPS Association, either from the above address, from
 * the URLs: http://www.into-cps.org, and in the INTO-CPS toolchain distribution.
 * GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without
 * even the implied warranty of  MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH IN THE
 * BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF
 * THE INTO-CPS ASSOCIATION.
 *
 * See the full INTO-CPS Association Public License conditions for more details.
 */

/**
 * 2.1.8 Getting and Setting the Complete FMU State
 */
types
	fmi2FMUState = fmi2Component;
	SerializedState = fmi2FMUState * nat;		-- state and size of serialized state

functions
	canDoGetSetState: fmi2Component * set of fmi2State +> bool
	canDoGetSetState(c, states) ==
		c.fmuState in set states
		and if c.fmuType = <fmi2CoSimulation>
		then nilBool(c.callbacks.componentEnvironment.model.coSimulation.canGetAndSetFMUstate)
		else nilBool(c.callbacks.componentEnvironment.model.modelExchange.canGetAndSetFMUstate);

	/**
	 * Implementation and API for fmi2GetFMUstate.
	 */
	fmi2GetFMUstate_Impl: fmi2Component +> fmi2Status * fmi2FMUState
	fmi2GetFMUstate_Impl(c) ==
		mk_(<fmi2OK>, c)
	pre
		canDoGetSetState(c, STATES_fmi2GetFMUstate);

	fmi2GetFMUstate: fmi2Component +> fmi2Status * [fmi2FMUState]
	fmi2GetFMUstate(c) ==
		if not canDoGetSetState(c, STATES_fmi2GetFMUstate)
		then -- @Printf("Can't call fmi2GetFMUstate\n")
			mk_(<fmi2Error>, nil)
		else
			fmi2GetFMUstate_Impl(c)
	 post
	 	RESULT.#1 = <fmi2OK> <=> RESULT.#2 <> nil;


	/**
	 * Implementation and API for fmi2SetFMUstate.
	 */
	fmi2SetFMUstate_Impl: fmi2Component * fmi2FMUState +> fmi2Status * fmi2Component
	fmi2SetFMUstate_Impl(c, FMUstate) ==
		mk_(<fmi2OK>, FMUstate)
	pre
		canDoGetSetState(c, STATES_fmi2SetFMUstate);

	fmi2SetFMUstate: fmi2Component * fmi2FMUState +> fmi2Status * fmi2Component
	fmi2SetFMUstate(c, FMUstate) ==
		if not canDoGetSetState(c, STATES_fmi2SetFMUstate)
		then -- @Printf("Can't call fmi2SetFMUstate\n")
			mk_(<fmi2Error>, c)
		else
			fmi2SetFMUstate_Impl(c, FMUstate)
	 post
	 	RESULT.#1 <> <fmi2OK> <=> RESULT.#2 = c;


	/**
	 * Implementation and API for fmi2FreeFMUstate.
	 */
	fmi2FreeFMUstate_Impl: fmi2Component * fmi2FMUState +> fmi2Status
	fmi2FreeFMUstate_Impl(c, -) ==
		<fmi2OK>
	pre
		canDoGetSetState(c, STATES_fmi2FreeFMUstate);

	fmi2FreeFMUstate: fmi2Component * fmi2FMUState +> fmi2Status
	fmi2FreeFMUstate(c, FMUstate) ==
		if not canDoGetSetState(c, STATES_fmi2FreeFMUstate)
		then -- @Printf("Can't call fmi2FreeFMUstate\n")
			<fmi2Error>
		else
			fmi2FreeFMUstate_Impl(c, FMUstate);


	/**
	 * Implementation and API for fmi2SerializedFMUstateSize.
	 */
	fmi2SerializedFMUstateSize_Impl: fmi2Component * fmi2FMUState +> fmi2Status * nat
	fmi2SerializedFMUstateSize_Impl(c, -) ==
		mk_(<fmi2OK>, 0)	-- Size is abstract in the VDM model
	pre
		canDoGetSetState(c, STATES_fmi2SerializedFMUstateSize);

	fmi2SerializedFMUstateSize: fmi2Component * fmi2FMUState +> fmi2Status * [nat]
	fmi2SerializedFMUstateSize(c, FMUstate) ==
		if not canDoGetSetState(c, STATES_fmi2SerializedFMUstateSize)
		then -- @Printf("Can't call fmi2SerializedFMUstateSize\n")
			mk_(<fmi2Error>, nil)
		else
			fmi2SerializedFMUstateSize_Impl(c, FMUstate)
	 post
	 	RESULT.#1 = <fmi2OK> <=> RESULT.#2 <> nil;


	/**
	 * Implementation and API for fmi2SerializeFMUstate.
	 */
	fmi2SerializeFMUstate_Impl: fmi2Component * fmi2FMUState * nat +> fmi2Status * SerializedState
	fmi2SerializeFMUstate_Impl(c, FMUstate, size) ==
		mk_(<fmi2OK>, mk_(FMUstate, size))
	pre
		canDoGetSetState(c, STATES_fmi2SerializeFMUstate);

	fmi2SerializeFMUstate: fmi2Component * fmi2FMUState * nat +> fmi2Status * [SerializedState]
	fmi2SerializeFMUstate(c, FMUstate, size) ==
		if not canDoGetSetState(c, STATES_fmi2SerializeFMUstate)
		then -- @Printf("Can't call fmi2SerializeFMUstate\n")
			mk_(<fmi2Error>, nil)
		else
			fmi2SerializeFMUstate_Impl(c, FMUstate, size)
	 post
	 	RESULT.#1 = <fmi2OK> <=> RESULT.#2 <> nil;


	/**
	 * Implementation and API for fmi2DeSerializeFMUstate.
	 */
	fmi2DeSerializeFMUstate_Impl: fmi2Component * SerializedState * nat +> fmi2Status * fmi2FMUState
	fmi2DeSerializeFMUstate_Impl(c, serializedState, size) ==
		mk_(<fmi2OK>, serializedState.#1)
	pre
		serializedState.#2 = size
		and canDoGetSetState(c, STATES_fmi2DeSerializeFMUstate);

	fmi2DeSerializeFMUstate: fmi2Component * SerializedState * nat +> fmi2Status * [fmi2FMUState]
	fmi2DeSerializeFMUstate(c, serializedState, size) ==
		if serializedState.#2 <> size
		then -- @Printf("Size does not match serialised state\n")
			mk_(<fmi2Error>, nil)
		elseif not canDoGetSetState(c, STATES_fmi2DeSerializeFMUstate)
		then -- @Printf("Can't call fmi2DeSerializeFMUstate\n")
			mk_(<fmi2Error>, nil)
		else
			fmi2DeSerializeFMUstate_Impl(c, serializedState, size)
	 post
	 	RESULT.#1 = <fmi2OK> <=> RESULT.#2 <> nil;

	