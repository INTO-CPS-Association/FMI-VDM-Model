/**
 * This file is part of the INTO-CPS toolchain.
 *
 * Copyright (c) 2017-2019, INTO-CPS Association,
 * c/o Professor Peter Gorm Larsen, Department of Engineering
 * Finlandsgade 22, 8200 Aarhus N.
 *
 * All rights reserved.
 *
 * THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR
 * THIS INTO-CPS ASSOCIATION PUBLIC LICENSE VERSION 1.0.
 * ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES
 * RECIPIENT'S ACCEPTANCE OF THE OSMC PUBLIC LICENSE OR THE GPL 
 * VERSION 3, ACCORDING TO RECIPIENTS CHOICE.
 *
 * The INTO-CPS toolchain  and the INTO-CPS Association Public License are
 * obtained from the INTO-CPS Association, either from the above address, from
 * the URLs: http://www.into-cps.org, and in the INTO-CPS toolchain distribution.
 * GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without
 * even the implied warranty of  MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH IN THE
 * BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF
 * THE INTO-CPS ASSOCIATION.
 *
 * See the full INTO-CPS Association Public License conditions for more details.
 */

/**
 * 2.1.5 Creation, Destruction and Logging of FMU Instances.
 */
types
	fmi2CallbackFunctions ::
		logger					: fmi2ComponentEnvironment * fmi2String * fmi2Status * fmi2String * fmi2String +> <VOID>
		allocateMemory			: nat1 * nat1 +> token
		freeMemory				: token +> <VOID>
		stepFinished			: fmi2ComponentEnvironment * fmi2Status +> <VOID>
		componentEnvironment	: fmi2ComponentEnvironment
	inv f ==
		isValidFMIModelDescription(f.componentEnvironment);

functions
	/**
	 * Implementation of fmi2Instantiate. See API method below.
	 */
	fmi2Instantiate_Impl: fmi2String * fmi2Type * fmi2String * fmi2String *
					 fmi2CallbackFunctions * fmi2Boolean * fmi2Boolean +> fmi2Component
	fmi2Instantiate_Impl(instanceName, fmuType, fmuGUID, -/*fmuResourceLocation*/, callbacks, -/*visible*/, loggingOn) ==
		let eModelVariables = effectiveScalarVariables(callbacks.componentEnvironment),
			initialUnknowns = nilSeq[Unknown](callbacks.componentEnvironment.modelStructure.initialUnknowns)
		in
			mk_fmi2Component
			(
				-- The FMU type
				fmuType,
				
				-- The initial state
				<INSTANTIATED>,
				
				-- The callbacks passed in
				callbacks,
				
				-- The effective ScalarVariables, after all defaults and inherited values set
				eModelVariables,
				
				-- The continuous time states (indexes)
				[ i | i in set inds eModelVariables & isContinuousTimeState(i, eModelVariables) ],
				
				-- The initial unknowns (indexes), which may be an empty set
				{ u.index | u in seq initialUnknowns },
				
				-- The initial setting of log categories (nil means debugging is disabled)
				if loggingOn and callbacks.componentEnvironment.logCategories <> nil
				then { cat.name | cat in seq callbacks.componentEnvironment.logCategories }
				else nil,
				
				-- The state vector, indexed by SV number, created from the effective SVs
				-- Initially either the start value given, or the default start value for the type.
				[
					if sv.variable.start <> nil
					then sv.variable.start
					else
						-- Set default value for variable type
						if is_Real(sv.variable) then 0.0
						else if is_Integer(sv.variable) then 0
						else if is_Boolean(sv.variable) then false
						else if is_String(sv.variable) then ""
						else if is_Enumeration(sv.variable) then 0
						else undefined

					| sv in seq eModelVariables
				],
				
				-- start time, set by fmi2SetupExperiment
				nil,
				
				-- stop time, optionally set by fmi2SetupExperiment
				nil,
				
				-- current time, set by fmi2SetupExperiment
				0		
			)
	pre
		instanceName <> ""
		and let modelDef = callbacks.componentEnvironment in
			fmuGUID = modelDef.attributes.guid
			and (fmuType = <fmi2CoSimulation>  => modelDef.coSimulation <> nil)
			and (fmuType = <fmi2ModelExchange> => modelDef.modelExchange <> nil)
	post
		RESULT.fmuState = <INSTANTIATED>
		and RESULT.fmuType = fmuType;


	/**
	 * The fmi2Instantiate API. This performs sufficient checks to pass the precondition on the
	 * implementation function, returning nil if any checks fail.
	 */
	fmi2Instantiate: fmi2String * fmi2Type * fmi2String * fmi2String *
					 fmi2CallbackFunctions * fmi2Boolean * fmi2Boolean +> [fmi2Component]
	fmi2Instantiate(instanceName, fmuType, fmuGUID, fmuResourceLocation, callbacks, visible, loggingOn) ==
		if instanceName = ""
		then -- @Printf("fmi2Instantiate instanceName cannot be empty\n")
			nil
		elseif fmuGUID <> callbacks.componentEnvironment.attributes.guid
		then -- @Printf("fmi2Instantiate fmuGUID does not match XML configuration\n")
			nil
		elseif fmuType = <fmi2CoSimulation> and callbacks.componentEnvironment.coSimulation = nil
		then -- @Printf("CoSimulation FMU must defined CoSimulation XML configuration\n")
			nil
		elseif fmuType = <fmi2ModelExchange> and callbacks.componentEnvironment.modelExchange = nil
		then -- @Printf("ModelExchange FMU must define ModelExchange XML configuration\n")
			nil
		else
			fmi2Instantiate_Impl(instanceName, fmuType, fmuGUID, fmuResourceLocation, callbacks, visible, loggingOn);


	/**
	 * Implementation of fmi2FreeInstance. See API method below.
	 */
	fmi2FreeInstance_Impl: fmi2Component +> <VOID>
	fmi2FreeInstance_Impl(c) ==
		<VOID>
	pre
		c.fmuState in set STATES_fmi2FreeInstance;

	/**
	 * The fmi2FreeInstance API. This performs sufficient checks to pass the precondition on the
	 * implementation function, returning <VOID> if any checks fail.
	 */
	fmi2FreeInstance: fmi2Component +> <VOID>
	fmi2FreeInstance(c) ==
		if c.fmuState not in set STATES_fmi2FreeInstance
		then -- @Printf("Cannot call fmi2FreeInstance in state %s\n", c.fmuState)
			<VOID>
		else
			fmi2FreeInstance_Impl(c);


	/**
	 * Implementation of fmi2SetDebugLogging. See API method below.
	 */
	fmi2SetDebugLogging_Impl: fmi2Component * fmi2Boolean * nat * seq of fmi2String +> fmi2Status * fmi2Component
	fmi2SetDebugLogging_Impl(c, loggingOn, nCategories, categories) ==
		mk_(<fmi2OK>,
			mu(c, logCategories |->
				if loggingOn
				then
					if nCategories = 0
					then [ cat.name | cat in seq c.callbacks.componentEnvironment.logCategories ]
					else elems categories
				else nil))
	pre
		c.fmuState in set STATES_fmi2SetDebugLogging
		and nCategories = len categories
		and card elems categories = nCategories
		and (nCategories > 0 =>
			let logcats = c.callbacks.componentEnvironment.logCategories in
				logcats <> nil
				and forall cname in seq categories &
					exists lc in seq logcats &
						lc.name = cname)
	post
		RESULT.#2.logCategories =
			if loggingOn
			then if nCategories = 0
				then [ cat.name | cat in seq c.callbacks.componentEnvironment.logCategories ]
				else elems categories
			else nil;

	/**
	 * The fmi2FreeInstance API. This performs sufficient checks to pass the precondition on the
	 * implementation function, returning <VOID> if any checks fail.
	 */
	fmi2SetDebugLogging: fmi2Component * fmi2Boolean * nat * seq of fmi2String +> fmi2Status * fmi2Component
	fmi2SetDebugLogging(c, loggingOn, nCategories, categories) ==
		if c.fmuState not in set STATES_fmi2SetDebugLogging
		then -- @Printf("Cannot call fmi2SetDebugLogging in state %s\n", c.fmuState)
			mk_(<fmi2Error>, c)
		elseif nCategories <> len categories or card elems categories <> nCategories
		then -- @Printf("nCategories does not match categories length\n")
			mk_(<fmi2Error>, c)
		else let logcats = c.callbacks.componentEnvironment.logCategories in
			if nCategories > 0 and logcats = nil
			then -- @Printf("No log categories defined in XML configuration\n")
				mk_(<fmi2Error>, c)
			elseif exists cname in seq categories & not exists lc in seq logcats & lc.name = cname
			then -- @Printf("Some log categories not found in XML configuration\n")
				mk_(<fmi2Error>, c)
			else
				fmi2SetDebugLogging_Impl(c, loggingOn, nCategories, categories)
	post
		RESULT.#1 <> <fmi2OK> => RESULT.#2 = c;	-- Unchanged state for errors
