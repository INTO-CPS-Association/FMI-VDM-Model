/**
 * This file is part of the INTO-CPS toolchain.
 *
 * Copyright (c) 2017-2019, INTO-CPS Association,
 * c/o Professor Peter Gorm Larsen, Department of Engineering
 * Finlandsgade 22, 8200 Aarhus N.
 *
 * All rights reserved.
 *
 * THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR
 * THIS INTO-CPS ASSOCIATION PUBLIC LICENSE VERSION 1.0.
 * ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES
 * RECIPIENT'S ACCEPTANCE OF THE OSMC PUBLIC LICENSE OR THE GPL 
 * VERSION 3, ACCORDING TO RECIPIENTS CHOICE.
 *
 * The INTO-CPS toolchain  and the INTO-CPS Association Public License are
 * obtained from the INTO-CPS Association, either from the above address, from
 * the URLs: http://www.into-cps.org, and in the INTO-CPS toolchain distribution.
 * GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without
 * even the implied warranty of  MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH IN THE
 * BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF
 * THE INTO-CPS ASSOCIATION.
 *
 * See the full INTO-CPS Association Public License conditions for more details.
 */

/**
 * 2.1.5 Creation, Destruction and Logging of FMU Instances.
 */
functions
	/**
	 * Implementation of fmi2Instantiate. See API method below.
	 */
	fmi2Instantiate_Impl: fmi2String * fmi2Type * fmi2String * fmi2String *
					 fmi2CallbackFunctions * fmi2Boolean * fmi2Boolean +> fmi2Component
	fmi2Instantiate_Impl(instanceName, fmuType, fmuGUID, -/*fmuResourceLocation*/, callbacks, -/*visible*/, loggingOn) ==
		let model = callbacks.componentEnvironment.model,
			eModelVariables = effectiveScalarVariables(model),
			initialUnknowns = nilSeq[Unknown](model.modelStructure.initialUnknowns),
			aliasmap = getAliasRefMap(eModelVariables),
			vorder = setToSeq[AliasTag](dom aliasmap),
			indexmap = { vorder(i) |-> i | i in set inds vorder }
		in
			mk_fmi2Component
			(
				-- The instance name!
				instanceName,

				-- The FMU type
				fmuType,

				-- The initial state
				<INSTANTIATED>,

				-- The callbacks and environment passed in
				callbacks,
				callbacks.componentEnvironment,

				-- The XML model
				model,

				-- The effective ScalarVariables, after all defaults and inherited values set
				eModelVariables,

				-- The continuous time state indexes
				[ d.index | d in seq nilSeq[Unknown](model.modelStructure.derivatives) ],

				-- The initial unknown indexes, which may be an empty set
				{ u.index | u in seq initialUnknowns },

				-- The solver derivative indexes
				[ sd | sd in seq callbacks.componentEnvironment.solver.derivatives ],

				-- The initial setting of log categories (nil means debugging is disabled)
				if loggingOn and model.logCategories <> nil
				then { cat.name | cat in seq model.logCategories }
				else nil,

				-- The reference map of SV indexes to variable indexes (below)
				indexmap,

				-- The state vector, indexed via the aliasmap, created from the effective SVs
				-- Initially either the start value given, or the default start value for the type.
				startValues(aliasmap),

				-- The solver data vector, indexed by SolverData's index
				[
					0.0 | - in seq callbacks.componentEnvironment.solver.derivatives
				],

				-- The eventIndicators
				[
					0.0 | - in set {1, ..., nilNat(model.attributes.numberOfEventIndicators)}
				],

				-- Initially dirty, because "start" values above need calculate call
				true,

				-- tolerance, set by fmi2SetupExperiment (defaults to model DefaultExperiment)
				nil,

				-- IsNewEventIteration, used in ME only
				false,

				-- EventInfo for ME and CS?
				mk_fmi2EventInfo(
					false,	-- newDiscreteStatesNeeded
					false,	-- terminateSimulation
					false,	-- nominalsOfContinuousStatesChanged
					false,	-- valuesOfContinuousStatesChanged
					false,	-- nextEventTimeDefined
					nil		-- nextEventTime
				),

				-- start time, set by fmi2SetupExperiment
				nil,

				-- stop time, optionally set by fmi2SetupExperiment
				nil,

				-- current time, set by fmi2SetupExperiment
				nil
			)
	pre
		instanceName <> ""
		and let model = callbacks.componentEnvironment.model in
			fmuGUID = model.attributes.guid
			and (fmuType = <fmi2CoSimulation>  => model.coSimulation <> nil)
			and (fmuType = <fmi2ModelExchange> => model.modelExchange <> nil)
	post
		RESULT.fmuState = <INSTANTIATED>
		and RESULT.fmuType = fmuType;


	/**
	 * The fmi2Instantiate API. This performs sufficient checks to pass the precondition on the
	 * implementation function, returning nil if any checks fail.
	 */
	fmi2Instantiate: fmi2String * fmi2Type * fmi2String * fmi2String *
					 fmi2CallbackFunctions * fmi2Boolean * fmi2Boolean +> [fmi2Component]
	fmi2Instantiate(instanceName, fmuType, fmuGUID, fmuResourceLocation, callbacks, visible, loggingOn) ==
		let cenv = callbacks.componentEnvironment,
			model = cenv.model
		in
			if instanceName = ""
			then let - = logInst(cenv, instanceName, "fmi2Instantiate instanceName cannot be empty") in
				nil
			elseif fmuGUID <> model.attributes.guid
			then let - = logInst(cenv, instanceName, "fmi2Instantiate fmuGUID does not match XML configuration") in
				nil
			elseif fmuType = <fmi2CoSimulation> and model.coSimulation = nil
			then let - = logInst(cenv, instanceName, "CoSimulation FMU must defined CoSimulation XML configuration") in
				nil
			elseif fmuType = <fmi2ModelExchange> and model.modelExchange = nil
			then let - = logInst(cenv, instanceName, "ModelExchange FMU must define ModelExchange XML configuration") in
				nil
			else
				fmi2Instantiate_Impl(instanceName, fmuType, fmuGUID, fmuResourceLocation, callbacks, visible, loggingOn);

	/**
	 * Helper to log fmi2Instantiate errors. These cannot use the callback logger because the
	 * fmi2Component that defines the enabled categories has not yet been created. It implicitly
	 * uses the raw implementation - ie. it is guaranteed to log.
	 */
	logInst: fmi2ComponentEnvironment * fmi2String * fmi2String +> <VOID>
	logInst(cenv, instanceName, message) ==
		fmi2Logger_Impl(cenv, instanceName, <fmi2Error>, "logAll", message, []);

	/**
	 * Calculate the initial vector of SV values, given their "start" attributes.
	 * Called by fmi2Instantiate and fmi2Reset.
	 */
	startValues: map AliasTag to set of ScalarVariable +> seq1 of fmi2Value
	startValues(aliasmap) ==
	[
		let sv in set aliasmap(tag) in	-- Choose any alias
			if sv.variable.start <> nil
			then sv.variable.start		-- All aliases have the same start
			else
				-- Set default value for variable type
				if is_Real(sv.variable) then 0.0
				else if is_Integer(sv.variable) then 0
				else if is_Boolean(sv.variable) then false
				else if is_String(sv.variable) then ""
				else if is_Enumeration(sv.variable) then 0
				else undefined

		| tag in seq setToSeq[AliasTag](dom aliasmap)
	];

	/**
	 * Implementation of fmi2FreeInstance. See API method below.
	 */
	fmi2FreeInstance_Impl: fmi2Component +> <VOID>
	fmi2FreeInstance_Impl(c) ==
		<VOID>	-- Logically calls c.model.callbacks.freeMemory()
	pre
		c.fmuState in set STATES_fmi2FreeInstance;

	/**
	 * The fmi2FreeInstance API. This performs sufficient checks to pass the precondition on the
	 * implementation function, returning <VOID> if any checks fail.
	 */
	fmi2FreeInstance: [fmi2Component] +> <VOID>
	fmi2FreeInstance(c) ==
		if c = nil
		then -- The function ignores a "null" argument
			<VOID>
		elseif c.fmuState not in set STATES_fmi2FreeInstance
		then let - = logAPIError(c, "Cannot call fmi2FreeInstance in state %s", [c.fmuState]) in
			<VOID>
		else
			fmi2FreeInstance_Impl(c);


	/**
	 * Implementation of fmi2SetDebugLogging. See API method below.
	 */
	fmi2SetDebugLogging_Impl: fmi2Component * fmi2Boolean * nat * seq of fmi2String +> fmi2Status * fmi2Component
	fmi2SetDebugLogging_Impl(c, loggingOn, nCategories, categories) ==
		mk_(<fmi2OK>,
			mu(c, logCategories |->
				if loggingOn
				then
					if nCategories = 0
					then [ cat.name | cat in seq c.model.logCategories ]
					else elems categories
				else nil))
	pre
		c.fmuState in set STATES_fmi2SetDebugLogging
		and nCategories = len categories
		and card elems categories = nCategories
		and (nCategories > 0 =>
			let logcats = c.model.logCategories in
				logcats <> nil
				and forall cname in seq categories &
					exists lc in seq logcats &
						lc.name = cname)
	post
		RESULT.#2.logCategories =
			if loggingOn
			then if nCategories = 0
				then [ cat.name | cat in seq c.model.logCategories ]
				else elems categories
			else nil;

	/**
	 * The fmi2FreeInstance API. This performs sufficient checks to pass the precondition on the
	 * implementation function, returning nil if any checks fail.
	 */
	fmi2SetDebugLogging: fmi2Component * fmi2Boolean * nat * seq of fmi2String +> fmi2Status * [fmi2Component]
	fmi2SetDebugLogging(c, loggingOn, nCategories, categories) ==
		if c.fmuState not in set STATES_fmi2SetDebugLogging
		then let - = logAPIError(c, "Cannot call fmi2SetDebugLogging in state %s", [c.fmuState]) in
			mk_(<fmi2Error>, nil)
		elseif nCategories <> len categories or card elems categories <> nCategories
		then let - = logAPIError(c, "nCategories does not match categories length", []) in
			mk_(<fmi2Error>, nil)
		else let logcats = c.model.logCategories in
			if logcats = nil
			then let - = logAPIError(c, "No log categories defined in XML configuration", []) in
				mk_(<fmi2Error>, nil)
			elseif exists cname in seq categories & not exists lc in seq logcats & lc.name = cname
			then let - = logAPIError(c, "Some log categories not found in XML configuration", []) in
				mk_(<fmi2Error>, nil)
			else
				fmi2SetDebugLogging_Impl(c, loggingOn, nCategories, categories)
	post
		RESULT.#1 <> <fmi2OK> => RESULT.#2 = nil;
