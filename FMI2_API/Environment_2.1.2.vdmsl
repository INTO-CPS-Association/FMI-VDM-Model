/**
 * This file is part of the INTO-CPS toolchain.
 *
 * Copyright (c) 2017-2019, INTO-CPS Association,
 * c/o Professor Peter Gorm Larsen, Department of Engineering
 * Finlandsgade 22, 8200 Aarhus N.
 *
 * All rights reserved.
 *
 * THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR
 * THIS INTO-CPS ASSOCIATION PUBLIC LICENSE VERSION 1.0.
 * ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES
 * RECIPIENT'S ACCEPTANCE OF THE OSMC PUBLIC LICENSE OR THE GPL 
 * VERSION 3, ACCORDING TO RECIPIENTS CHOICE.
 *
 * The INTO-CPS toolchain  and the INTO-CPS Association Public License are
 * obtained from the INTO-CPS Association, either from the above address, from
 * the URLs: http://www.into-cps.org, and in the INTO-CPS toolchain distribution.
 * GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without
 * even the implied warranty of  MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH IN THE
 * BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF
 * THE INTO-CPS ASSOCIATION.
 *
 * See the full INTO-CPS Association Public License conditions for more details.
 */

/**
 * 2.1.2 Platform Dependent Definitions
 */
types
	SolverDerivative ::
		vref					: fmi2ValueReference	-- VRef of base variable
		order					: nat1					-- Order of solver's derivative
		type					: <input> | <output>;

	SolverData ::
		derivatives				: seq of SolverDerivative;

	fmi2ComponentEnvironment ::
		solver					: SolverData
		model					: FMIModelDescription
		calculateValues			: fmi2Component -> fmi2Status * [fmi2Component]
		calculateDoStep			: fmi2Component * fmi2Real * fmi2Real -> fmi2Status * [fmi2Component]
		calculateEvents			: fmi2Component -> fmi2Status * [fmi2Component]

	inv cenv ==
		-- The FMI model is valid
		isValidFMIModelDescription(cenv.model)

		-- And the solver data does not contain any derivatives of SVs that are
		-- already represented in the SV list
		and (forall sd in seq cenv.solver.derivatives &
			not exists idx in set inds cenv.model.modelVariables &
				let mk_(o, b) = getDerivativeBase(idx, cenv.model.modelVariables) in
					sd.order = o and sd.vref = cenv.model.modelVariables(b).valueReference)

		-- And CoSim solver data output derivative orders do not exceed
		-- maxOutputDerivativeOrder
		and (cenv.model.coSimulation <> nil =>
			let max = cenv.model.coSimulation.maxOutputDerivativeOrder in
				max <> nil => forall sd in seq cenv.solver.derivatives &
					sd.type = <output> => sd.order <= max);

	fmi2Component ::
		fmuType					: fmi2Type
		fmuState				: fmi2State
		callbacks				: fmi2CallbackFunctions
		componentEnvironment	: fmi2ComponentEnvironment

		-- convenience read-only fields, copied from componentEnvironment
		model					: FMIModelDescription
		eModelVariables			: seq1 of ScalarVariable
		continuousTimeStates	: seq of nat1
		initialUnknowns			: set of nat1
		solverDerivatives		: seq of SolverDerivative

		-- state, events and settings
		logCategories			: [set1 of fmi2String]				-- nil means logging off
		indexmap				: map AliasTag to nat1				-- map alias to variables index
		variables				: seq1 of fmi2Value					-- Raw SV data values
		derivatives				: seq of fmi2Real					-- Solver derivative data
		eventIndicators			: seq of fmi2Real					-- ME events
		dirty					: bool								-- True if SVs updated but not recalculated
		tolerance				: [fmi2Real]						-- From DefaultExperiment or fmi2SetupExperiment
		isNewEventIteration		: bool								-- Used in ME
		eventInfo				: fmi2EventInfo						-- Used in ME and CS?

		-- time values
		startTime				: [real]
		stopTime				: [real]
		currentTime				: [real]	-- TODO should be independent SV?

	inv c ==
		len c.variables = card rng c.indexmap
		and (len c.continuousTimeStates = len nilSeq[Unknown](c.model.modelStructure.derivatives))
		and (forall sd in seq c.solverDerivatives & lookup(c.eModelVariables, sd.vref, <Real>) <> nil)
		and (len c.derivatives = len c.solverDerivatives)
		and (len c.eventIndicators = nilNat(c.model.attributes.numberOfEventIndicators))
		and (c.isNewEventIteration => c.fmuType = <fmi2ModelExchange>)
		and (c.currentTime <> nil <=> c.startTime <> nil)
		and (c.currentTime <> nil => c.currentTime >= c.startTime)
		and (c.stopTime <> nil and c.startTime <> nil => c.stopTime > c.startTime and c.currentTime <= c.stopTime);
