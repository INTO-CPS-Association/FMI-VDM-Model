/**
 * This file is part of the INTO-CPS toolchain.
 *
 * Copyright (c) 2017-2019, INTO-CPS Association,
 * c/o Professor Peter Gorm Larsen, Department of Engineering
 * Finlandsgade 22, 8200 Aarhus N.
 *
 * All rights reserved.
 *
 * THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR
 * THIS INTO-CPS ASSOCIATION PUBLIC LICENSE VERSION 1.0.
 * ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES
 * RECIPIENT'S ACCEPTANCE OF THE OSMC PUBLIC LICENSE OR THE GPL 
 * VERSION 3, ACCORDING TO RECIPIENTS CHOICE.
 *
 * The INTO-CPS toolchain  and the INTO-CPS Association Public License are
 * obtained from the INTO-CPS Association, either from the above address, from
 * the URLs: http://www.into-cps.org, and in the INTO-CPS toolchain distribution.
 * GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without
 * even the implied warranty of  MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH IN THE
 * BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF
 * THE INTO-CPS ASSOCIATION.
 *
 * See the full INTO-CPS Association Public License conditions for more details.
 */

/**
 * 4.2.1 Transfer of Input / Output Values and Parameters
 */
functions
	/**
	 * Implementation and API for fmi2SetRealInputDerivatives.
	 */
	fmi2SetRealInputDerivatives_Impl: fmi2Component * seq of fmi2ValueReference * nat *
								 seq of fmi2Integer * seq of fmi2Real +> fmi2Status * fmi2Component
	fmi2SetRealInputDerivatives_Impl(c, vr, nvr, order, value) ==
		let svUpdates = merge
			{
				{
					-- Update all SVs that are the Nth derivative of vr(ri)
					c.indexmap(aliasTag(c.eModelVariables(v))) |-> value(ri) | v in set inds c.eModelVariables

					& let mk_(o, b) = getDerivativeBase(v, c.eModelVariables) in
						b = vr(ri) and o = order(ri)
				}

				| ri in set inds vr
			},

			solverUpdates = merge
			{
				{
					-- Update all solver data that is the Nth derivative of vr(ref)
					sd |-> value(ri) | sd in set inds c.solverDerivatives

					& c.solverDerivatives(sd) = mk_SolverDerivative(vr(ri), order(ri), <input>)
				}

				| ri in set inds vr
			}
		in
			mk_(<fmi2OK>, mu(c,
				variables	|-> c.variables		++ svUpdates,
				derivatives	|-> c.derivatives	++ solverUpdates ))
	pre
		c.fmuType = <fmi2CoSimulation>
		and c.fmuState in set STATES_fmi2SetRealInputDerivatives
		and nilBool(c.model.coSimulation.canInterpolateInputs)
		and nvr = len vr
		and nvr = len value
		and nvr = len order
		and (forall o in seq order & o > 0)
		and (forall v in seq vr &
			c.eModelVariables(v).causality = <input>
			and is_Real(c.eModelVariables(v).variable))

		-- Input derivatives must exist as SVs with "derivative" set,
		-- or be defined in solver data (but not both!)
		and (forall i in set inds vr &
			(exists sd in seq c.solverDerivatives &
				sd.index = vr(i) and sd.order = order(i))
			<=>
			not exists dv in set inds c.eModelVariables &
				let mk_(o, b) = getDerivativeBase(dv, c.eModelVariables) in
					o = order(i) and b = vr(i))

		-- If each input derivative is a variable, the new value must be within min/max
		and (forall i in set inds vr &
			forall dv in set inds c.eModelVariables &
				let mk_(o, b) = getDerivativeBase(dv, c.eModelVariables) in
					o = order(i) and b = vr(i) =>
						let min = c.eModelVariables(vr(i)).variable.min,
							max = c.eModelVariables(vr(i)).variable.max in
						(min <> nil => value(i) >= min) and (max <> nil => value(i) <= max));

	fmi2SetRealInputDerivatives: fmi2Component * seq of fmi2ValueReference * nat *
								 seq of fmi2Integer * seq of fmi2Real +> fmi2Status * [fmi2Component]
	fmi2SetRealInputDerivatives(c, vr, nvr, order, value) ==
		if c.fmuType <> <fmi2CoSimulation>
		then -- @Printf("Cannot call fmi2SetRealInputDerivatives for fmi2ModelExchange\n")
			mk_(<fmi2Error>, nil)
		elseif c.fmuState not in set STATES_fmi2SetRealInputDerivatives
		then -- @Printf("Cannot call fmi2SetRealInputDerivatives in state %s\n", c.fmuState)
			mk_(<fmi2Error>, nil)
		elseif not nilBool(c.model.coSimulation.canInterpolateInputs)
		then -- @Printf("Cannot inperpolate inputs\n")
			mk_(<fmi2Error>, nil)
		elseif nvr <> len vr or nvr <> len value or nvr <> len order
		then -- @Printf("nvr, vr, value and order are not consistent\n")
			mk_(<fmi2Error>, nil)
		elseif exists o in seq order & o <= 0
		then -- @Printf("Order entries must all be >0\n")
			mk_(<fmi2Error>, nil)
		elseif exists v in seq vr &
			c.eModelVariables(v).causality <> <input>
			and is_Real(c.eModelVariables(v).variable)
		then -- @Printf("Some arguments are not Real inputs\n")
			mk_(<fmi2Error>, nil)

		-- Input derivatives must exist as SVs with "derivative" set
		-- or be defined in solver data (but not both!)
		elseif not forall i in set inds vr &
			(exists sd in seq c.solverDerivatives &
				sd.index = vr(i) and sd.order = order(i))
			<=>
			not exists dv in set inds c.eModelVariables &
				let mk_(o, b) = getDerivativeBase(dv, c.eModelVariables) in
					o = order(i) and b = vr(i)
		then -- @Printf("Some inputs do not have derivatives of the right order\n")
			mk_(<fmi2Error>, nil)

		-- If each input derivative is a variable, the new value must be within min/max
		elseif exists i in set inds vr &
			exists dv in set inds c.eModelVariables &
				let mk_(o, b) = getDerivativeBase(dv, c.eModelVariables) in
					o = order(i) and b = vr(i) and
						let min = c.eModelVariables(vr(i)).variable.min,
							max = c.eModelVariables(vr(i)).variable.max in
						(min <> nil and value(i) < min)	or (max <> nil and value(i) > max)
		then -- @Printf("Values not all within min/max for variables\n")
			mk_(<fmi2Error>, nil)

		else
			fmi2SetRealInputDerivatives_Impl(c, vr, nvr, order, value);


	/**
	 * Implementation and API for fmi2GetRealOutputDerivatives.
	 */
	fmi2GetRealOutputDerivatives_Impl: fmi2Component * seq of fmi2ValueReference * nat *
								  seq of fmi2Integer +> fmi2Status * seq of fmi2Real
	fmi2GetRealOutputDerivatives_Impl(c, vr, nvr, order) ==
		let reals =
		[
			let sdis = [ sdi | sdi in set inds c.solverDerivatives &
				c.solverDerivatives(sdi) = mk_SolverDerivative(vr(i), order(i), <output>) ]
			in
				if order(i) > c.model.coSimulation.maxOutputDerivativeOrder
				then
					0
				elseif sdis <> []	-- May be multiple matches, but should be all the same
				then
					c.derivatives(hd sdis)
				else
					let svis = [ svi | svi in set inds c.eModelVariables &
						let mk_(o, b) = getDerivativeBase(svi, c.eModelVariables) in
							b = vr(i) and o = order(i) ]
					in
						c.variables(c.indexmap(aliasTag(c.eModelVariables(hd svis))))	-- Precondition guarantees len >0

			| i in set inds vr
		]
		in 
			mk_(<fmi2OK>, reals)
	pre
		c.fmuType = <fmi2CoSimulation>
		and c.fmuState in set STATES_fmi2GetRealOutputDerivatives
		and nvr = len vr
		and nvr = len order
		and (forall o in seq order & o > 0)
		and (forall v in seq vr & c.eModelVariables(v).causality = <output>)

		-- Output derivatives must exist as SVs with "derivative" set,
		-- or be defined in solver data (but not both!)
		and (forall i in set inds vr &
			(exists sd in seq c.solverDerivatives &
				sd.index = vr(i) and sd.order = order(i))
			<=>
			not exists dv in set inds c.eModelVariables &
				let mk_(o, b) = getDerivativeBase(dv, c.eModelVariables) in
					o = order(i) and b = vr(i))
	post
		RESULT.#1 = <fmi2OK> => nvr = len RESULT.#2;

	fmi2GetRealOutputDerivatives: fmi2Component * seq of fmi2ValueReference * nat *
								  seq of fmi2Integer +> fmi2Status * [seq of fmi2Real]
	fmi2GetRealOutputDerivatives(c, vr, nvr, order) ==
		if c.fmuType <> <fmi2CoSimulation>
		then -- @Printf("Cannot call fmi2GetRealOutputDerivatives for fmi2ModelExchange\n")
			mk_(<fmi2Error>, nil)
		elseif c.fmuState not in set STATES_fmi2GetRealOutputDerivatives
		then -- @Printf("Cannot call fmi2GetRealOutputDerivatives in state %s\n", c.fmuState)
			mk_(<fmi2Error>, nil)
		elseif nvr <> len vr or nvr <> len order
		then -- @Printf("nvr, vr and order are not consistent\n")
			mk_(<fmi2Error>, nil)
		elseif exists o in seq order & o <= 0
		then -- @Printf("Order entries must all be >0\n")
			mk_(<fmi2Error>, nil)
		elseif exists v in seq vr & c.eModelVariables(v).causality <> <output>
		then -- @Printf("Some arguments are not outputs\n")
			mk_(<fmi2Error>, nil)

		-- Output derivatives must exist as SVs with "derivative" set
		-- or be defined in solver data (but not both!)
		elseif not forall i in set inds vr &
			(exists sd in seq c.solverDerivatives &
				sd.index = vr(i) and sd.order = order(i))
			<=>
			not exists dv in set inds c.eModelVariables &
				let mk_(o, b) = getDerivativeBase(dv, c.eModelVariables) in
					o = order(i) and b = vr(i)
		then -- @Printf("Some outputs do not have derivatives of the right order\n")
			mk_(<fmi2Error>, nil)

		else
			fmi2GetRealOutputDerivatives_Impl(c, vr, nvr, order)
	 post
	 	RESULT.#1 <> <fmi2OK> <=> RESULT.#2 = nil;
