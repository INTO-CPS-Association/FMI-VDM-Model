/**
 * This file is part of the INTO-CPS toolchain.
 *
 * Copyright (c) 2017-2019, INTO-CPS Association,
 * c/o Professor Peter Gorm Larsen, Department of Engineering
 * Finlandsgade 22, 8200 Aarhus N.
 *
 * All rights reserved.
 *
 * THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR
 * THIS INTO-CPS ASSOCIATION PUBLIC LICENSE VERSION 1.0.
 * ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES
 * RECIPIENT'S ACCEPTANCE OF THE OSMC PUBLIC LICENSE OR THE GPL 
 * VERSION 3, ACCORDING TO RECIPIENTS CHOICE.
 *
 * The INTO-CPS toolchain  and the INTO-CPS Association Public License are
 * obtained from the INTO-CPS Association, either from the above address, from
 * the URLs: http://www.into-cps.org, and in the INTO-CPS toolchain distribution.
 * GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without
 * even the implied warranty of  MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH IN THE
 * BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF
 * THE INTO-CPS ASSOCIATION.
 *
 * See the full INTO-CPS Association Public License conditions for more details.
 */

/**
 * 4.2.1 Transfer of Input / Output Values and Parameters
 */
functions
	/**
	 * Implementation and API for fmi2GetStringStatus.
	 */
	fmi2SetRealInputDerivatives_Impl: fmi2Component * seq of fmi2ValueReference * nat *
								 seq of fmi2Integer * seq of fmi2Real +> fmi2Status
	fmi2SetRealInputDerivatives_Impl(c, vr, nvr, order, value) ==
		is not yet specified
	pre
		c.fmuState = <EVENT_MODE>
		and nvr = len vr
		and nvr = len value
		and nvr = len order
		and forall o in seq order & o > 0;

	fmi2SetRealInputDerivatives: fmi2Component * seq of fmi2ValueReference * nat *
								 seq of fmi2Integer * seq of fmi2Real +> fmi2Status
	fmi2SetRealInputDerivatives(c, vr, nvr, order, value) ==
		if c.fmuState <> <EVENT_MODE>
		then -- @Printf("Cannot call fmi2SetRealInputDerivatives in state %s\n", c.fmuState)
			<fmi2Error>
		elseif nvr <> len vr or nvr <> len value or nvr <> len order
		then -- @Printf("nvr, vr, value and order are not consistent\n")
			<fmi2Error>
		elseif exists o in seq order & o <= 0
		then -- @Printf("Order entries must all be >0\n")
			<fmi2Error>
		else
			fmi2SetRealInputDerivatives_Impl(c, vr, nvr, order, value);


	/**
	 * Implementation and API for fmi2GetRealOutputDerivatives.
	 */
	fmi2GetRealOutputDerivatives_Impl: fmi2Component * seq of fmi2ValueReference * nat *
								  seq of fmi2Integer +> fmi2Status * seq of fmi2Real
	fmi2GetRealOutputDerivatives_Impl(c, vr, nvr, order) ==
		is not yet specified
	pre
		c.fmuState = <EVENT_MODE>
		and nvr = len vr
		and nvr = len order
		and forall o in seq order & o > 0
	post
		RESULT.#1 = <fmi2OK> => nvr = len RESULT.#2;

	fmi2GetRealOutputDerivatives: fmi2Component * seq of fmi2ValueReference * nat *
								  seq of fmi2Integer +> fmi2Status * [seq of fmi2Real]
	fmi2GetRealOutputDerivatives(c, vr, nvr, order) ==
		if c.fmuState <> <EVENT_MODE>
		then -- @Printf("Cannot call fmi2GetRealOutputDerivatives in state %s\n", c.fmuState)
			mk_(<fmi2Error>, nil)
		elseif nvr <> len vr or nvr <> len order
		then -- @Printf("nvr, vr and order are not consistent\n")
			mk_(<fmi2Error>, nil)
		elseif exists o in seq order & o <= 0
		then -- @Printf("Order entries must all be >0\n")
			mk_(<fmi2Error>, nil)
		else
			fmi2GetRealOutputDerivatives_Impl(c, vr, nvr, order)
	 post
	 	RESULT.#1 <> <fmi2OK> <=> RESULT.#2 = nil;
			