/**
 * This file is part of the INTO-CPS toolchain.
 *
 * Copyright (c) 2017-2019, INTO-CPS Association,
 * c/o Professor Peter Gorm Larsen, Department of Engineering
 * Finlandsgade 22, 8200 Aarhus N.
 *
 * All rights reserved.
 *
 * THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR
 * THIS INTO-CPS ASSOCIATION PUBLIC LICENSE VERSION 1.0.
 * ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES
 * RECIPIENT'S ACCEPTANCE OF THE OSMC PUBLIC LICENSE OR THE GPL 
 * VERSION 3, ACCORDING TO RECIPIENTS CHOICE.
 *
 * The INTO-CPS toolchain  and the INTO-CPS Association Public License are
 * obtained from the INTO-CPS Association, either from the above address, from
 * the URLs: http://www.into-cps.org, and in the INTO-CPS toolchain distribution.
 * GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without
 * even the implied warranty of  MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH IN THE
 * BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF
 * THE INTO-CPS ASSOCIATION.
 *
 * See the full INTO-CPS Association Public License conditions for more details.
 */

/**
 * 4.2.1 Transfer of Input / Output Values and Parameters
 */
functions
	/**
	 * Implementation and API for fmi2SetRealInputDerivatives.
	 */
	fmi2SetRealInputDerivatives_Impl: fmi2Component * seq of fmi2ValueReference * nat *
								 seq of fmi2Integer * seq of fmi2Real +> fmi2Status * fmi2Component
	fmi2SetRealInputDerivatives_Impl(c, vr, nvr, order, value) ==
		let svUpdates = merge
			{
				{
					v |-> value(ref) | v in set inds c.eModelVariables

					& let mk_(o, b) = getDerivativeBase(v, c.eModelVariables) in
						exists j in set inds vr & vr(j) = b and order(j) = o
				}

				| ref in seq vr
			},

			solverUpdates = merge
			{
				{
					v |-> value(ref) | v in set inds c.solverDerivatives

					& c.solverDerivatives(v) = mk_SolverDerivative(ref, order(ref), <input>)
				}

				| ref in seq vr
			}
		in
			mk_(<fmi2OK>, mu(c,
				variables	|-> c.variables ++ svUpdates,
				solver		|-> c.solver ++ solverUpdates ))
	pre
		c.fmuType = <fmi2CoSimulation>
		and c.fmuState in set STATES_fmi2SetRealInputDerivatives
		and nvr = len vr
		and nvr = len value
		and nvr = len order
		and (forall o in seq order & o > 0)
		and (forall v in seq vr & c.eModelVariables(v).causality = <input>)

		-- Assuming that input derivatives must exist as SVs with "derivative" set,
		-- or be defined in solver data (but not both!)
		and (forall i in set inds vr &
			(exists sd in seq c.solverDerivatives &
				sd.index = vr(i) and sd.order = order(i))
			<=>
			not exists dv in set inds c.eModelVariables &
				let mk_(o, b) = getDerivativeBase(dv, c.eModelVariables) in
					o = order(i) and b = vr(i));

	fmi2SetRealInputDerivatives: fmi2Component * seq of fmi2ValueReference * nat *
								 seq of fmi2Integer * seq of fmi2Real +> fmi2Status * [fmi2Component]
	fmi2SetRealInputDerivatives(c, vr, nvr, order, value) ==
		if c.fmuType <> <fmi2CoSimulation>
		then -- @Printf("Cannot call fmi2SetRealInputDerivatives for fmi2ModelExchange\n")
			mk_(<fmi2Error>, nil)
		elseif c.fmuState not in set STATES_fmi2SetRealInputDerivatives
		then -- @Printf("Cannot call fmi2SetRealInputDerivatives in state %s\n", c.fmuState)
			mk_(<fmi2Error>, nil)
		elseif nvr <> len vr or nvr <> len value or nvr <> len order
		then -- @Printf("nvr, vr, value and order are not consistent\n")
			mk_(<fmi2Error>, nil)
		elseif exists o in seq order & o <= 0
		then -- @Printf("Order entries must all be >0\n")
			mk_(<fmi2Error>, nil)
		elseif exists v in seq vr & c.eModelVariables(v).causality <> <input>
		then -- @Printf("Some arguments are not inputs\n")
			mk_(<fmi2Error>, nil)

		-- Assuming that input derivatives must exist as SVs with "derivative" set
		-- or be defined in solver data (but not both!)
		elseif not forall i in set inds vr &
			(exists sd in seq c.solverDerivatives &
				sd.index = vr(i) and sd.order = order(i))
			<=>
			exists dv in set inds c.eModelVariables &
				let mk_(o, b) = getDerivativeBase(dv, c.eModelVariables) in
					o = order(i) and b = vr(i)
		then -- @Printf("Some inputs do not have derivatives of the right order\n")
			mk_(<fmi2Error>, nil)

		else
			fmi2SetRealInputDerivatives_Impl(c, vr, nvr, order, value);


	/**
	 * Implementation and API for fmi2GetRealOutputDerivatives.
	 */
	fmi2GetRealOutputDerivatives_Impl: fmi2Component * seq of fmi2ValueReference * nat *
								  seq of fmi2Integer +> fmi2Status * seq of fmi2Real
	fmi2GetRealOutputDerivatives_Impl(c, vr, nvr, order) ==
		let rindexes =
			[
				vr(i) | i in set inds vr

				/*
				 * This implementation assumes that output derivatives are all declared as
				 * ScalarVariables. If this is not the case, and the output derivatives can
				 * be hidden, then there has to be another "internal state" vector in
				 * the fmi2Component that holds such values (which are not directly gettable,
				 * and must have meta data to describe which SV they are derivatives of).
				 */
				& exists dv in set inds c.eModelVariables &
					let mk_(o, b) = getDerivativeBase(dv, c.eModelVariables) in
						b = vr(i) and o = order(i)
			]
		in 
			mk_(<fmi2OK>, [ c.variables(v) | v in seq rindexes ])
	pre
		c.fmuType = <fmi2CoSimulation>
		and c.fmuState in set STATES_fmi2GetRealOutputDerivatives
		and nvr = len vr
		and nvr = len order
		and (forall o in seq order & o > 0)
		and (forall v in seq vr & c.eModelVariables(v).causality = <output>)

		-- Assuming that output derivatives must exist as SVs with "derivative" set
		and (forall i in set inds vr &
			exists1 dv in set inds c.eModelVariables &
				let mk_(o, b) = getDerivativeBase(dv, c.eModelVariables) in
					o = order(i) and b = vr(i))
	post
		RESULT.#1 = <fmi2OK> => nvr = len RESULT.#2;

	fmi2GetRealOutputDerivatives: fmi2Component * seq of fmi2ValueReference * nat *
								  seq of fmi2Integer +> fmi2Status * [seq of fmi2Real]
	fmi2GetRealOutputDerivatives(c, vr, nvr, order) ==
		if c.fmuType <> <fmi2CoSimulation>
		then -- @Printf("Cannot call fmi2GetRealOutputDerivatives for fmi2ModelExchange\n")
			mk_(<fmi2Error>, nil)
		elseif c.fmuState not in set STATES_fmi2GetRealOutputDerivatives
		then -- @Printf("Cannot call fmi2GetRealOutputDerivatives in state %s\n", c.fmuState)
			mk_(<fmi2Error>, nil)
		elseif nvr <> len vr or nvr <> len order
		then -- @Printf("nvr, vr and order are not consistent\n")
			mk_(<fmi2Error>, nil)
		elseif exists o in seq order & o <= 0
		then -- @Printf("Order entries must all be >0\n")
			mk_(<fmi2Error>, nil)
		elseif exists v in seq vr & c.eModelVariables(v).causality <> <output>
		then -- @Printf("Some arguments are not outputs\n")
			mk_(<fmi2Error>, nil)

		-- Assuming that output derivatives must exist as SVs with "derivative" set
		elseif not forall i in set inds vr &
			exists dv in set inds c.eModelVariables &
				let mk_(o, b) = getDerivativeBase(dv, c.eModelVariables) in
					o = order(i) and b = vr(i)
		then -- @Printf("Some outputs do not have derivatives of the right order\n")
			mk_(<fmi2Error>, nil)

		else
			fmi2GetRealOutputDerivatives_Impl(c, vr, nvr, order)
	 post
	 	RESULT.#1 <> <fmi2OK> <=> RESULT.#2 = nil;
