/**
 * This file is part of the INTO-CPS toolchain.
 *
 * Copyright (c) 2017-2020, INTO-CPS Association,
 * c/o Professor Peter Gorm Larsen, Department of Engineering
 * Finlandsgade 22, 8200 Aarhus N.
 *
 * All rights reserved.
 *
 * THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR
 * THIS INTO-CPS ASSOCIATION PUBLIC LICENSE VERSION 1.0.
 * ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES
 * RECIPIENT'S ACCEPTANCE OF THE OSMC PUBLIC LICENSE OR THE GPL 
 * VERSION 3, ACCORDING TO RECIPIENTS CHOICE.
 *
 * The INTO-CPS toolchain  and the INTO-CPS Association Public License are
 * obtained from the INTO-CPS Association, either from the above address, from
 * the URLs: http://www.into-cps.org, and in the INTO-CPS toolchain distribution.
 * GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without
 * even the implied warranty of  MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH IN THE
 * BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF
 * THE INTO-CPS ASSOCIATION.
 *
 * See the full INTO-CPS Association Public License conditions for more details.
 */

/**
 * 2.1.5 Logging of FMU Instances.
 */
functions
	/**
	 * The implementation of the standard logger function.
	 */
	fmi2Logger_Impl: fmi2ComponentEnvironment * fmi2String * fmi2Status * fmi2String * fmi2String * seq of ? +> <VOID>
	fmi2Logger_Impl(componentEnvironment, instanceName, status, category, message, args) ==
		let expanded = expandValueRefs(componentEnvironment, message) in
			/* @Printf("%s: %s %s %s %s %s\n", instanceName, status, category, expanded,
			  		if len args > 0 then args(1) else nil,
			  		if len args > 1 then args(2) else nil)
			 */
			<VOID>;

	/**
	 * The Logger interface includes a check of whether a category is enabled. Note that
	 * log calls can be made with unknown Categories, but if the category is not in the
	 * list of enabled Categories, it will not appear.
	 *
	 * Note that the interface is slightly different to the logger function in the FMI Standard.
	 * This is because the function needs access to the fmi2Component data to see which log
	 * categories are enabled. This replaces the fmi2ComponentEnvironment (for access to the model)
	 * which is available via the fmi2Component.
	 */
	fmi2Logger: fmi2Component * fmi2String * fmi2Status * fmi2String * fmi2String * seq of ? +> <VOID>
	fmi2Logger(c, instanceName, status, category, message, args) ==
		if c.logCategories = nil or not category in set c.logCategories
		then <VOID>		-- logging disabled or category not enabled
		else fmi2Logger_Impl(c.componentEnvironment, instanceName, status, category, message, args);


	/**
	 * Helper functions for the APIs to raise various status code log messages.
	 */
	logAPIError: fmi2Component * fmi2String * seq of ? +> <VOID>
	logAPIError(c, message, args) ==
		c.callbacks.logger(c, c.instanceName, <fmi2Error>, "logAll", message, args);


	/**
	 * Support functions to expand logger strings.
	 */
	expandValueRefs: fmi2ComponentEnvironment * fmi2String +> fmi2String
	expandValueRefs(cenv, s) ==
		if s = []
		then []
		elseif hd s = '#'
		then
			let mk_(hash, tail) = readToHash(s) in
				cases hash:
					"##" -> "#" ^ expandValueRefs(cenv, tail),

					"#" ^ [type] ^ digits ^ "#" ->
						let vref = valueOf(digits) in
						let kind = 
							cases type:
								'r' -> <Real>,
								'i' -> <Integer>,
								'b' -> <Boolean>,
								's' -> <String>,
								others -> undefined
							end in
						let sv = lookup(cenv.model.modelVariables, vref, kind) in
							if sv = nil
							then "?" ^ expandValueRefs(cenv, tail)
							else sv.name ^ expandValueRefs(cenv, tail),

					others -> "?" ^ expandValueRefs(cenv, tail)
				end
		else
			[hd s] ^ expandValueRefs(cenv, tl s) 
	measure len s;

	readToHash: fmi2String +> fmi2String * fmi2String
	readToHash(s) ==
		let hashes = [ i | i in set inds s & i > 1 and s(i) = '#' ] in
			if hashes <> []
			then
				let i = hd hashes in
					mk_(s(1, ..., i), s(i+1, ..., len s))
			else
				mk_("", tl s)
	pre
		s <> "" and s(1) = '#';

	valueOf: fmi2String +> nat
	valueOf(s) ==
		if s = []
		then 0
		else let rest ^ [last] = s in
			digitValueOf(last) + 10 * valueOf(rest)
	pre
		elems s subset elems DECIMALS 
	measure len s;

values
	DECIMALS = "0123456789";
	digitValueOf : map char to nat = { DECIMALS(i) |-> (i-1) | i in set inds DECIMALS };
