/**
 * This file is part of the INTO-CPS toolchain.
 *
 * Copyright (c) 2017-2019, INTO-CPS Association,
 * c/o Professor Peter Gorm Larsen, Department of Engineering
 * Finlandsgade 22, 8200 Aarhus N.
 *
 * All rights reserved.
 *
 * THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR
 * THIS INTO-CPS ASSOCIATION PUBLIC LICENSE VERSION 1.0.
 * ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES
 * RECIPIENT'S ACCEPTANCE OF THE OSMC PUBLIC LICENSE OR THE GPL 
 * VERSION 3, ACCORDING TO RECIPIENTS CHOICE.
 *
 * The INTO-CPS toolchain  and the INTO-CPS Association Public License are
 * obtained from the INTO-CPS Association, either from the above address, from
 * the URLs: http://www.into-cps.org, and in the INTO-CPS toolchain distribution.
 * GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without
 * even the implied warranty of  MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH IN THE
 * BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF
 * THE INTO-CPS ASSOCIATION.
 *
 * See the full INTO-CPS Association Public License conditions for more details.
 */

/**
 * 4.2.3 Retrieving Status Information from the Slave
 */
types
	fmi2StatusKind = <fmi2DoStepStatus> | <fmi2PendingStatus> | <fmi2LastSuccessfulTime> | <fmi2Terminated>;

functions
	/**
	 * Implementation and API for fmi2GetStatus.
	 */
	fmi2GetStatus_Impl: fmi2Component * fmi2StatusKind +> fmi2Status * fmi2Status
	fmi2GetStatus_Impl(c, s) ==
		mk_(<fmi2OK>, <fmi2Pending>)	-- TODO: async interface
	pre
		c.fmuType = <fmi2CoSimulation>
		and c.fmuState in set STATES_fmi2GetStatus
		and s = <fmi2DoStepStatus>;

	fmi2GetStatus: fmi2Component * fmi2StatusKind +> fmi2Status * [fmi2Status]
	fmi2GetStatus(c, s) ==
		if c.fmuType <> <fmi2CoSimulation>
		then -- @Printf("Cannot call fmi2GetStatus for fmi2ModelExchange\n")
			mk_(<fmi2Error>, nil)
		elseif c.fmuState not in set STATES_fmi2GetStatus
		then -- @Printf("Cannot call fmi2GetStatus in state %s\n", c.fmuState)
			mk_(<fmi2Error>, nil)
		elseif s <> <fmi2DoStepStatus>
		then -- @Printf("Cannot fmi2GetStatus of %s\n", s)
			mk_(<fmi2Error>, nil)
		else
			fmi2GetStatus_Impl(c, s)
	 post
	 	RESULT.#1 <> <fmi2OK> <=> RESULT.#2 = nil;


	/**
	 * Implementation and API for fmi2GetRealStatus.
	 */
	fmi2GetRealStatus_Impl: fmi2Component * fmi2StatusKind +> fmi2Status * fmi2Real
	fmi2GetRealStatus_Impl(c, s) ==
		mk_(<fmi2OK>, c.currentTime)	-- TODO: last successful <> current
	pre
		c.fmuType = <fmi2CoSimulation>
		and c.fmuState in set STATES_fmi2GetRealStatus
		and s = <fmi2LastSuccessfulTime>;

	fmi2GetRealStatus: fmi2Component * fmi2StatusKind +> fmi2Status * [fmi2Real]
	fmi2GetRealStatus(c, s) ==
		if c.fmuType <> <fmi2CoSimulation>
		then -- @Printf("Cannot call fmi2GetRealStatus for fmi2ModelExchange\n")
			mk_(<fmi2Error>, nil)
		elseif c.fmuState not in set STATES_fmi2GetRealStatus
		then -- @Printf("Cannot call fmi2GetRealStatus in state %s\n", c.fmuState)
			mk_(<fmi2Error>, nil)
		elseif s <> <fmi2LastSuccessfulTime>
		then -- @Printf("Cannot fmi2GetRealStatus of %s\n", s)
			mk_(<fmi2Error>, nil)
		else
			fmi2GetRealStatus_Impl(c, s)
	 post
	 	RESULT.#1 <> <fmi2OK> <=> RESULT.#2 = nil;


	/**
	 * Implementation and API for fmi2GetIntegerStatus.
	 */
	fmi2GetIntegerStatus_Impl: fmi2Component * fmi2StatusKind +> fmi2Status * fmi2Integer
	fmi2GetIntegerStatus_Impl(c, s) ==
		is not yet specified	-- No Integer statuses at present
	pre
		c.fmuType = <fmi2CoSimulation>
		and c.fmuState in set STATES_fmi2GetIntegerStatus;

	fmi2GetIntegerStatus: fmi2Component * fmi2StatusKind +> fmi2Status * [fmi2Integer]
	fmi2GetIntegerStatus(c, s) ==
		if c.fmuType <> <fmi2CoSimulation>
		then -- @Printf("Cannot call fmi2GetIntegerStatus for fmi2ModelExchange\n")
			mk_(<fmi2Error>, nil)
		elseif c.fmuState not in set STATES_fmi2GetIntegerStatus
		then -- @Printf("Cannot call fmi2GetIntegerStatus in state %s\n", c.fmuState)
			mk_(<fmi2Error>, nil)
		elseif true		-- No Integer statuses at present
		then -- @Printf("Cannot fmi2GetIntegerStatus of %s\n", s)
			mk_(<fmi2Error>, nil)
		else
			fmi2GetIntegerStatus_Impl(c, s)
	 post
	 	RESULT.#1 <> <fmi2OK> <=> RESULT.#2 = nil;


	/**
	 * Implementation and API for fmi2GetBooleanStatus.
	 */
	fmi2GetBooleanStatus_Impl: fmi2Component * fmi2StatusKind +> fmi2Status * fmi2Boolean
	fmi2GetBooleanStatus_Impl(c, s) ==
		mk_(<fmi2OK>, c.fmuState = <TERMINATED>)
	pre
		c.fmuType = <fmi2CoSimulation>
		and c.fmuState in set STATES_fmi2GetBooleanStatus
		and s = <fmi2Terminated>;

	fmi2GetBooleanStatus: fmi2Component * fmi2StatusKind +> fmi2Status * [fmi2Boolean]
	fmi2GetBooleanStatus(c, s) ==
		if c.fmuType <> <fmi2CoSimulation>
		then -- @Printf("Cannot call fmi2GetBooleanStatus for fmi2ModelExchange\n")
			mk_(<fmi2Error>, nil)
		elseif c.fmuState not in set STATES_fmi2GetBooleanStatus
		then -- @Printf("Cannot call fmi2GetBooleanStatus in state %s\n", c.fmuState)
			mk_(<fmi2Error>, nil)
		elseif s <> <fmi2Terminated>
		then -- @Printf("Cannot fmi2GetBooleanStatus of %s\n", s)
			mk_(<fmi2Error>, nil)
		else
			fmi2GetBooleanStatus_Impl(c, s)
	 post
	 	RESULT.#1 <> <fmi2OK> <=> RESULT.#2 = nil;


	/**
	 * Implementation and API for fmi2GetStringStatus.
	 */
	fmi2GetStringStatus_Impl: fmi2Component * fmi2StatusKind +> fmi2Status * fmi2String
	fmi2GetStringStatus_Impl(c, s) ==
		mk_(<fmi2OK>, "pending undefined")	-- TODO: async processing 
	pre
		c.fmuType = <fmi2CoSimulation>
		and c.fmuState in set STATES_fmi2GetStringStatus
		and s = <fmi2PendingStatus>;

	fmi2GetStringStatus: fmi2Component * fmi2StatusKind +> fmi2Status * [fmi2String]
	fmi2GetStringStatus(c, s) ==
		if c.fmuType <> <fmi2CoSimulation>
		then -- @Printf("Cannot call fmi2GetStringStatus for fmi2ModelExchange\n")
			mk_(<fmi2Error>, nil)
		elseif c.fmuState not in set STATES_fmi2GetStringStatus
		then -- @Printf("Cannot call fmi2GetStringStatus in state %s\n", c.fmuState)
			mk_(<fmi2Error>, nil)
		elseif s <> <fmi2PendingStatus>
		then -- @Printf("Cannot fmi2GetStringStatus of %s\n", s)
			mk_(<fmi2Error>, nil)
		else
			fmi2GetStringStatus_Impl(c, s)
	 post
	 	RESULT.#1 <> <fmi2OK> <=> RESULT.#2 = nil;
