/**
 * This file is part of the INTO-CPS toolchain.
 *
 * Copyright (c) 2017-2019, INTO-CPS Association,
 * c/o Professor Peter Gorm Larsen, Department of Engineering
 * Finlandsgade 22, 8200 Aarhus N.
 *
 * All rights reserved.
 *
 * THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR
 * THIS INTO-CPS ASSOCIATION PUBLIC LICENSE VERSION 1.0.
 * ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES
 * RECIPIENT'S ACCEPTANCE OF THE OSMC PUBLIC LICENSE OR THE GPL 
 * VERSION 3, ACCORDING TO RECIPIENTS CHOICE.
 *
 * The INTO-CPS toolchain  and the INTO-CPS Association Public License are
 * obtained from the INTO-CPS Association, either from the above address, from
 * the URLs: http://www.into-cps.org, and in the INTO-CPS toolchain distribution.
 * GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without
 * even the implied warranty of  MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH IN THE
 * BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF
 * THE INTO-CPS ASSOCIATION.
 *
 * See the full INTO-CPS Association Public License conditions for more details.
 */

/**
 * 4.2.3 Retrieving Status Information from the Slave
 */
types
	fmi2StatusKind = <fmi2DoStepStatus> | <fmi2PendingStatus> | <fmi2LastSuccessfulTime> | <fmi2Terminated>;

functions
	fmi2GetStatus: fmi2Component * fmi2StatusKind +> fmi2Status * fmi2Status
	fmi2GetStatus(c, s) ==
		is not yet specified
	pre
		c.fmustate = <EVENT_MODE>;

	fmi2GetRealStatus: fmi2Component * fmi2StatusKind +> fmi2Status * fmi2Real
	fmi2GetRealStatus(c, s) ==
		is not yet specified
	pre
		c.fmustate = <EVENT_MODE>;

	fmi2GetIntegerStatus: fmi2Component * fmi2StatusKind +> fmi2Status * fmi2Integer
	fmi2GetIntegerStatus(c, s) ==
		is not yet specified
	pre
		c.fmustate = <EVENT_MODE>;

	fmi2GetBooleanStatus: fmi2Component * fmi2StatusKind +> fmi2Status * fmi2Boolean
	fmi2GetBooleanStatus(c, s) ==
		is not yet specified
	pre
		c.fmustate = <EVENT_MODE>;

	fmi2GetStringStatus: fmi2Component * fmi2StatusKind +> fmi2Status * fmi2String
	fmi2GetStringStatus(c, s) ==
		is not yet specified
	pre
		c.fmustate = <EVENT_MODE>;
