/**
 * This file is part of the INTO-CPS toolchain.
 *
 * Copyright (c) 2017-2019, INTO-CPS Association,
 * c/o Professor Peter Gorm Larsen, Department of Engineering
 * Finlandsgade 22, 8200 Aarhus N.
 *
 * All rights reserved.
 *
 * THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR
 * THIS INTO-CPS ASSOCIATION PUBLIC LICENSE VERSION 1.0.
 * ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES
 * RECIPIENT'S ACCEPTANCE OF THE OSMC PUBLIC LICENSE OR THE GPL 
 * VERSION 3, ACCORDING TO RECIPIENTS CHOICE.
 *
 * The INTO-CPS toolchain  and the INTO-CPS Association Public License are
 * obtained from the INTO-CPS Association, either from the above address, from
 * the URLs: http://www.into-cps.org, and in the INTO-CPS toolchain distribution.
 * GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without
 * even the implied warranty of  MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH IN THE
 * BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF
 * THE INTO-CPS ASSOCIATION.
 *
 * See the full INTO-CPS Association Public License conditions for more details.
 */

/**
 * 3.2.3 State Machine of Calling Sequence (Model Exchange)
 * 4.2.4 State Machine of Calling Sequence (Co-simulation)
 */
functions
	-- State transition validation functions, where XXX in the Standard is a
	-- pair of predicates called varsXXX and isXXX.

	varsSEA: fmi2Component * seq of fmi2ValueReference * Kind +> bool
	varsSEA(c, vrs, kind) ==
		forall vr in seq vrs & isSEA(c, vr, kind);

	isSEA: fmi2Component * fmi2ValueReference * Kind +> bool
	isSEA(c, vr, kind) ==
		let sv = lookup(c.eModelVariables, vr, kind) in
			sv <> nil and
			sv.variability <> <constant>
			and sv.initial in set { <exact>, <approx> };


	varsSE: fmi2Component * seq of fmi2ValueReference * Kind +> bool
	varsSE(c, vrs, kind) ==
		forall vr in seq vrs & isSE(c, vr, kind);

	isSE: fmi2Component * fmi2ValueReference * Kind +> bool
	isSE(c, vr, kind) ==
		let sv = lookup(c.eModelVariables, vr, kind) in
			sv <> nil and
			sv.variability <> <constant>
			and (sv.causality = <input>
				 or sv.initial = <exact>);


	varsINC: fmi2Component * seq of fmi2ValueReference * Kind +> bool
	varsINC(c, vrs, kind) ==
		forall vr in seq vrs & isINC(c, vr, kind);

	isINC: fmi2Component * fmi2ValueReference * Kind +> bool
	isINC(c, vr, kind) ==
		let sv = lookup(c.eModelVariables, vr, kind) in
			sv <> nil and
			is_Real(sv.variable)
			and sv.causality = <input>
			and sv.variability = <continuous>;


	varsINI: fmi2Component * seq of fmi2ValueReference * Kind +> bool
	varsINI(c, vrs, kind) ==
		forall vr in seq vrs & isINI(c, vr, kind);

	isINI: fmi2Component * fmi2ValueReference * Kind +> bool
	isINI(c, vr, kind) ==
		let sv = lookup(c.eModelVariables, vr, kind) in
			sv <> nil and
			((sv.causality = <input>
				and sv.variable.derivative <> nil)
			  or (sv.variability <> <constant>
				and sv.initial in set { <exact>, <approx> }));


	varsIN: fmi2Component * seq of fmi2ValueReference * Kind +> bool
	varsIN(c, vrs, kind) ==
		forall vr in seq vrs & isIN(c, vr, kind);

	isIN: fmi2Component * fmi2ValueReference * Kind +> bool
	isIN(c, vr, kind) ==
		let sv = lookup(c.eModelVariables, vr, kind) in
			sv <> nil and
			if c.fmuType = <fmi2ModelExchange>
			then
				(sv.variability = <discrete>
					and sv.causality = <input>)
				or sv.variability = <tunable>
			else
				vr in set c.initialUnknowns
				or (sv.causality = <input>
				 	 or (sv.causality = <parameter>
						 and sv.variability = <tunable>));


	varsINIT: fmi2Component * seq of fmi2ValueReference * Kind +> bool
	varsINIT(c, vrs, kind) ==
		forall vr in seq vrs & isINIT(c, vr, kind);

	isINIT: fmi2Component * fmi2ValueReference * Kind +> bool
	isINIT(c, vr, kind) ==
		let sv = lookup(c.eModelVariables, vr, kind) in
			sv <> nil and
			sv.causality = <output>
			or vr in set c.initialUnknowns;


	varsINIE: fmi2Component * seq of fmi2ValueReference * Kind +> bool
	varsINIE(c, vrs, kind) ==
		forall vr in seq vrs & isINIE(c, vr, kind);

	isINIE: fmi2Component * fmi2ValueReference * Kind +> bool
	isINIE(c, vr, kind) ==
		let sv = lookup(c.eModelVariables, vr, kind) in
			sv <> nil and
			sv.variability <> <constant>
			and sv.initial = <exact>;
