/**
 * This file is part of the INTO-CPS toolchain.
 *
 * Copyright (c) 2017-2019, INTO-CPS Association,
 * c/o Professor Peter Gorm Larsen, Department of Engineering
 * Finlandsgade 22, 8200 Aarhus N.
 *
 * All rights reserved.
 *
 * THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR
 * THIS INTO-CPS ASSOCIATION PUBLIC LICENSE VERSION 1.0.
 * ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES
 * RECIPIENT'S ACCEPTANCE OF THE OSMC PUBLIC LICENSE OR THE GPL 
 * VERSION 3, ACCORDING TO RECIPIENTS CHOICE.
 *
 * The INTO-CPS toolchain  and the INTO-CPS Association Public License are
 * obtained from the INTO-CPS Association, either from the above address, from
 * the URLs: http://www.into-cps.org, and in the INTO-CPS toolchain distribution.
 * GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without
 * even the implied warranty of  MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH IN THE
 * BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF
 * THE INTO-CPS ASSOCIATION.
 *
 * See the full INTO-CPS Association Public License conditions for more details.
 */

/**
 * 3.2.1 Providing Independent Variables and Re-initialization of Caching
 */
functions
	/**
	 * Implementation and API for fmi2SetTime.
	 */
	fmi2SetTime_Impl: fmi2Component * fmi2Real +> fmi2Status * fmi2Component
	fmi2SetTime_Impl(c, time) ==
		mk_(<fmi2OK>, mu(c,
			currentTime |-> time))
	pre
		c.fmuType = <fmi2ModelExchange>
		and c.fmuState in set STATES_fmi2SetTime;

	fmi2SetTime: fmi2Component * fmi2Real +> fmi2Status * [fmi2Component]
	fmi2SetTime(c, time) ==
		if c.fmuType <> <fmi2ModelExchange>
		then -- @Printf("Cannot call fmi2SetTime for fmi2CoSimulation\n")
			mk_(<fmi2Error>, nil)
		elseif c.fmuState not in set STATES_fmi2SetTime
		then -- @Printf("Cannot call fmi2SetTime in state %s\n", c.fmuState)
			mk_(<fmi2Error>, nil)
		else
			fmi2SetTime_Impl(c, time)
	 post
	 	RESULT.#1 <> <fmi2OK> <=> RESULT.#2 = nil;


	/**
	 * Implementation and API for fmi2SetContinuousStates.
	 */
	fmi2SetContinuousStates_Impl: fmi2Component * seq of fmi2Real * nat +> fmi2Status * fmi2Component
	fmi2SetContinuousStates_Impl(c, x, nx) ==
		let modifiers = { c.indexmap(mk_AliasTag(c.eModelVariables(c.continuousTimeStates(i)).valueReference, <Real>)) |-> x(i) | i in set inds x } in 
			mk_(<fmi2OK>, mu(c,
				variables |-> c.variables ++ modifiers))
	pre
		c.fmuType = <fmi2ModelExchange>
		and c.fmuState in set STATES_fmi2SetContinuousStates
		and nx = len x
		and nx = len c.continuousTimeStates;

	fmi2SetContinuousStates: fmi2Component * seq of fmi2Real * nat +> fmi2Status * [fmi2Component]
	fmi2SetContinuousStates(c, x, nx) ==
		if c.fmuType <> <fmi2ModelExchange>
		then -- @Printf("Cannot call fmi2SetContinuousStates for fmi2CoSimulation\n")
			mk_(<fmi2Error>, nil)
		elseif c.fmuState not in set STATES_fmi2SetContinuousStates
		then -- @Printf("Cannot call fmi2SetContinuousStates in state %s\n", c.fmuState)
			mk_(<fmi2Error>, nil)
		elseif nx <> len x
		then -- @Printf("nx and x are not consistent\n");
			mk_(<fmi2Error>, nil)
		elseif nx <> len c.continuousTimeStates
		then -- @Printf("Expecting %s continuous state values\n", len c.continuousTimeStates)
			mk_(<fmi2Error>, nil)
		else
			fmi2SetContinuousStates_Impl(c, x, nx)
	 post
	 	RESULT.#1 <> <fmi2OK> <=> RESULT.#2 = nil;
