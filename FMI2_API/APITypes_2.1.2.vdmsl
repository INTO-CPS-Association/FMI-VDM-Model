/**
 * This file is part of the INTO-CPS toolchain.
 *
 * Copyright (c) 2017-2019, INTO-CPS Association,
 * c/o Professor Peter Gorm Larsen, Department of Engineering
 * Finlandsgade 22, 8200 Aarhus N.
 *
 * All rights reserved.
 *
 * THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR
 * THIS INTO-CPS ASSOCIATION PUBLIC LICENSE VERSION 1.0.
 * ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES
 * RECIPIENT'S ACCEPTANCE OF THE OSMC PUBLIC LICENSE OR THE GPL 
 * VERSION 3, ACCORDING TO RECIPIENTS CHOICE.
 *
 * The INTO-CPS toolchain  and the INTO-CPS Association Public License are
 * obtained from the INTO-CPS Association, either from the above address, from
 * the URLs: http://www.into-cps.org, and in the INTO-CPS toolchain distribution.
 * GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without
 * even the implied warranty of  MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH IN THE
 * BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF
 * THE INTO-CPS ASSOCIATION.
 *
 * See the full INTO-CPS Association Public License conditions for more details.
 */

/**
 * 2.1.2 Platform Dependent Definitions
 * 2.1.3 Status Returned by Functions
 */
types
	fmi2Real			= real;
	fmi2Integer			= int;
	fmi2Boolean			= bool;
	fmi2Char			= char;
	fmi2String			= seq of fmi2Char;
	-- fmi2Byte			= ?;

	-- Possible values for a ScalarVariable
	fmi2Value	= fmi2Real | fmi2Integer | fmi2Boolean | fmi2String;

	fmi2Type =
		<fmi2ModelExchange> |
		<fmi2CoSimulation>;

	fmi2Status =
		<fmi2OK> |
		<fmi2Warning> |
		<fmi2Discard> |
		<fmi2Error> |
		<fmi2Fatal> |
		<fmi2Pending>;

	fmi2State =
		<START> |
		<INSTANTIATED> |
		<INITIALIZATION> |
		<EVENT_MODE> |
		<CT_MODE> |
		<STEP_COMPLETE> |
		<STEP_IN_PROGRESS> |
		<STEP_FAILED> |
		<STEP_CANCELLED> |
		<TERMINATED> |
		<ERROR> |
		<FATAL> |
		<END>;

	fmi2EventInfo ::
		newDiscreteStatesNeeded				: fmi2Boolean
		terminateSimulation					: fmi2Boolean
		nominalsOfContinuousStatesChanged	: fmi2Boolean
		valuesOfContinuousStatesChanged		: fmi2Boolean
		nextEventTimeDefined				: fmi2Boolean
		nextEventTime						: [fmi2Real]
	inv
		info == info.nextEventTimeDefined <=> info.nextEventTime <> nil;

	fmi2CallbackFunctions ::
		logger					: fmi2ComponentEnvironment * fmi2String * fmi2Status * fmi2String * fmi2String +> <VOID>
		allocateMemory			: nat1 * nat1 +> token
		freeMemory				: token +> <VOID>
		stepFinished			: fmi2ComponentEnvironment * fmi2Status +> <VOID>
		componentEnvironment	: fmi2ComponentEnvironment;

