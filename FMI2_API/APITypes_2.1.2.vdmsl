/**
 * This file is part of the INTO-CPS toolchain.
 *
 * Copyright (c) 2017-2019, INTO-CPS Association,
 * c/o Professor Peter Gorm Larsen, Department of Engineering
 * Finlandsgade 22, 8200 Aarhus N.
 *
 * All rights reserved.
 *
 * THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR
 * THIS INTO-CPS ASSOCIATION PUBLIC LICENSE VERSION 1.0.
 * ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES
 * RECIPIENT'S ACCEPTANCE OF THE OSMC PUBLIC LICENSE OR THE GPL 
 * VERSION 3, ACCORDING TO RECIPIENTS CHOICE.
 *
 * The INTO-CPS toolchain  and the INTO-CPS Association Public License are
 * obtained from the INTO-CPS Association, either from the above address, from
 * the URLs: http://www.into-cps.org, and in the INTO-CPS toolchain distribution.
 * GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without
 * even the implied warranty of  MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH IN THE
 * BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF
 * THE INTO-CPS ASSOCIATION.
 *
 * See the full INTO-CPS Association Public License conditions for more details.
 */

/**
 * 2.1.2 Platform Dependent Definitions
 * 2.1.3 Status Returned by Functions
 */
types
	fmi2ValueReference = nat1;
	fmi2Real = real;
	fmi2Integer = int;
	fmi2Boolean = bool;
	fmi2Char = char;
	fmi2String = seq of fmi2Char;
	-- fmi2Byte = ?;

	-- Possible values for a ScalarVariable
	fmi2Value = fmi2Real | fmi2Integer | fmi2Boolean | fmi2String;

	fmi2Type = <fmi2ModelExchange> | <fmi2CoSimulation>;

	fmi2Status = <fmi2OK> | <fmi2Warning> | <fmi2Discard> | <fmi2Error> | <fmi2Fatal> | <fmi2Pending>;

	fmi2State =
		<START> |
		<INSTANTIATED> |
		<INITIALIZATION> |
		<EVENT_MODE> |
		<CT_MODE> |
		<STEP_COMPLETE> |
		<STEP_IN_PROGRESS> |
		<STEP_FAILED> |
		<STEP_CANCELLED> |
		<TERMINATED> |
		<ERROR> |
		<FATAL> |
		<END>;

	fmi2Component ::
		fmuType					: fmi2Type
		fmuState				: fmi2State
		callbacks				: fmi2CallbackFunctions
		calculateValues			: fmi2Component -> fmi2Status * [fmi2Component]	-- before get, when dirty
		calculateDoStep			: fmi2Component -> fmi2Status * [fmi2Component]	-- during doStep

		-- convenience read-only fields, copied from componentEnvironment
		model					: FMIModelDescription
		eModelVariables			: seq1 of ScalarVariable
		continuousTimeStates	: seq of fmi2ValueReference
		initialUnknowns			: set of fmi2ValueReference
		solverDerivatives		: seq of SolverDerivative

		-- state and settings
		logCategories			: [set1 of fmi2String]				-- nil means logging off
		indexmap				: map fmi2ValueReference to nat1	-- map SV index to variables index
		variables				: seq1 of fmi2Value					-- Raw SV data values
		derivatives				: seq of fmi2Real					-- Solver derivative data
		eventIndicators			: seq of fmi2Real					-- ME events
		dirty					: bool								-- True if SVs updated but not recalculated
		tolerance				: [fmi2Real]						-- From DefaultExperiment or fmi2SetupExperiment
		startTime				: [real]
		stopTime				: [real]
		currentTime				: [real]	-- TODO should be independent SV?

	inv c ==
		len c.variables = card rng c.indexmap
		and (len c.continuousTimeStates = len nilSeq[Unknown](c.model.modelStructure.derivatives))
		and (forall sd in seq c.solverDerivatives & sd.index <= len c.eModelVariables)
		and (len c.derivatives = len c.solverDerivatives)
		and (len c.eventIndicators = nilNat(c.model.attributes.numberOfEventIndicators))
		and (c.currentTime <> nil <=> c.startTime <> nil)
		and (c.currentTime <> nil => c.currentTime >= c.startTime)
		and (c.stopTime <> nil and c.startTime <> nil => c.stopTime > c.startTime and c.currentTime <= c.stopTime);
