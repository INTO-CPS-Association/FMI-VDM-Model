/**
 * This file is part of the INTO-CPS toolchain.
 *
 * Copyright (c) 2017-2019, INTO-CPS Association,
 * c/o Professor Peter Gorm Larsen, Department of Engineering
 * Finlandsgade 22, 8200 Aarhus N.
 *
 * All rights reserved.
 *
 * THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR
 * THIS INTO-CPS ASSOCIATION PUBLIC LICENSE VERSION 1.0.
 * ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES
 * RECIPIENT'S ACCEPTANCE OF THE OSMC PUBLIC LICENSE OR THE GPL 
 * VERSION 3, ACCORDING TO RECIPIENTS CHOICE.
 *
 * The INTO-CPS toolchain  and the INTO-CPS Association Public License are
 * obtained from the INTO-CPS Association, either from the above address, from
 * the URLs: http://www.into-cps.org, and in the INTO-CPS toolchain distribution.
 * GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without
 * even the implied warranty of  MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH IN THE
 * BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF
 * THE INTO-CPS ASSOCIATION.
 *
 * See the full INTO-CPS Association Public License conditions for more details.
 */

/**
 * Definitions that describe a co-simulation setup.
 */
types
	/**
	 * A Value is a variable value of type, real, int, String or boolean
	 */
	Value = real | int | seq of char | bool;

	/**
	 * A FMUVariable identifies a unique variable in a CoSimulationConfig, indexing both
	 * the FMU and the modelVariable within it.
	 */
	FMUVariable ::
		fmuIndex		: nat1		-- Index into CoSimulationConfig.fmus
		svIndex			: nat1;		-- Index into fmus(fmuIndex).modelVariables

	/**
	 * A connection map links FMUVariables to record their dependencies. Each variable
	 * source is mapped to the (possibly empty) set of destination variables that
	 * depend on it.
	 */
	ConnectionMap = map FMUVariable to set of FMUVariable;

	/**
	 * A CoSimulationConfig is a set of FMUs (ordered, so they can be identified by index),
	 * a connection map linking their inputs and outputs and a set of values for
	 * the various FMU parameters.
	 */
	CoSimulationConfig ::
		fmus			: seq1 of FMIModelDescription
		connections		: ConnectionMap		-- Inter-FMU, outputs mapped to inputs
		parameters		: map FMUVariable to Value;

functions
	/**
	 * The type invariant for CoSimulation.
	 */
	isValidCoSimulationConfig: CoSimulationConfig +> bool
	isValidCoSimulationConfig(cs) ==
		let maxFMU = len cs.fmus in
		{
			-- The FMUs are valid
			(
				forall fmu in seq cs.fmus &
					-- @OnFail("FMU %s is invalid", fmu.attributes.modelName)
					(isValidFMIModelDescription(fmu))
			),

			-- Connection inputs are valid indexes and types
			(
				forall source in set dom cs.connections &
					-- @OnFail("Illegal FMU index: %s", source.fmuIndex)
					( source.fmuIndex <= maxFMU )
					-- @OnFail("Illegal SV index: %s", source.svIndex)
					and ( source.svIndex <= len cs.fmus(source.fmuIndex).modelVariables )
					-- @OnFail("Source (FMU %s, SV %s) is not an output", source.fmuIndex, source.svIndex)
					and ( cs.fmus(source.fmuIndex).modelVariables(source.svIndex).causality = <output>)
			),

			-- Connection outputs are valid indexes and types
			(
				forall dest in set dunion rng cs.connections &
					-- @OnFail("Illegal FMU index: %s", dest.fmuIndex)
					( dest.fmuIndex <= maxFMU )
					-- @OnFail("Illegal SV index: %s", dest.svIndex)
					and ( dest.svIndex <= len cs.fmus(dest.fmuIndex).modelVariables )
					-- @OnFail("Destination (FMU %s, SV %s) is not an input", dest.fmuIndex, dest.svIndex)
					and ( cs.fmus(dest.fmuIndex).modelVariables(dest.svIndex).causality = <input>)
			),

			-- Parameters are valid indexes and types
			(
				forall param in set dom cs.parameters &
					-- @OnFail("Illegal FMU index: %s", param.fmuIndex)
					( param.fmuIndex <= maxFMU )
					-- @OnFail("Illegal SV index: %s", param.svIndex)
					and ( param.svIndex <= len cs.fmus(param.fmuIndex).modelVariables )
					-- @OnFail("Source (FMU %s, SV %s) is not a parameter", param.fmuIndex, param.svIndex)
					and ( cs.fmus(param.fmuIndex).modelVariables(param.svIndex).causality = <parameter>)
			),

			-- All connections are inter-FMU, not intra-FMU
			(
				forall v1 in set dom cs.connections &
					forall v2 in set cs.connections(v1) &
						-- @OnFail("Connection %s to %s is not intra-FMU", v1, v2)
						(v1.fmuIndex <> v2.fmuIndex)
			),

			-- Inter-FMU cs.connections are 1:1, not 1:n or n:1
			-- @OnFail("Inter-FMU connections are not 1:1")
			(
				-- No destination variable is mapped more than once
				card dunion { vs | vs in set rng cs.connections } = count[FMUVariable](rng cs.connections)
				and
				-- Every source maps to at most one destination 
				forall vs in set rng cs.connections & card vs <= 1
			),

			-- All outputs from each FMU are mapped (possibly to an empty set)
			-- @OnFail("Not every output variable is mapped")
			(
				forall f in set inds cs.fmus &
					let svs = cs.fmus(f).modelVariables,

						ov = { mk_FMUVariable(f, v) |
								v in set inds svs &
								svs(v).causality = <output> }
					in
						forall v in set ov &
							-- @OnFail("Variable %s is not in connection map", v)
							(v in set dom cs.connections)
			)
		} = {true};

	/**
	 * Given an FMU description and its CoSimulationConfig index, produce a map of its internal
	 * connections - that is, its internal input-output dependencies.
	 */
	fmuInternalConnections: FMIModelDescription * nat1 * bool -> ConnectionMap
	fmuInternalConnections(fmu, fmuIndex, initialization) ==
		let ctvars = continuousTimeStates(fmu.modelVariables),

			allKnowns = [ i | i in set inds fmu.modelVariables &
				let sv = fmu.modelVariables(i) in
					sv.causality = <input> or sv in set ctvars ],

			eUnknowns =		-- effective unknowns (correct for blank entries)
			[
				if unknown.dependencies = nil
				then mu(unknown, dependencies |-> allKnowns)	-- Nil dependencies means all knowns
				else unknown

				| unknown in seq if initialization
								 then nilSeq[Unknown](fmu.modelStructure.initialUnknowns)
								 else nilSeq[Unknown](fmu.modelStructure.outputs) ^
								 	  nilSeq[Unknown](fmu.modelStructure.derivatives)
			]
		in
		{
			-- Each entry maps a source to all of the unknowns that have the source as a dependency.
			mk_FMUVariable(fmuIndex, source) |->
				{ mk_FMUVariable(fmuIndex, unknown.index)
					| unknown in seq eUnknowns
					& source in set elems unknown.dependencies }

			-- The set of sources (dependencies) of all the unknowns.
			| source in set
				dunion { elems unknown.dependencies | unknown in seq eUnknowns } 
		}
	post
		(forall v in set dom RESULT &
			v.fmuIndex = fmuIndex and v.svIndex <= len fmu.modelVariables)
		and
		(forall v in set dunion rng RESULT &
			v.fmuIndex = fmuIndex and v.svIndex <= len fmu.modelVariables);

	/**
	 * Given a CoSimulationConfig and its full connectivity map, decide whether the CoSimulationConfig
	 * has any algebraic loops. See the hasLoops function below.
	 */
	hasLoops2: ConnectionMap * set of FMUVariable * FMUVariable -> bool
	hasLoops2(fullMap, reached, active) ==
		if fullMap(active) = {}
		then false	-- Reached the end of this path, no dependencies on active
		else
			forall next in set fullMap(active) &
				next in set reached		-- Test for a fixed-point in the reached set here => OK?
				-- @Printf("Reached %s, next %s\n", reached, next)
				or hasLoops2(fullMap, reached union {next}, next)
	measure is not yet specified;

	/**
	 * Construct the full connection map for a CoSimulationConfig and check for loops. The full connection
	 * map is created from the CoSim connections, plus the generated internal connection maps for
	 * each FMU.
	 */
	hasLoops: CoSimulationConfig * bool +> bool
	hasLoops(cosim, initialization) ==
		let fullMap = cosim.connections munion 
			merge { fmuInternalConnections(cosim.fmus(i), i, initialization) | i in set inds cosim.fmus },
			starts = { v | v in set dom cosim.connections }		-- Where to start?
		in
			exists input in set starts &
				hasLoops2(fullMap, {}, input);
