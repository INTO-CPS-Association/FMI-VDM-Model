/**
 * This file is part of the INTO-CPS toolchain.
 *
 * Copyright (c) 2017-2019, INTO-CPS Association,
 * c/o Professor Peter Gorm Larsen, Department of Engineering
 * Finlandsgade 22, 8200 Aarhus N.
 *
 * All rights reserved.
 *
 * THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR
 * THIS INTO-CPS ASSOCIATION PUBLIC LICENSE VERSION 1.0.
 * ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES
 * RECIPIENT'S ACCEPTANCE OF THE OSMC PUBLIC LICENSE OR THE GPL 
 * VERSION 3, ACCORDING TO RECIPIENTS CHOICE.
 *
 * The INTO-CPS toolchain  and the INTO-CPS Association Public License are
 * obtained from the INTO-CPS Association, either from the above address, from
 * the URLs: http://www.into-cps.org, and in the INTO-CPS toolchain distribution.
 * GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without
 * even the implied warranty of  MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH IN THE
 * BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF
 * THE INTO-CPS ASSOCIATION.
 *
 * See the full INTO-CPS Association Public License conditions for more details.
 */

/**
 * FMUs to test CoSimulation and functions for loop searching.
 */
values
	FMU1 = mk_FMIModelDescription
	(
		mk_ModelAttributes(0, "2.0", "FMU1", "GUID", nil, nil, nil, nil, nil, nil, nil, nil, nil),

		nil,

		nil, nil,

		nil,

		nil,

		nil,

		nil,

		[
			mk_ScalarVariable(0, "A", <input>, nil, nil, nil,
					mk_Real(nil, nil, nil, nil, nil, 0, nil), nil),
			mk_ScalarVariable(0, "B", <output>, nil, nil, nil,
					mk_Real(nil, nil, nil, nil, nil, nil, nil), nil)
		],

		mk_ModelStructure
		(
			0,
			[ mk_Unknown(0, 2, [1], [<dependent>]) ],		-- B depends on A
			nil,
			[ mk_Unknown(0, 2, [1], [<dependent>]) ]		-- B depends on A
		)
	);

	FMU2 = mk_FMIModelDescription
	(
		mk_ModelAttributes(0, "2.0", "FMU2", "GUID", nil, nil, nil, nil, nil, nil, nil, nil, nil),

		nil,

		nil, nil,

		nil,

		nil,

		nil,

		nil,

		[
			mk_ScalarVariable(0, "C", <input>, nil, nil, nil,
					mk_Real(nil, nil, nil, nil, nil, 0, nil), nil),
			mk_ScalarVariable(0, "D", <output>, nil, nil, nil,
					mk_Real(nil, nil, nil, nil, nil, nil, nil), nil)
		],

		mk_ModelStructure
		(
			0,
			[ mk_Unknown(0, 2, [1], [<dependent>]) ],		-- D depends on C
			nil,
			[ mk_Unknown(0, 2, [1], [<dependent>]) ]		-- D depends on C
		)
	);

	COSIM = mk_CoSimulationConfig
	(
		[ FMU1, FMU2 ],

		{
			mk_FMUVariable(1, 2) |-> { mk_FMUVariable(2, 1) },	-- FMU1.B -> FMU2.C
			mk_FMUVariable(2, 2) |-> { mk_FMUVariable(1, 1) }	-- FMU2.C -> FMU1.A (loop!)
		},

		{ |-> }
	)

functions
	test: () -> bool
	test() ==
		hasLoops(COSIM, false);
