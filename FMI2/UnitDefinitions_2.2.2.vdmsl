/**
 * This file is part of the INTO-CPS toolchain.
 *
 * Copyright (c) 2017-2019, INTO-CPS Association,
 * c/o Professor Peter Gorm Larsen, Department of Engineering
 * Finlandsgade 22, 8200 Aarhus N.
 *
 * All rights reserved.
 *
 * THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR
 * THIS INTO-CPS ASSOCIATION PUBLIC LICENSE VERSION 1.0.
 * ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES
 * RECIPIENT'S ACCEPTANCE OF THE OSMC PUBLIC LICENSE OR THE GPL 
 * VERSION 3, ACCORDING TO RECIPIENTS CHOICE.
 *
 * The INTO-CPS toolchain  and the INTO-CPS Association Public License are
 * obtained from the INTO-CPS Association, either from the above address, from
 * the URLs: http://www.into-cps.org, and in the INTO-CPS toolchain distribution.
 * GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without
 * even the implied warranty of  MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH IN THE
 * BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF
 * THE INTO-CPS ASSOCIATION.
 *
 * See the full INTO-CPS Association Public License conditions for more details.
 */

/**
 * 2.2.2 Unit Definitions.
 */
types
	Unit ::
		location		: Location
		name			: NormalizedString
		baseUnit		: [BaseUnit]
		displayUnits	: [seq of DisplayUnit];

	BaseUnit ::
		kg				: [int]
		m				: [int]
		s				: [int]
		A				: [int]
		K				: [int]
		mol				: [int]
		cd				: [int]
		rad				: [int]
		factor			: [real]
		offset			: [real];

	DisplayUnit ::
		name			: NormalizedString
		factor			: [real]
		offset			: [real];

functions
	isValidUnitDefinitions: [seq1 of Unit] +> bool
	isValidUnitDefinitions(units) ==
		units <> nil =>
			/* @OnFail("2.2.2 UnitDefinitions names are not unique: %s",
				{ units(a).name | a, b in set inds units &
					a <> b and units(a).name = units(b).name }) */
			( card { unit.name | unit in seq units } = len units );

	effBaseUnit: BaseUnit +> BaseUnit
	effBaseUnit(b) ==
		mk_BaseUnit
		(
			nilInt(b.kg),
			nilInt(b.m),
			nilInt(b.s),
			nilInt(b.A),
			nilInt(b.K),
			nilInt(b.mol),
			nilInt(b.cd),
			nilInt(b.rad),
			if b.factor = nil then 1 else b.factor,
			nilReal(b.offset)
		);

	effDisplayUnit: DisplayUnit +> DisplayUnit
	effDisplayUnit(d) ==
		mk_DisplayUnit
		(
			d.name,
			if d.factor = nil then 1 else d.factor,
			nilReal(d.offset)
		);
