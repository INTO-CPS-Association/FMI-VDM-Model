/**
 * Various model tests
 */
traces
	/**
	 * Test the ScalarInvariant invariant function with all possible inputs - should return true/false (total)
	 * for every combination. Variable types are tested with "start" defined and undefined.
	 */
	SVInvariantTotal:
		let c : [Causality] in
		let v : [Variability] in
		let i : [Initial] in
		let s in set
		{
			mk_Real(nil, nil, nil, nil, nil, nil, nil),
			mk_Real(nil, nil, nil, nil, nil, 1.23, nil),
			mk_Integer(nil, nil, nil, nil),
			mk_Integer(nil, nil, nil, 123),
			mk_Boolean(nil, nil),
			mk_Boolean(nil, true),
			mk_String(nil, nil),
			mk_String(nil, "123")
		}
		in
			isValidSV(c, v, i, s);

functions
	/**
	 * Test the ScalarVariable invariant for the table on p48, where the SV is valid or not
	 * for particular "initial" values, given a combination of causality and variability.
	 */
	testCausalityVariabilityInitial: () +> bool
	testCausalityVariabilityInitial() ==
		let nilv   = mk_Real(nil, nil, nil, nil, nil, nil, nil),
		    startv = mk_Real(nil, nil, nil, nil, nil, 1.0, nil)
		in
			forall causality : Causality &
				forall variability : Variability &
					cases causality:
						<parameter> ->
							cases variability:
								<fixed>, <tunable> ->
									isValidSV(causality, variability, <exact>, startv) and
									not isValidSV(causality, variability, <approx>, nilv) and
									not isValidSV(causality, variability, <calculated>, nilv),

								<constant>, <discrete>, <continuous> ->
									forall initial : Initial &
										not isValidSV(causality, variability, initial, nilv)
							end,

						<calculatedParameter> ->
							cases variability:
								<fixed>, <tunable> ->
									isValidSV(causality, variability, <calculated>, nilv) and
									isValidSV(causality, variability, <approx>, startv) and
									not isValidSV(causality, variability, <exact>, nilv),

								<constant>, <discrete>, <continuous> ->
									forall initial : Initial &
										not isValidSV(causality, variability, initial, nilv)
							end,

						<input> ->
							cases variability:
								<discrete>, <continuous> ->
									isValidSV(causality, variability, nil, nilv) and
									not isValidSV(causality, variability, <calculated>, nilv) and
									not isValidSV(causality, variability, <approx>, nilv) and
									not isValidSV(causality, variability, <exact>, nilv),

								<constant>, <fixed>, <tunable> ->
									forall initial : Initial &
										not isValidSV(causality, variability, initial, nilv)
							end,

						<output> ->
							cases variability:
								<constant> ->
									isValidSV(causality, variability, <exact>, startv) and
									not isValidSV(causality, variability, <calculated>, nilv) and
									not isValidSV(causality, variability, <approx>, nilv),

								<discrete>, <continuous> ->
									isValidSV(causality, variability, <calculated>, nilv) and
									isValidSV(causality, variability, <approx>, startv) and
									isValidSV(causality, variability, <exact>, startv),

								<fixed>, <tunable> ->
									forall initial : Initial &
										not isValidSV(causality, variability, initial, nilv)
							end,

						<local> ->
							cases variability:
								<constant> ->
									isValidSV(causality, variability, <exact>, startv) and
									not isValidSV(causality, variability, <calculated>, nilv) and
									not isValidSV(causality, variability, <approx>, nilv),

								<fixed>, <tunable> ->
									isValidSV(causality, variability, <calculated>, nilv) and
									isValidSV(causality, variability, <approx>, startv) and
									not isValidSV(causality, variability, <exact>, nilv),

								<discrete>, <continuous> ->
									isValidSV(causality, variability, <calculated>, nilv) and
									isValidSV(causality, variability, <approx>, startv) and
									isValidSV(causality, variability, <exact>, startv)
							end,

						<independent> ->
							forall initial : Initial &
								not isValidSV(causality, variability, initial, nilv)
					end;

	/**
	 * Run all tests and check that they pass.
	 */
	tests: () +> set of bool
	tests() ==
	{
		testCausalityVariabilityInitial()
	}
	post RESULT = {true};
