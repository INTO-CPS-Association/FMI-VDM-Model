/**
 * 2.2.7 Definition of Model Variables (ModelVariables)
 */
types
	-- XSD p45, description p46
	Causality	= <parameter> | <calculatedParameter> | <input> | <output> | <local> | <independent>;

	-- XSD p45, description p46
	Variability	= <constant> | <fixed> | <tunable> | <discrete> | <continuous>;

	-- XSD p45, description p46
	Initial		= <exact> | <approx> | <calculated>;

	Real ::		-- XSD p52
		declaredType	: [NormalizedString1]
		min				: [real]
		max				: [real]
		nominal			: [real]
		unbounded		: [bool]
		start			: [real]
		derivative		: [nat1];

	Integer ::	-- XSD p52
		declaredType	: [NormalizedString1]
		min				: [int]
		max				: [int]
		start			: [int];

	Boolean ::		-- XSD p53
		declaredType	: [NormalizedString1]
		start			: [bool];

	String ::		-- XSD p53
		declaredType	: [NormalizedString1]
		start			: [AnyString];

	Enumeration ::	-- XSD p53
		declaredType	: NormalizedString1	-- Note, not optional
		min				: [int]
		max				: [int]
		start			: [int];

	Variable = Real | Integer | Boolean | String | Enumeration;

	VarName = NormalizedString1;		-- Has a syntax defined in section 2.2.9, p64

	ScalarVariable ::	-- XSD 2.2.7, p44, p54
		-- attributes
		name								: VarName
		causality							: [Causality]
		variability							: [Variability]
		initial								: [Initial]
		canHandleMultipleSetPerTimeInstant	: [bool]

		-- elements
		variable		: Variable
		annotations		: [seq1 of Tool];

functions
	/**
	 * Invariant helper for min/max/start checks on Real, Integer and Enumeration.
	 */
	isInRange[@T]: [@T] * [@T] * [@T] +> bool
	isInRange(min, max, start) ==
	{
		max <> nil and min <> nil =>
			--@OnFail("min %s is not <= max %s", min, max)
			( max >= min ),

		start <> nil =>
			--@OnFail("start %s is not within min %s/max %s", start, min, max)
			( (min <> nil => min <= start) and
			  (max <> nil => max >= start) )
	} = {true}
	pre is_(min, [real]) and is_(max, [real]) and is_(start, [real]);	-- ie. numerics

	/**
	 * Verify a sequence of ScalarVariables.
	 */
	isValidScalarVariables: seq1 of ScalarVariable +> bool
    isValidScalarVariables(svs) ==
        {
            -- @OnFail("ScalarVariables.causality defines more than one independent variable")
            ( card { sv | sv in seq svs & sv.causality = <independent> } <= 1 ),

            -- @OnFail("ScalarVariable names are not unique")
            ( card { sv.name | sv in seq svs } = len svs )
        }
        union
        {
            -- @OnFail("ScalarVariables[%s] invalid", sv.name)
            ( isValidScalarVariable(sv) )

            | sv in seq svs
        } = {true};

	/**
	 * ScalarVariable invariant. Rules defined in the table on p49.
	 */
	isValidScalarVariable: ScalarVariable +> bool
	isValidScalarVariable(sv) ==
		let eCausality = effectiveCausality(sv.causality),
			eVariability = effectiveVariability(sv.variability),
			eInitial = effectiveInitial(sv.initial, eCausality, eVariability)
		in
		{
			-- Table on p46 defining causality, and p48/49 defining combinations
			-- @OnFail("Causality/variability/initial/start %s/%s/%s/%s invalid", eCausality, eVariability, eInitial, sv.variable.start)
			(
				cases eCausality:
					<parameter> ->
						eVariability in set {<fixed>, <tunable>}
						and eInitial = <exact>,		-- (A)

					<calculatedParameter> ->
						eVariability in set {<fixed>, <tunable>}
						and eInitial in set {<approx>, <calculated>},	-- (B)

					<input> ->
						eVariability in set {<discrete>, <continuous>}
						and eInitial = nil
						and sv.variable.start <> nil,		-- (D)

					<independent> ->
						eVariability = <continuous>
						and eInitial = nil		-- (D)
						and is_Real(sv.variable)
						and sv.variable.start = nil,

					<output> ->
						cases eVariability:
							<constant> ->
								eInitial in set {<exact>},	-- (A)

							<discrete>,
							<continuous> ->
								eInitial in set { <exact>, <approx>, <calculated> }, -- (C)

							others -> false
						end,

					<local> ->
						cases eVariability:
							<constant> ->
								eInitial = <exact>,	-- (A)

							<fixed>,
							<tunable> ->
								eInitial in set { <calculated>, <approx> },	-- (B)

							<discrete>,
							<continuous> ->
								eInitial in set { <exact>, <approx>, <calculated> } -- (C)
						end
				end
			),

			-- Table on p46 defining variability, and p49 defining combinations
			-- @OnFail("Variability/causality %s/%s invalid", eVariability, eCausality)
			(
				cases eVariability:
					<constant> ->
						eCausality in set {<output>, <local>},

					<fixed>, <tunable> ->
						eCausality in set {<parameter>, <calculatedParameter>, <local>},

					<discrete> ->
						eCausality in set {<input>, <output>, <local>},

					<continuous> ->
						eCausality in set {<input>, <output>, <local>, <independent>}
						and is_Real(sv.variable)
				end
			),

			-- Table on p47 defining initial
			-- @OnFail("Initial/causality %s/%s invalid", sv.initial, eCausality)
			(
				sv.initial <> nil =>
					(eCausality not in set {<input>, <independent>})
			),

			-- Table on p47 defining initial
			-- @OnFail("Initial/variability/start %s/%s/%s invalid", eInitial, eVariability, sv.variable.start)
			(
				cases eInitial:
					<exact> ->
						sv.variable.start <> nil,

					<approx> ->
						sv.variable.start <> nil
						and eVariability <> <constant>,

					<calculated> ->
						sv.variable.start = nil
						and eVariability <> <constant>,

					nil ->		-- Note that eInitial can be nil (undefined in table on p48)
						true	-- Tests on eInitial above are sufficient
				end
			),

			-- @OnFail("Variable min/max/start invalid")
			(
				cases sv.variable:
					mk_Real(-, min, max, -, -, start, -) ->
						isInRange[real](min, max, start),

					mk_Integer(-, min, max, start) ->
						isInRange[real](min, max, start),

					mk_Enumeration(-, min, max, start) ->
						isInRange[real](min, max, start),

					others -> true		-- String, Boolean
				end
			),

			-- @OnFail("VendorAnnotations invalid")
			( isValidVendorAnnotations(sv.annotations) )
		} = {true};

	/**
	 * The default value for initial, defined by the (effective) values of causality and
	 * variability, via the table on p48/49.
	 */ 
	effectiveInitial: [Initial] * Causality * Variability -> [Initial]
	effectiveInitial(i, eCausality, eVariability) ==
		if i <> nil
		then i
		else cases eCausality:
			<parameter> ->
				cases eVariability:
					<fixed>, <tunable> -> <exact>,
					others -> nil
				end,

			<calculatedParameter> ->
				cases eVariability:
					<fixed>, <tunable> -> <calculated>,
					others -> nil
				end,

			<input> ->
				cases eVariability:
					<discrete>, <continuous> -> nil,
					others -> nil
				end,

			<output> ->
				cases eVariability:
					<constant> -> <exact>,
					<discrete>, <continuous> -> <calculated>,
					others -> nil
				end,

			<local> ->
				cases eVariability:
					<constant> -> <exact>,
					<fixed>, <tunable> -> <calculated>,
					<discrete>, <continuous> -> <calculated>
				end,

			<independent> ->
				cases eVariability:
					<continuous> -> nil,
					others -> nil
				end
		end;

	effectiveCausality: [Causality] -> Causality
	effectiveCausality(c) ==
		if c = nil
		then <local>
		else c;

	effectiveVariability: [Variability] -> Variability
	effectiveVariability(v) ==
		if v = nil
		then <continuous>
		else v;

	effectiveScalarVariable: ScalarVariable +> ScalarVariable
	effectiveScalarVariable(sv) ==
		let causality = effectiveCausality(sv.causality),
			variability = effectiveVariability(sv.variability)
		in 
			mk_ScalarVariable
			(
				sv.name,
				causality,
				variability,
				effectiveInitial(sv.initial, causality, variability),
				sv.canHandleMultipleSetPerTimeInstant,
				sv.variable,
				sv.annotations
			);

	/**
	 * Return the ScalarVariables from a list which are continuous-time states, defined to be
	 * variables which are the derivative of some other variable.
	 */
	continuousTimeStates: seq of ScalarVariable -> set of ScalarVariable
	continuousTimeStates(svs) ==
		{ sv | sv in seq svs &
			is_Real(sv.variable)
			and sv.variability = <continuous> 
			and sv.variable.derivative <> nil };
