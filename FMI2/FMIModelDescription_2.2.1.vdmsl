/**
 * 2.2.1 Definition of an FMU (fmiModelDescription)
 */
types
	-- XSD definition on p25
	FMIModelDescription ::
		-- A global list of type definitions that are utilized in "ModelVariables"
		typeDefinitions		: set of SimpleType			-- XSD p38

		-- The central FMU data structure defining all variables of the FMU that
		-- Are visible/accessible via the FMU functions.
		modelVariables		: seq of ScalarVariable		-- XSD p44

		-- Defines the structure of the model. Especially, the ordered lists of
		-- outputs, continuous-time states and initial unknowns (the unknowns
		-- during Initialization Mode) are defined here. Furthermore, the
		-- dependency of the unkowns from the knowns can be optionally
		-- defined.
		modelStructure		: ModelStructure			-- XSD p56

	inv m ==
		-- All modelStructure variables must be declared in modelVariables
		checkIndexes(len m.modelVariables, m.modelStructure.outputs)
		and checkIndexes(len m.modelVariables, m.modelStructure.derivatives)
		and checkIndexes(len m.modelVariables, m.modelStructure.initialUnknowns)

		-- At most one variable can be <independent>
		and card { i | i in seq m.modelVariables & i.causality = <independent> } <= 1

		-- Model structure outputs contain every model variable of "output" causality
		and (let outputIndexes = { v | v in set inds m.modelVariables & m.modelVariables(v).causality = <output> },
				 structIndexes = { u.index | u in seq m.modelStructure.outputs }
			 in
				 structIndexes = outputIndexes)

		-- InitalUnknowns must be <input> + <exact> or <independent> variables
		and (m.modelStructure.initialUnknowns <> nil =>
			forall index in set { u.index | u in seq m.modelStructure.initialUnknowns } &
				let sv = m.modelVariables(index) in
					( sv.causality = <input> and sv.initial = <exact> ) 
					or sv.causality = <independent> )

		-- Derivatives must refer to variables that are Real and define the "derivative" variable
		and (m.modelStructure.derivatives <> nil =>
			forall index in set { u.index | u in seq m.modelStructure.derivatives } &
				let sv = m.modelVariables(index) in
					is_Real(sv.variable)
					and sv.variable.derivative <> nil
					and sv.variable.derivative <= len m.modelVariables);

functions
	checkIndexes: nat1 * [seq1 of Unknown] +> bool
	checkIndexes(vars, unknowns) ==
		unknowns <> nil =>
			forall u in seq unknowns & u.index <= vars;
