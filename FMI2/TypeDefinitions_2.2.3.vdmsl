/**
 * 2.2.3 Definition of Types (TypeDefinitions)
 */
types
	RealType ::
		min			: [real]
		max			: [real]
		nominal		: [real]
		unbounded	: [bool];

	IntegerType ::
		min			: [int]
		max			: [int];

	BooleanType ::
		;

	StringType ::
		;

	-- Items of an enumeration as a sequence of "name" and "value" pairs.
	-- An Enumeration must have at least one Item.

	Item ::
		name		: seq1 of char
		value		: int;

	EnumerationType ::
		items		: seq1 of Item;

	Type = RealType | IntegerType | BooleanType | StringType | EnumerationType;

	SimpleType ::		-- XSD p38
		name		: seq1 of char
		type		: Type;

functions
	isValidType: Type +> bool
	isValidType(type) ==
		cases type:
			mk_RealType(min, max, -, -) ->
				-- @OnFail("Real invalid, XSD p39")
				-- @OnFail("Real max %s not >= min %s", max, min)
				( max <> nil and min <> nil => max >= min ),

			mk_IntegerType(min, max) ->
				-- @OnFail("Integer invalid, XSD p39")
				-- @OnFail("Integer max %s not >= min %s", max, min)
				( max <> nil and min <> nil => max >= min ),

			-- Items of an enumeration as a sequence of "name" and "value" pairs. The
			-- values can be any integer number, but must be unique within the same
			-- enumeration (in order that the mapping between "name" and "value" is
			-- bijective). An Enumeration element must have at least one Item.

			mk_EnumerationType(items) ->
				-- @OnFail("Enumeration invalid, XSD p39")
				-- @OnFail("EnumerationType item name/values do not form a bijection")
				(
					card { i.name | i in seq items } = len items
					and	card { i.value | i in seq items } = len items
				),

			others -> true		-- String and Boolean
		end;

