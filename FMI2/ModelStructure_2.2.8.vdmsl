/**
 * This file is part of the INTO-CPS toolchain.
 *
 * Copyright (c) 2017-2019, INTO-CPS Association,
 * c/o Professor Peter Gorm Larsen, Department of Engineering
 * Finlandsgade 22, 8200 Aarhus N.
 *
 * All rights reserved.
 *
 * THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR
 * THIS INTO-CPS ASSOCIATION PUBLIC LICENSE VERSION 1.0.
 * ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES
 * RECIPIENT'S ACCEPTANCE OF THE OSMC PUBLIC LICENSE OR THE GPL 
 * VERSION 3, ACCORDING TO RECIPIENTS CHOICE.
 *
 * The INTO-CPS toolchain  and the INTO-CPS Association Public License are
 * obtained from the INTO-CPS Association, either from the above address, from
 * the URLs: http://www.into-cps.org, and in the INTO-CPS toolchain distribution.
 * GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without
 * even the implied warranty of  MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH IN THE
 * BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF
 * THE INTO-CPS ASSOCIATION.
 *
 * See the full INTO-CPS Association Public License conditions for more details.
 */

/**
 * 2.2.8 Definition of the Model Structure (ModelStructure)
 */
types
	-- XSD p57
	DependencyKind = <dependent> | <constant> | <fixed> | <tunable> | <discrete>;

	Unknown ::			-- XSD p57
		index				: nat1
		dependencies		: [seq of nat1]
		dependenciesKind	: [seq of DependencyKind];

	ModelStructure ::	-- XSD p56
		outputs				: [seq1 of Unknown]
		derivatives			: [seq1 of Unknown]
		initialUnknowns		: [seq1 of Unknown];

functions
	/**
	 * Validate an Unknown structure in isolation.
	 */
	isValidUnknown: Unknown +> bool
	isValidUnknown(u) ==
	-- @OnFail("Unknown %s has invalid dependencies/kinds", u.index)
	(
		if u.dependencies <> nil
		then u.dependenciesKind <> nil =>
			{
				-- @OnFail("Dependencies does not match dependenciesKind")
				( len u.dependencies = len u.dependenciesKind ),

				-- @OnFail("Dependencies has duplicates" )
				( len u.dependencies = card elems u.dependencies),

				-- @OnFail("Unknown cannot depend on itself")
				( u.index not in set elems u.dependencies )
			} = {true}
		else
			u.dependenciesKind = nil
	);

	/**
	 * Validation of a ModelStructure.
	 */
	isValidModelStructure: ModelStructure +> bool
	isValidModelStructure(ms) ==
	{
		-- @OnFail("ModelStructure has invalid unknowns")
		(
			{
				list <> nil =>
					{ isValidUnknown(u) | u in seq list } = {true}

				| list in set {ms.outputs, ms.derivatives, ms.initialUnknowns}
			} = {true}
		),

		-- @OnFail("ModelStructure has duplicate variables")
		(
			duplicateCheck(ms.outputs)
			and	duplicateCheck(ms.derivatives)
			and duplicateCheck(ms.initialUnknowns)
		),

		-- @OnFail("ModelStructure.InitialUnknowns are not of kind dependent or constant")
		(
			ms.initialUnknowns <> nil =>
				forall iu in seq ms.initialUnknowns &
					iu.dependenciesKind <> nil =>
						forall dk in seq iu.dependenciesKind &
							 dk in set { <dependent>, <constant>, nil }
		)
	} = {true};


	/**
	 * Check for duplicate indexes in a sequence of Unknowns.
	 */
	duplicateCheck: [seq1 of Unknown] +> bool
	duplicateCheck(su) ==
		su <> nil =>
			let indexes = [ u.index | u in seq su ] in
				len indexes = card elems indexes;
