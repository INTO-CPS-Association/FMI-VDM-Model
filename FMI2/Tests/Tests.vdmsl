/**
 * Various model tests
 */
traces
	/**
	 * Test the ScalarInvariant invariant function with all possible inputs - should return true/false (total)
	 * for every combination. Variable types are tested with "start" both defined and undefined.
	 */
	SVInvariantTotal:
		let c : [Causality] in
		let v : [Variability] in
		let i : [Initial] in
		let s in set
		{
			mk_Real(nil, nil, nil, nil, nil, nil, nil),
			mk_Real(nil, nil, nil, nil, nil, 1.23, nil),
			mk_Integer(nil, nil, nil, nil),
			mk_Integer(nil, nil, nil, 123),
			mk_Boolean(nil, nil),
			mk_Boolean(nil, true),
			mk_String(nil, nil),
			mk_String(nil, "123")
		}
		in
			isValidScalarVariable(c, v, i, s);

functions
	/**
	 * Test the ScalarVariable invariant for the table on p48, where the SV is valid or not
	 * for particular "initial" values, given a combination of causality and variability.
	 */
	testCausalityVariabilityInitial: () +> bool
	testCausalityVariabilityInitial() ==
		let nilv   = mk_Real(nil, nil, nil, nil, nil, nil, nil),
		    startv = mk_Real(nil, nil, nil, nil, nil, 1.0, nil)
		in
			forall causality : Causality &
				forall variability : Variability &
					cases causality:
						<parameter> ->
							cases variability:
								<fixed>, <tunable> ->
									isValidScalarVariable(causality, variability, <exact>, startv) and
									not isValidScalarVariable(causality, variability, <approx>, startv) and
									not isValidScalarVariable(causality, variability, <calculated>, nilv),

								<constant>, <discrete>, <continuous> ->
									forall initial : Initial &
										not isValidScalarVariable(causality, variability, initial, nilv)
							end,

						<calculatedParameter> ->
							cases variability:
								<fixed>, <tunable> ->
									isValidScalarVariable(causality, variability, <calculated>, nilv) and
									isValidScalarVariable(causality, variability, <approx>, startv) and
									not isValidScalarVariable(causality, variability, <exact>, nilv),

								<constant>, <discrete>, <continuous> ->
									forall initial : Initial &
										not isValidScalarVariable(causality, variability, initial, nilv)
							end,

						<input> ->
							cases variability:
								<discrete>, <continuous> ->
									isValidScalarVariable(causality, variability, nil, nilv) and
									not isValidScalarVariable(causality, variability, <calculated>, nilv) and
									not isValidScalarVariable(causality, variability, <approx>, startv) and
									not isValidScalarVariable(causality, variability, <exact>, nilv),

								<constant>, <fixed>, <tunable> ->
									forall initial : Initial &
										not isValidScalarVariable(causality, variability, initial, nilv)
							end,

						<output> ->
							cases variability:
								<constant> ->
									isValidScalarVariable(causality, variability, <exact>, startv) and
									not isValidScalarVariable(causality, variability, <calculated>, nilv) and
									not isValidScalarVariable(causality, variability, <approx>, startv),

								<discrete>, <continuous> ->
									isValidScalarVariable(causality, variability, <calculated>, nilv) and
									isValidScalarVariable(causality, variability, <exact>, startv)
									and isValidScalarVariable(causality, variability, <approx>, startv),

								<fixed>, <tunable> ->
									forall initial : Initial &
										not isValidScalarVariable(causality, variability, initial, nilv)
							end,

						<local> ->
							cases variability:
								<constant> ->
									isValidScalarVariable(causality, variability, <exact>, startv) and
									not isValidScalarVariable(causality, variability, <calculated>, nilv) and
									not isValidScalarVariable(causality, variability, <approx>, startv),

								<fixed>, <tunable> ->
									isValidScalarVariable(causality, variability, <calculated>, nilv) and
									isValidScalarVariable(causality, variability, <approx>, startv) and
									not isValidScalarVariable(causality, variability, <exact>, nilv),

								<discrete>, <continuous> ->
									isValidScalarVariable(causality, variability, <calculated>, nilv) and
									isValidScalarVariable(causality, variability, <approx>, startv) and
									isValidScalarVariable(causality, variability, <exact>, startv)
							end,

						<independent> ->
							forall initial : Initial &
								not isValidScalarVariable(causality, variability, initial, nilv)
					end;

values
--	test: () +> bool
--	test() ==
--	isValidModelDescription

	/**
	 * This test model is based on the example on p62
	 */
	example = mk_FMIModelDescription
	(
		-- Attributes
		mk_ModelAttributes("2.0", "Example FMU", "GUID", nil, nil, nil, nil, nil, nil, nil, nil, nil),

		-- TypeDefinitions
		{
			mk_SimpleType("Real-1-10",		mk_RealType(1, 10, nil, nil)),
			mk_SimpleType("Real-Positive",	mk_RealType(0, nil, nil, nil)),
			mk_SimpleType("Real-Undefined",	mk_RealType(nil, nil, nil, nil))
		},

		-- ScalarVariables
		[
			mk_ScalarVariable("p",			<parameter>, <fixed>,		nil, mk_Real("Real-Positive", 0, 10, nil, nil, 1, nil)),	-- 1
			mk_ScalarVariable("u1",			<input>, <continuous>,		nil, mk_Real("Real-Positive", 0, 10, nil, nil, 1, nil)),	-- 2
			mk_ScalarVariable("u2",			<input>, <continuous>,		nil, mk_Real("Real-Positive", 0, 10, nil, nil, 1, nil)),	-- 3
			mk_ScalarVariable("u3",			<input>, <discrete>,		nil, mk_Real("Real-Positive", 0, 10, nil, nil, 1, nil)),	-- 4
			mk_ScalarVariable("x1",			<input>, <continuous>,		nil, mk_Real("Real-Undefined", 0, 10, nil, nil, nil, nil)),	-- 5
			mk_ScalarVariable("x2",			<local>, <continuous>,		nil, mk_Real("Real-Undefined", 0, 10, nil, nil, nil, nil)),	-- 6
			mk_ScalarVariable("x3",			<local>, <continuous>,		nil, mk_Real("Real-Undefined", 0, 10, nil, nil, nil, nil)),	-- 7
			mk_ScalarVariable("der(x1)",	<calculatedParameter>, <tunable>,	nil, mk_Real("Real-Positive", 0, 10, nil, nil, nil, 5)),	-- 8
			mk_ScalarVariable("der(x2)",	<calculatedParameter>, <tunable>,	nil, mk_Real("Real-Positive", 0, 10, nil, nil, nil, 6)),	-- 9
			mk_ScalarVariable("der(x3)",	<calculatedParameter>, <tunable>,	nil, mk_Real("Real-Positive", 0, 10, nil, nil, nil, 7)),	-- 10
			mk_ScalarVariable("y",			<output>, <continuous>,		nil, mk_Real("Real-Positive", 0, 10, nil, nil, nil, nil))	-- 11
		],

		mk_ModelStructure
		(
			-- Outputs
			[
				mk_Unknown(11,	[6, 7], nil)
			],
			-- Derivatives
			[
				mk_Unknown(8,	[6], nil),
				mk_Unknown(9,	[2, 4, 5, 6], [<constant>, <constant>, <dependent>, <fixed>]),
				mk_Unknown(10,	[2, 3, 4, 5, 6], nil)
			],
			-- InitialUnknowns
			[
				-- mk_Unknown(6,	[2, 4, 5], nil),
				-- mk_Unknown(7,	[2, 4, 5, 11], nil),
				mk_Unknown(8,	nil, nil),
				mk_Unknown(9,	nil, nil),
				mk_Unknown(10,	nil, nil),
				mk_Unknown(11,	nil, nil)
			]
		)
	);

functions
	/**
	 * Run all tests and check that they pass.
	 */
	tests: () +> seq of bool
	tests() ==
	[
		testCausalityVariabilityInitial(),
		isValidModelDescription(example),
		isValidModelDescription(springMassDamper),
		isValidCoSimulation(COSIM)
	]
	post elems RESULT = {true};
