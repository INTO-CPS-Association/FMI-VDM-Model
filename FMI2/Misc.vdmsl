/**
 * Miscellaneous support functions, not related to a specific section of the FMI spec.
 */
functions
	nilSeq[@T]: [seq of @T] +> seq of @T
	nilSeq(s) ==
		if s = nil then [] else s;

	nilSet[@T]: [set of @T] +> set of @T
	nilSet(s) ==
		if s = nil then {} else s;

	nilBool: [bool] +> bool
	nilBool(b) ==
		if b = nil then false else b;

	nilNat: [nat] +> nat
	nilNat(n) ==
		if n = nil then 0 else n;

	nilInt: [int] +> int
	nilInt(n) ==
		if n = nil then 0 else n;

	nilReal: [real] +> real
	nilReal(n) ==
		if n = nil then 0 else n;

	count[@T]: set of set of @T +> nat
	count(s) ==
		if s = {}
		then 0
		else let e in set s in
			card e + count[@T](s \ {e})
	measure card s;
