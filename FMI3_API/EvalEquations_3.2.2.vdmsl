/**
 * This file is part of the INTO-CPS toolchain.
 *
 * Copyright (c) 2017-2020, INTO-CPS Association,
 * c/o Professor Peter Gorm Larsen, Department of Engineering
 * Finlandsgade 22, 8200 Aarhus N.
 *
 * All rights reserved.
 *
 * THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR
 * THIS INTO-CPS ASSOCIATION PUBLIC LICENSE VERSION 1.0.
 * ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES
 * RECIPIENT'S ACCEPTANCE OF THE OSMC PUBLIC LICENSE OR THE GPL 
 * VERSION 3, ACCORDING TO RECIPIENTS CHOICE.
 *
 * The INTO-CPS toolchain  and the INTO-CPS Association Public License are
 * obtained from the INTO-CPS Association, either from the above address, from
 * the URLs: http://www.into-cps.org, and in the INTO-CPS toolchain distribution.
 * GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without
 * even the implied warranty of  MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH IN THE
 * BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF
 * THE INTO-CPS ASSOCIATION.
 *
 * See the full INTO-CPS Association Public License conditions for more details.
 */

/**
 * 3.2.2 Evaluation of Model Equations
 */
functions
	/**
	 * Implementation and API for fmi3EnterEventMode.
	 */
	fmi3EnterEventMode_Impl: fmi3Instance +> fmi3Status * fmi3Instance
	fmi3EnterEventMode_Impl(c) ==
		mk_(<fmi3OK>, mu(c,
			fmuState |-> <EVENT_MODE>))
	pre
		c.fmuKind = <ModelExchange> and c.fmuState in set STATES_fmi3EnterEventModeME
		or c.fmuKind = <BasicCoSimulation> and c.fmuState in set STATES_fmi3EnterEventModeHCS
	post
		RESULT.#2.fmuState = <EVENT_MODE>;

	fmi3EnterEventMode(
		 c					: fmi3Instance,
         -					: fmi3Boolean,
         -					: fmi3Boolean,
         rootsFound			: seq of int,
         nEventIndicators	: nat,
         -					: fmi3Boolean) result: fmi3Status * [fmi3Instance]
	==
		if c.fmuKind not in set {<ModelExchange>, <BasicCoSimulation>}
		then let - = logAPIError(c, "Cannot call fmi3EnterEventMode in this mode") in
			mk_(<fmi3Error>, nil)
		elseif c.fmuKind = <ModelExchange> and c.fmuState not in set STATES_fmi3EnterEventModeME
			or c.fmuKind = <BasicCoSimulation> and c.fmuState not in set STATES_fmi3EnterEventModeHCS
		then let - = logAPIError(c, "Cannot call fmi3EnterEventMode in this state") in
			mk_(<fmi3Error>, nil)
		elseif nEventIndicators <> len rootsFound
		then let - = logAPIError(c, "nEventIndicators does not match rootsFound") in
			mk_(<fmi3Error>, nil)
		else
			fmi3EnterEventMode_Impl(c)
	 post
	 	result.#1 <> <fmi3OK> <=> result.#2 = nil;


	/**
	 * Implementation and API for fmi3NewDiscreteStates.
	 */
	fmi3NewDiscreteStates_Impl: fmi3Instance +> fmi3Status * fmi3EventInfo * fmi3Instance
	fmi3NewDiscreteStates_Impl(c) ==
    	-- let mk_(s, c2) = c.instanceEnvironment.calculateEvents(c) in
			mk_(<fmi3OK>, c.eventInfo, c)
	pre
		c.fmuKind = <ModelExchange>
		and c.fmuState in set STATES_fmi3NewDiscreteStates;

	fmi3NewDiscreteStates: fmi3Instance +> fmi3Status * [fmi3EventInfo] * [fmi3Instance]
	fmi3NewDiscreteStates(c) ==
		if c.fmuKind <> <ModelExchange>
		then let - = logAPIError(c, "Cannot call fmi3NewDiscreteStates for CoSimulation") in
			mk_(<fmi3Error>, nil, nil)
		elseif c.fmuState not in set STATES_fmi3NewDiscreteStates
		then let - = logAPIError(c, "Cannot call fmi3NewDiscreteStates in this state") in
			mk_(<fmi3Error>, nil, nil)
	 	else
	 		fmi3NewDiscreteStates_Impl(c);


	/**
	 * Implementation and API for fmi3EnterContinuousTimeMode.
	 */
	fmi3EnterContinuousTimeMode_Impl: fmi3Instance +> fmi3Status * fmi3Instance
	fmi3EnterContinuousTimeMode_Impl(c) ==
		mk_(<fmi3OK>, mu(c,
			fmuState |-> <CONTINUOUS_TIME_MODE>))
	pre
		c.fmuKind = <ModelExchange>
		and c.fmuState in set STATES_fmi3EnterContinuousTimeMode
	post
		RESULT.#2.fmuState = <CONTINUOUS_TIME_MODE>;

	fmi3EnterContinuousTimeMode: fmi3Instance +> fmi3Status * [fmi3Instance]
	fmi3EnterContinuousTimeMode(c) ==
		if c.fmuKind <> <ModelExchange>
		then let - = logAPIError(c, "Cannot call fmi3EnterContinuousTimeMode in this mode") in
			mk_(<fmi3Error>, nil)
		elseif c.fmuState not in set STATES_fmi3EnterContinuousTimeMode
		then let - = logAPIError(c, "Cannot call fmi3EnterContinuousTimeMode in this state") in
			mk_(<fmi3Error>, nil)
		else
			fmi3EnterContinuousTimeMode_Impl(c)
	 post
	 	RESULT.#1 <> <fmi3OK> <=> RESULT.#2 = nil;


	/**
	 * Implementation and API for fmi3EnterStepMode.
	 */
	fmi3EnterStepMode_Impl: fmi3Instance +> fmi3Status * fmi3Instance
	fmi3EnterStepMode_Impl(c) ==
		mk_(<fmi3OK>, mu(c,
			fmuState |-> <STEP_MODE>))
	pre
		c.fmuState in set STATES_fmi3EnterStepMode
	post
		RESULT.#2.fmuState = <STEP_MODE>;

	fmi3EnterStepMode: fmi3Instance +> fmi3Status * [fmi3Instance]
	fmi3EnterStepMode(c) ==
		if c.fmuKind not in set {<BasicCoSimulation>, <HybridCoSimulation>}
		then let - = logAPIError(c, "Cannot call fmi3EnterStepMode in this mode") in
			mk_(<fmi3Error>, nil)
		elseif c.fmuState not in set STATES_fmi3EnterStepMode
		then let - = logAPIError(c, "Cannot call fmi3EnterStepMode in this state") in
			mk_(<fmi3Error>, nil)
		else
			fmi3EnterStepMode_Impl(c)
	 post
	 	RESULT.#1 <> <fmi3OK> <=> RESULT.#2 = nil;


	/**
	 * Implementation and API for fmi3CompletedIntegratorStep.
	 */
	fmi3CompletedIntegratorStep_Impl: fmi3Instance * fmi3Boolean +> fmi3Status * fmi3Boolean * fmi3Boolean
    fmi3CompletedIntegratorStep_Impl(c, -) ==
		mk_(<fmi3OK>, false, false)	-- TODO!!
	pre
		c.fmuKind = <ModelExchange>
		and c.fmuState in set STATES_fmi3CompletedIntegratorStep
		and not nilBool(c.xmlModel.modelExchange.completedIntegratorStepNotNeeded);

	fmi3CompletedIntegratorStep(
		c									: fmi3Instance,
        noSetFMUStatePriorToCurrentPoint	: fmi3Boolean) result : fmi3Status * [fmi3Boolean] * [fmi3Boolean]
	==
		if c.fmuKind <> <ModelExchange>
		then let - = logAPIError(c, "Cannot call fmi3CompletedIntegratorStep for fmi3CoSimulation") in
			mk_(<fmi3Error>, nil, nil)
		elseif c.fmuState not in set STATES_fmi3CompletedIntegratorStep
		then let - = logAPIError(c, "Cannot call fmi3CompletedIntegratorStep in this state") in
			mk_(<fmi3Error>, nil, nil)
		elseif nilBool(c.xmlModel.modelExchange.completedIntegratorStepNotNeeded)
		then let - = logAPIError(c, "fmi3CompletedIntegratorStep not needed") in
			mk_(<fmi3Error>, nil, nil)
	 	else
	 		fmi3CompletedIntegratorStep_Impl(c, noSetFMUStatePriorToCurrentPoint)
	 post
	 	result.#1 = <fmi3OK> <=> result.#2 <> nil and result.#3 <> nil;


	/**
	 * Implementation and API for fmi3GetDerivatives.
	 */
	fmi3GetDerivatives_Impl: fmi3Instance * nat +> fmi3Status * seq of fmi3Float
	fmi3GetDerivatives_Impl(c, nx) ==
		-- Compute derivatives TODO
		mk_(<fmi3OK>, conc [ c.variables(vref) | vref in seq c.continuousTimeStates ])
	pre
		c.fmuKind = <ModelExchange>
		and c.fmuState in set STATES_fmi3GetDerivatives
		and nx = len c.continuousTimeStates;

	fmi3GetDerivatives: fmi3Instance * nat +> fmi3Status * [seq of fmi3Float]
	fmi3GetDerivatives(c, nx) ==
		if c.fmuKind <> <ModelExchange>
		then let - = logAPIError(c, "Cannot call fmi3GetDerivatives for fmi3CoSimulation") in
			mk_(<fmi3Error>, nil)
		elseif c.fmuState not in set STATES_fmi3GetDerivatives
		then let - = logAPIError(c, "Cannot call fmi3GetDerivatives in this state") in
			mk_(<fmi3Error>, nil)
		elseif nx <> len c.continuousTimeStates
		then let - = logAPIError(c, "Wrong number of derivates requested") in
			mk_(<fmi3Error>, nil)
	 	else
	 		fmi3GetDerivatives_Impl(c, nx)
	 post
	 	RESULT.#1 = <fmi3OK> <=> RESULT.#2 <> nil;


	/**
	 * Implementation and API for fmi3GetEventIndicators.
	 */
	fmi3GetEventIndicators_Impl: fmi3Instance * nat +> fmi3Status * seq of fmi3Float
	fmi3GetEventIndicators_Impl(c, ni) ==
		-- Compute event indicators TODO
		mk_(<fmi3OK>, [ 0 | - in set {1, ..., ni} ])
	pre
		c.fmuKind = <ModelExchange>
		and c.fmuState in set STATES_fmi3GetEventIndicators
		and ni = nilNat(c.xmlModel.attributes.numberOfEventIndicators);

	fmi3GetEventIndicators: fmi3Instance * nat +> fmi3Status * [seq of fmi3Float]
	fmi3GetEventIndicators(c, ni) ==
		if c.fmuKind <> <ModelExchange>
		then let - = logAPIError(c, "Cannot call fmi3GetEventIndicators for fmi3CoSimulation") in
			mk_(<fmi3Error>, nil)
		elseif c.fmuState not in set STATES_fmi3GetEventIndicators
		then let - = logAPIError(c, "Cannot call fmi3GetEventIndicators in this state") in
			mk_(<fmi3Error>, nil)
		elseif ni <> nilNat(c.xmlModel.attributes.numberOfEventIndicators)
		then let - = logAPIError(c, "Wrong number of event indicators passed") in
			mk_(<fmi3Error>, nil)
	 	else
	 		fmi3GetEventIndicators_Impl(c, ni)
	 post
	 	RESULT.#1 = <fmi3OK> <=> RESULT.#2 <> nil;


	/**
	 * Implementation and API for fmi3GetContinuousStates.
	 */
	fmi3GetContinuousStates_Impl: fmi3Instance * nat +> fmi3Status * seq of fmi3Float
	fmi3GetContinuousStates_Impl(c, nx) ==
		mk_(<fmi3OK>, conc [ c.variables(vref) | vref in seq c.continuousTimeStates ])
	pre
		c.fmuKind = <ModelExchange>
		and c.fmuState in set STATES_fmi3GetContinuousStates
		and nx = len c.continuousTimeStates;

	fmi3GetContinuousStates: fmi3Instance * nat +> fmi3Status * [seq of fmi3Float]
	fmi3GetContinuousStates(c, nx) ==
		if c.fmuKind <> <ModelExchange>
		then let - = logAPIError(c, "Cannot call fmi3GetContinuousStates for fmi3CoSimulation") in
			mk_(<fmi3Error>, nil)
		elseif c.fmuState not in set STATES_fmi3GetContinuousStates
		then let - = logAPIError(c, "Cannot call fmi3GetContinuousStates in this state") in
			mk_(<fmi3Error>, nil)
		elseif nx <> len c.continuousTimeStates
		then let - = logAPIError(c, "Wrong number of derivates requested") in
			mk_(<fmi3Error>, nil)
	 	else
	 		fmi3GetContinuousStates_Impl(c, nx)
	 post
	 	RESULT.#1 = <fmi3OK> <=> RESULT.#2 <> nil;


	/**
	 * Implementation and API for fmi3GetNominalsOfContinuousStates.
	 */
	fmi3GetNominalsOfContinuousStates_Impl: fmi3Instance * nat +> fmi3Status * seq of fmi3Float
	fmi3GetNominalsOfContinuousStates_Impl(c, nx) ==
		mk_(<fmi3OK>, [ 1.0 | - in seq c.continuousTimeStates ])	-- TODO!
	pre
		c.fmuKind = <ModelExchange>
		and c.fmuState in set STATES_fmi3GetNominalsOfContinuousStates
		and nx = len c.continuousTimeStates;

	fmi3GetNominalsOfContinuousStates: fmi3Instance * nat +> fmi3Status * [seq of fmi3Float]
	fmi3GetNominalsOfContinuousStates(c, nx) ==
		if c.fmuKind <> <ModelExchange>
		then let - = logAPIError(c, "Cannot call fmi3GetNominalsOfContinuousStates for fmi3CoSimulation") in
			mk_(<fmi3Error>, nil)
		elseif c.fmuState not in set STATES_fmi3GetNominalsOfContinuousStates
		then let - = logAPIError(c, "Cannot call fmi3GetNominalsOfContinuousStates in this state") in
			mk_(<fmi3Error>, nil)
		elseif nx <> len c.continuousTimeStates
		then let - = logAPIError(c, "Wrong number of derivates requested") in
			mk_(<fmi3Error>, nil)
	 	else
	 		fmi3GetNominalsOfContinuousStates_Impl(c, nx)
	 post
	 	RESULT.#1 = <fmi3OK> <=> RESULT.#2 <> nil;
