/**
 * This file is part of the INTO-CPS toolchain.
 *
 * Copyright (c) 2017-2019, INTO-CPS Association,
 * c/o Professor Peter Gorm Larsen, Department of Engineering
 * Finlandsgade 22, 8200 Aarhus N.
 *
 * All rights reserved.
 *
 * THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR
 * THIS INTO-CPS ASSOCIATION PUBLIC LICENSE VERSION 1.0.
 * ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES
 * RECIPIENT'S ACCEPTANCE OF THE OSMC PUBLIC LICENSE OR THE GPL 
 * VERSION 3, ACCORDING TO RECIPIENTS CHOICE.
 *
 * The INTO-CPS toolchain  and the INTO-CPS Association Public License are
 * obtained from the INTO-CPS Association, either from the above address, from
 * the URLs: http://www.into-cps.org, and in the INTO-CPS toolchain distribution.
 * GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without
 * even the implied warranty of  MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH IN THE
 * BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF
 * THE INTO-CPS ASSOCIATION.
 *
 * See the full INTO-CPS Association Public License conditions for more details.
 */

/**
 * General utility functions
 */

functions
	/**
	 * Convert a hex-binary string sequence to an fmi3Binary sequence
	 */
	hex2bin: seq of char -> fmi3Binary
	hex2bin(hex) ==
		let even = if len hex = 1 then "0" ^ hex else hex in
		[
			binOf(even(a)) * 16 + binOf(even(a+1)) | a in set inds even & a mod 2 = 1
		]
	measure len hex;

	binOf: char -> nat
	binOf(c) ==
		cases c:
			'0' -> 0,
			'1' -> 1,
			'2' -> 2,
			'3' -> 3,
			'4' -> 4,
			'5' -> 5,
			'6' -> 6,
			'7' -> 7,
			'8' -> 8,
			'9' -> 9,
			'A', 'a' -> 10,
			'B', 'b' -> 11,
			'C', 'c' -> 12,
			'D', 'd' -> 13,
			'E', 'e' -> 14,
			'F', 'f' -> 15,
			others -> undefined
		end;

