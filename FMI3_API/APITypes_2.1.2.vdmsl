/**
 * This file is part of the INTO-CPS toolchain.
 *
 * Copyright (c) 2017-2019, INTO-CPS Association,
 * c/o Professor Peter Gorm Larsen, Department of Engineering
 * Finlandsgade 22, 8200 Aarhus N.
 *
 * All rights reserved.
 *
 * THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR
 * THIS INTO-CPS ASSOCIATION PUBLIC LICENSE VERSION 1.0.
 * ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES
 * RECIPIENT'S ACCEPTANCE OF THE OSMC PUBLIC LICENSE OR THE GPL 
 * VERSION 3, ACCORDING TO RECIPIENTS CHOICE.
 *
 * The INTO-CPS toolchain  and the INTO-CPS Association Public License are
 * obtained from the INTO-CPS Association, either from the above address, from
 * the URLs: http://www.into-cps.org, and in the INTO-CPS toolchain distribution.
 * GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without
 * even the implied warranty of  MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH IN THE
 * BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF
 * THE INTO-CPS ASSOCIATION.
 *
 * See the full INTO-CPS Association Public License conditions for more details.
 */

/**
 * 2.1.2 Platform Dependent Definitions
 * 2.1.3 Status Returned by Functions
 */
types
	-- fmi3ValueReference	= nat;		-- Defined in FMI3 model

	fmi3Float			= real;
	fmi3Integer			= int;
	fmi3Boolean			= bool;
	fmi3Char			= char;
	fmi3String			= seq of fmi3Char;
	fmi3Clock			= int;
	fmi3Binary			= seq of fmi3Byte;
	fmi3Byte			= nat inv b == b < 256;

	-- Possible values for a Variable
	fmi3Value			= fmi3Float | fmi3Integer | fmi3Boolean | fmi3String | fmi3Binary;

	fmi3Status =
		<fmi3OK> |
		<fmi3Warning> |
		<fmi3Discard> |
		<fmi3Error> |
		<fmi3Fatal>;

	-- States for the various state machines

	fmi3ModelExchangeState =
		<INSTANTIATED> |
		<CONFIGURATION_MODE> |
		<INITIALIZATION_MODE> |
		<EVENT_MODE> |
		<CONTINUOUS_TIME_MODE> |
		<RECONFIGURATION_MODE> |
		<TERMINATED>;

	fmi3BasicCoSimulationState =
		<INSTANTIATED> |
		<CONFIGURATION_MODE> |
		<INITIALIZATION_MODE> |
		<STEP_MODE> |
		<RECONFIGURATION_MODE> |
		<INTERMEDIATE_UPDATE_MODE> |
		<TERMINATED>;

	fmi3HybridCoSimulationState =
		<INSTANTIATED> |
		<CONFIGURATION_MODE> |
		<INITIALIZATION_MODE> |
		<STEP_MODE> |
		<RECONFIGURATION_MODE> |
		<INTERMEDIATE_UPDATE_MODE> |
		<TERMINATED>;

	fmi3ScheduledCoSimulationState =
		<INSTANTIATED> |
		<CONFIGURATION_MODE> |
		<INITIALIZATION_MODE> |
		<CLOCK_ACTIVATION_MODE> |
		<RECONFIGURATION_MODE> |
		<INTERMEDIATE_UPDATE_MODE> |
		<TERMINATED>;

	-- The collection of all states, for convenience
	fmi3State =
		<START> |
		fmi3ModelExchangeState |
		fmi3BasicCoSimulationState |
		fmi3HybridCoSimulationState |
		fmi3ScheduledCoSimulationState |
		<ERROR> |
		<FATAL> |
		<END>;

	fmi3EventInfo ::
		nextEventTime						: [fmi3Float]
		newDiscreteStatesNeeded				: fmi3Boolean
		terminateSimulation					: fmi3Boolean
		nominalsOfContinuousStatesChanged	: fmi3Boolean
		valuesOfContinuousStatesChanged		: fmi3Boolean
		nextEventTimeDefined				: fmi3Boolean
	inv
		info == info.nextEventTimeDefined <=> info.nextEventTime <> nil;


	fmi3FMUKind = CoSimulationKind | ModelExchangeKind;

	fmi3CoSimulationMode =
	    <fmi3ModeBasicCoSimulation> |
	    <fmi3ModeHybridCoSimulation> |
	    <fmi3ModeScheduledExecutionSimulation>;

	fmi3CoSimulationConfiguration ::
	    intermediateVariableGetRequired			: fmi3Boolean
	    intermediateInternalVariableGetRequired	: fmi3Boolean
	    intermediateVariableSetRequired			: fmi3Boolean
	    coSimulationMode						: fmi3CoSimulationMode
		intermediateUpdate						: [fmi3CallbackIntermediateUpdate]
		lockPreemption							: [fmi3CallbackLockPreemption]
		unlockPreemption						: [fmi3CallbackUnlockPreemption]
	inv
		conf ==
			( conf.intermediateVariableGetRequired
			  or conf.intermediateInternalVariableGetRequired
			  or conf.intermediateVariableSetRequired => conf.intermediateUpdate <> nil )
			and
			( conf.lockPreemption <> nil <=> conf.unlockPreemption <> nil );

	fmi3CallbackLogMessage =
		fmi3InstanceEnvironment *	-- instanceEnvironment
		fmi3String *				-- instanceName
		fmi3Status *				-- status
		fmi3String *				-- category
		fmi3String					-- message
		-> <VOID>;

	fmi3CallbackIntermediateUpdate =
		fmi3InstanceEnvironment *	-- instanceEnvironment,
		fmi3Float *					-- intermediateUpdateTime,
		fmi3Boolean *				-- eventOccurred,
		fmi3Boolean * 				-- clocksTicked,
		fmi3Boolean *				-- intermediateVariableSetAllowed,
		fmi3Boolean *				-- intermediateVariableGetAllowed,
		fmi3Boolean *				-- intermediateStepFinished,
		fmi3Boolean					-- canReturnEarly
		-> fmi3Status;

    fmi3CallbackLockPreemption		= () -> <VOID>;
    fmi3CallbackUnlockPreemption	= () -> <VOID>;

values
	fmi3True			: fmi3Boolean = true;
	fmi3False			: fmi3Boolean = false;

	fmi3ClockActive		: fmi3Clock	= 1;	-- See parameters of fmi3GetClock and fmi3SetClock
	fmi3ClockInactive	: fmi3Clock	= 0;
