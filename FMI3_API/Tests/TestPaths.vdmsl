/**
 * This file is part of the INTO-CPS toolchain.
 *
 * Copyright (c) 2017-2019, INTO-CPS Association,
 * c/o Professor Peter Gorm Larsen, Department of Engineering
 * Finlandsgade 22, 8200 Aarhus N.
 *
 * All rights reserved.
 *
 * THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR
 * THIS INTO-CPS ASSOCIATION PUBLIC LICENSE VERSION 1.0.
 * ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES
 * RECIPIENT'S ACCEPTANCE OF THE OSMC PUBLIC LICENSE OR THE GPL 
 * VERSION 3, ACCORDING TO RECIPIENTS CHOICE.
 *
 * The INTO-CPS toolchain  and the INTO-CPS Association Public License are
 * obtained from the INTO-CPS Association, either from the above address, from
 * the URLs: http://www.into-cps.org, and in the INTO-CPS toolchain distribution.
 * GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without
 * even the implied warranty of  MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH IN THE
 * BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF
 * THE INTO-CPS ASSOCIATION.
 *
 * See the full INTO-CPS Association Public License conditions for more details.
 */

/**
 * Test the basic call paths for each FMU type.
 */
operations
	testModelExchangePaths: () ==> bool
	testModelExchangePaths() ==
	(
		dcl c : [fmi3Instance] := testInstantiateModelExchange("ME", "{111-222-333-444}");
		if c = nil then return false;

		let mk_(s, c2) = fmi3EnterConfigurationMode(c) in
			if s <> <fmi3OK> then return false
			else c := c2;

		let mk_(s, c2) = fmi3ExitConfigurationMode(c) in
			if s <> <fmi3OK> then return false
			else c := c2;

		let mk_(s, c2) = fmi3EnterInitializationMode(c, false, nil, 0, false, nil) in
			if s <> <fmi3OK> then return false
			else c := c2;

		let mk_(s, c2) = fmi3ExitInitializationMode(c) in
			if s <> <fmi3OK> then return false
			else c := c2;

		let mk_(s, c2) = fmi3EnterConfigurationMode(c) in
			if s <> <fmi3OK> then return false
			else c := c2;

		let mk_(s, c2) = fmi3ExitConfigurationMode(c) in
			if s <> <fmi3OK> then return false
			else c := c2;

		return c.fmuState = <EVENT_MODE>
	);

	testBasicCoSimulationPaths: () ==> bool
	testBasicCoSimulationPaths() ==
	(
		dcl c : [fmi3Instance] := testInstantiateBasicCoSimulation(false);
		if c = nil then return false;

		let mk_(s, c2) = fmi3EnterConfigurationMode(c) in
			if s <> <fmi3OK> then return false
			else c := c2;

		let mk_(s, c2) = fmi3ExitConfigurationMode(c) in
			if s <> <fmi3OK> then return false
			else c := c2;

		let mk_(s, c2) = fmi3EnterInitializationMode(c, false, nil, 0, false, nil) in
			if s <> <fmi3OK> then return false
			else c := c2;

		let mk_(s, c2) = fmi3ExitInitializationMode(c) in
			if s <> <fmi3OK> then return false
			else c := c2;

		let mk_(s, c2) = fmi3EnterConfigurationMode(c) in
			if s <> <fmi3OK> then return false
			else c := c2;

		let mk_(s, c2) = fmi3ExitConfigurationMode(c) in
			if s <> <fmi3OK> then return false
			else c := c2;

		return c.fmuState = <STEP_MODE>
	);

	testHybridCoSimulationPaths: () ==> bool
	testHybridCoSimulationPaths() ==
	(
		dcl c : [fmi3Instance] := testInstantiateHybridCoSimulation(false);
		if c = nil then return false;

		let mk_(s, c2) = fmi3EnterConfigurationMode(c) in
			if s <> <fmi3OK> then return false
			else c := c2;

		let mk_(s, c2) = fmi3ExitConfigurationMode(c) in
			if s <> <fmi3OK> then return false
			else c := c2;

		let mk_(s, c2) = fmi3EnterInitializationMode(c, false, nil, 0, false, nil) in
			if s <> <fmi3OK> then return false
			else c := c2;

		let mk_(s, c2) = fmi3ExitInitializationMode(c) in
			if s <> <fmi3OK> then return false
			else c := c2;

		let mk_(s, c2) = fmi3EnterConfigurationMode(c) in
			if s <> <fmi3OK> then return false
			else c := c2;

		let mk_(s, c2) = fmi3ExitConfigurationMode(c) in
			if s <> <fmi3OK> then return false
			else c := c2;

		return c.fmuState = <EVENT_MODE>
	);

	testScheduledCoSimulationPaths: () ==> bool
	testScheduledCoSimulationPaths() ==
	(
		dcl c : [fmi3Instance] := testInstantiateScheduledCoSimulation(false);
		if c = nil then return false;

		let mk_(s, c2) = fmi3EnterConfigurationMode(c) in
			if s <> <fmi3OK> then return false
			else c := c2;

		let mk_(s, c2) = fmi3ExitConfigurationMode(c) in
			if s <> <fmi3OK> then return false
			else c := c2;

		let mk_(s, c2) = fmi3EnterInitializationMode(c, false, nil, 0, false, nil) in
			if s <> <fmi3OK> then return false
			else c := c2;

		let mk_(s, c2) = fmi3ExitInitializationMode(c) in
			if s <> <fmi3OK> then return false
			else c := c2;

		let mk_(s, c2) = fmi3EnterConfigurationMode(c) in
			if s <> <fmi3OK> then return false
			else c := c2;

		let mk_(s, c2) = fmi3ExitConfigurationMode(c) in
			if s <> <fmi3OK> then return false
			else c := c2;

		return c.fmuState = <CLOCK_ACTIVATION_MODE>
	);


	/**
	 * Run all tests.
	 */
	testPaths: () ==> seq of bool
	testPaths() == return
	[
		testModelExchangePaths(),
		testBasicCoSimulationPaths(),
		testHybridCoSimulationPaths(),
		testScheduledCoSimulationPaths()
	]
	post elems RESULT = {true};
