/**
 * This file is part of the INTO-CPS toolchain.
 *
 * Copyright (c) 2017-2019, INTO-CPS Association,
 * c/o Professor Peter Gorm Larsen, Department of Engineering
 * Finlandsgade 22, 8200 Aarhus N.
 *
 * All rights reserved.
 *
 * THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR
 * THIS INTO-CPS ASSOCIATION PUBLIC LICENSE VERSION 1.0.
 * ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES
 * RECIPIENT'S ACCEPTANCE OF THE OSMC PUBLIC LICENSE OR THE GPL 
 * VERSION 3, ACCORDING TO RECIPIENTS CHOICE.
 *
 * The INTO-CPS toolchain  and the INTO-CPS Association Public License are
 * obtained from the INTO-CPS Association, either from the above address, from
 * the URLs: http://www.into-cps.org, and in the INTO-CPS toolchain distribution.
 * GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without
 * even the implied warranty of  MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH IN THE
 * BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF
 * THE INTO-CPS ASSOCIATION.
 *
 * See the full INTO-CPS Association Public License conditions for more details.
 */

functions
    /**
     * Test the basic operation of the fmi3 instantiate functions.
     */
     testInstantiateModelExchange: fmi3String * fmi3String -> [fmi3Instance]
     testInstantiateModelExchange(name, id) ==
        fmi3InstantiateModelExchange(
            name,
            id,
            "",
            false,
            true,
            mk_fmi3InstanceEnvironment(modelExchangeFMU, mk_SolverData([]), nil),
            fmi3Logger);

     testInstantiateCoSimulation: seq of fmi3ValueReference * fmi3Boolean -> [fmi3Instance]
     testInstantiateCoSimulation(requiredIntermediateVariables, eventModeRequired) ==
        fmi3InstantiateCoSimulation(
            "Basic instance",
            "{111-222-333-444}",
            "",
            false,
            true,
            eventModeRequired,
            requiredIntermediateVariables,
            len requiredIntermediateVariables,
            mk_fmi3InstanceEnvironment(basicCosimulationFMU, mk_SolverData([]), nil),
            fmi3Logger,
            nil);

     testInstantiateScheduledExecution: seq of fmi3ValueReference -> [fmi3Instance]
     testInstantiateScheduledExecution(requiredIntermediateVariables) ==
        fmi3InstantiateScheduledExecution(
            "Scheduled instance",
            "{111-222-333-444}",
            "",
            false,
            true,
            requiredIntermediateVariables,
            len requiredIntermediateVariables,
            mk_fmi3InstanceEnvironment(scheduledCosimulationFMU, mk_SolverData([]), nil),
            fmi3Logger,
            nil,
            preemptionVoid,
            preemptionVoid);

	preemptionVoid: () -> <VOID>
	preemptionVoid() == <VOID>;

	testSetDebugLogging: seq of fmi3String -> bool
	testSetDebugLogging(cats) ==
		let instance = testInstantiateModelExchange("name", "{111-222-333-444}"),
			mk_(s, -) = fmi3SetDebugLogging(instance, true, len cats, cats)
		in
			s = <fmi3OK>;

	testReset: () -> bool
	testReset() ==
		let instance = testInstantiateModelExchange("name", "{111-222-333-444}"),
			mk_(s, -) = fmi3Reset(instance)
		in
			s = <fmi3OK>;

	testFreeInstance: () -> bool
	testFreeInstance() ==
		fmi3FreeInstance(testInstantiateModelExchange("name", "{111-222-333-444}")) = <VOID> and
		fmi3FreeInstance(nil) = <VOID>;

	testGetVersion: () -> bool
	testGetVersion() ==
		fmi3GetVersion() = "3.0";

	testGetAPI: () -> bool
	testGetAPI() ==
        let instance = fmi3InstantiateCoSimulation(
            "VariableTypes", "", "", false, true, false, [], 0,
            mk_fmi3InstanceEnvironment(variableTypesFMU, mk_SolverData([]), nil),
            fmi3Logger, nil),
            F64 = 2, F32 = 1, I8 = 3, UI8 = 4, I16 = 5, UI16 = 6, I32 = 7, UI32 = 8, I64 = 9, UI64 = 10,
            BOOL = 11, STRING = 12, BINARY = 13
		in
			( let f64 = fmi3GetFloat64(instance, [F64], 1, 7) in
				f64 = mk_(<fmi3OK>, [-Infinity, -1.79769E308, -2.22507E-308, NaN, 2.22507E-308, 1.79769E308, Infinity]))
			and
			( let f32 = fmi3GetFloat32(instance, [F32], 1, 7) in
				f32 = mk_(<fmi3OK>, [-Infinity, -1.23E38, -1.23E-38, NaN, 1.23E-38, 1.23E38, Infinity]))
			and
			( let i64 = fmi3GetInt64(instance, [I64], 1, 2) in
				i64 = mk_(<fmi3OK>, [-922337203685477580, 922337203685477580]) )	-- Note: <2**64
			and
			( let i32 = fmi3GetInt32(instance, [I32], 1, 2) in
				i32 = mk_(<fmi3OK>, [-2147483648, 2147483647]) )
			and
			( let i16 = fmi3GetInt16(instance, [I16], 1, 2) in
				i16 = mk_(<fmi3OK>, [-32768, 32767]) )
			and
			( let i8 = fmi3GetInt8(instance, [I8], 1, 2) in
				i8 = mk_(<fmi3OK>, [-128, 127]) )
			and
			( let ui64 = fmi3GetUInt64(instance, [UI64], 1, 2) in
				ui64 = mk_(<fmi3OK>, [0, 1844674407370955161]) )	-- Note: <2**64
			and
			( let ui32 = fmi3GetUInt32(instance, [UI32], 1, 2) in
				ui32 = mk_(<fmi3OK>, [0, 4294967295]) )
			and
			( let ui16 = fmi3GetUInt16(instance, [UI16], 1, 2) in
				ui16 = mk_(<fmi3OK>, [0, 65535]) )
			and
			( let ui8 = fmi3GetUInt8(instance, [UI8], 1, 2) in
				ui8 = mk_(<fmi3OK>, [0, 255]) )
			and
			( let b = fmi3GetBoolean(instance, [BOOL], 1, 4) in
				b = mk_(<fmi3OK>, [true, false, true, false]) )
			and
			( let str = fmi3GetString(instance, [STRING], 1, 2) in
				str = mk_(<fmi3OK>, ["foo", "bar"]) )
			and
			( let bin = fmi3GetBinary(instance, [BINARY], 1, 2) in
				bin = mk_(<fmi3OK>, [[0x3c, 0x3f], [0x68, 0x65, 0x72]]) );


	testSetAPI: () -> bool
	testSetAPI() ==
        let instance = fmi3InstantiateCoSimulation(
            "VariableTypes", "", "", false, true, false, [], 0,
            mk_fmi3InstanceEnvironment(variableTypesFMU, mk_SolverData([]), nil),
            fmi3Logger, nil),
            F64 = 2, F32 = 1, I8 = 3, UI8 = 4, I16 = 5, UI16 = 6, I32 = 7, UI32 = 8, I64 = 9, UI64 = 10,
            BOOL = 11, STRING = 12, BINARY = 13
		in
			( let mk_(s, c) = fmi3SetFloat64(instance, [F64], 1, [1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7]) in
				s = <fmi3OK> and c <> nil )
			and
			( let mk_(s, c) = fmi3SetFloat32(instance, [F32], 1, [1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7]) in
				s = <fmi3OK> and c <> nil )
			and
			( let mk_(s, c) = fmi3SetInt64(instance, [I64], 1, [12345, -12345]) in
				s = <fmi3OK> and c <> nil )
			and
			( let mk_(s, c) = fmi3SetInt32(instance, [I32], 1, [12345, -12345]) in
				s = <fmi3OK> and c <> nil )
			and
			( let mk_(s, c) = fmi3SetInt16(instance, [I16], 1, [1234, -1234]) in
				s = <fmi3OK> and c <> nil )
			and
			( let mk_(s, c) = fmi3SetInt8(instance, [I8], 1, [127, -128]) in
				s = <fmi3OK> and c <> nil )
			and
			( let mk_(s, c) = fmi3SetUInt64(instance, [UI64], 1, [12345, 54321]) in
				s = <fmi3OK> and c <> nil )
			and
			( let mk_(s, c) = fmi3SetUInt32(instance, [UI32], 1, [12345, 54321]) in
				s = <fmi3OK> and c <> nil )
			and
			( let mk_(s, c) = fmi3SetUInt16(instance, [UI16], 1, [1234, 43321]) in
				s = <fmi3OK> and c <> nil )
			and
			( let mk_(s, c) = fmi3SetUInt8(instance, [UI8], 1, [255, 255]) in
				s = <fmi3OK> and c <> nil )
			and
			( let mk_(s, c) = fmi3SetBoolean(instance, [BOOL], 1, [true, false, true, false]) in
				s = <fmi3OK> and c <> nil )
			and
			( let mk_(s, c) = fmi3SetString(instance, [STRING], 1, ["Hello", "World"]) in
				s = <fmi3OK> and c <> nil )
			and
			( let mk_(s, c) = fmi3SetBinary(instance, [BINARY], 1, [[0xff, 0xfe], [0x12, 0x34]]) in
				s = <fmi3OK> and c <> nil );

	/**
	 * Run all tests.
	 */
	tests: () -> seq of bool
	tests() ==
	[
		testInstantiateModelExchange("ME", "{111-222-333-444}") <> nil,
		testInstantiateModelExchange("", "{111-222-333-444}") = nil,
		testInstantiateModelExchange("ME", "wrong") = nil,

		testInstantiateCoSimulation([], false) <> nil,
		testInstantiateCoSimulation([999], false) = nil,

		testInstantiateScheduledExecution([]) <> nil,
		testInstantiateScheduledExecution([999]) = nil,

		testSetDebugLogging(["Full", "Terse"]),
		testSetDebugLogging(["Wrong"]) = false,

		testReset(),
		testFreeInstance(),
		testGetVersion(),

		testGetAPI(),
		testSetAPI()
	]
	post elems RESULT = {true};
