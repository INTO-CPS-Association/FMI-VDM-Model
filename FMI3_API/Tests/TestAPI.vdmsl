/**
 * This file is part of the INTO-CPS toolchain.
 *
 * Copyright (c) 2017-2019, INTO-CPS Association,
 * c/o Professor Peter Gorm Larsen, Department of Engineering
 * Finlandsgade 22, 8200 Aarhus N.
 *
 * All rights reserved.
 *
 * THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR
 * THIS INTO-CPS ASSOCIATION PUBLIC LICENSE VERSION 1.0.
 * ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES
 * RECIPIENT'S ACCEPTANCE OF THE OSMC PUBLIC LICENSE OR THE GPL 
 * VERSION 3, ACCORDING TO RECIPIENTS CHOICE.
 *
 * The INTO-CPS toolchain  and the INTO-CPS Association Public License are
 * obtained from the INTO-CPS Association, either from the above address, from
 * the URLs: http://www.into-cps.org, and in the INTO-CPS toolchain distribution.
 * GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without
 * even the implied warranty of  MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH IN THE
 * BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF
 * THE INTO-CPS ASSOCIATION.
 *
 * See the full INTO-CPS Association Public License conditions for more details.
 */

functions
    /**
     * Test the basic operation of the fmi3 instantiate functions.
     */
     testInstantiateModelExchange: fmi3String * fmi3String -> [fmi3Instance]
     testInstantiateModelExchange(name, id) ==
        fmi3InstantiateModelExchange(
            name,
            id,
            "",
            false,
            true,
            mk_fmi3InstanceEnvironment(modelExchangeFMU, mk_SolverData([]), nil),
            fmi3Logger);

     testInstantiateBasicCoSimulation: fmi3Boolean -> [fmi3Instance]
     testInstantiateBasicCoSimulation(intermediateReq) ==
        fmi3InstantiateBasicCoSimulation(
            "Basic instance",
            "{111-222-333-444}",
            "",
            false,
            true,
            intermediateReq,
            intermediateReq,
            intermediateReq,
            mk_fmi3InstanceEnvironment(basicCosimulationFMU, mk_SolverData([]), nil),
            fmi3Logger,
            nil);

     testInstantiateHybridCoSimulation: fmi3Boolean -> [fmi3Instance]
     testInstantiateHybridCoSimulation(intermediateReq) ==
        fmi3InstantiateHybridCoSimulation(
            "Hybrid instance",
            "{111-222-333-444}",
            "",
            false,
            true,
            intermediateReq,
            intermediateReq,
            intermediateReq,
            mk_fmi3InstanceEnvironment(hybridCosimulationFMU, mk_SolverData([]), nil),
            fmi3Logger,
            nil);

     testInstantiateScheduledCoSimulation: fmi3Boolean -> [fmi3Instance]
     testInstantiateScheduledCoSimulation(intermediateReq) ==
        fmi3InstantiateScheduledCoSimulation(
            "Scheduled instance",
            "{111-222-333-444}",
            "",
            false,
            true,
            intermediateReq,
            intermediateReq,
            intermediateReq,
            mk_fmi3InstanceEnvironment(scheduledCosimulationFMU, mk_SolverData([]), nil),
            fmi3Logger,
            nil,
            preemptionVoid,
            preemptionVoid);

	preemptionVoid: () -> <VOID>
	preemptionVoid() == <VOID>;

	testSetDebugLogging: seq of fmi3String -> bool
	testSetDebugLogging(cats) ==
		let instance = testInstantiateModelExchange("name", "{111-222-333-444}"),
			mk_(s, -) = fmi3SetDebugLogging(instance, true, len cats, cats)
		in
			s = <fmi3OK>;

	testReset: () -> bool
	testReset() ==
		let instance = testInstantiateModelExchange("name", "{111-222-333-444}"),
			mk_(s, -) = fmi3Reset(instance)
		in
			s = <fmi3OK>;

	testFreeInstance: () -> bool
	testFreeInstance() ==
		fmi3FreeInstance(testInstantiateModelExchange("name", "{111-222-333-444}")) = <VOID> and
		fmi3FreeInstance(nil) = <VOID>;

	testGetVersion: () -> bool
	testGetVersion() ==
		fmi3GetVersion() = "3.0";

	testGetAPI: () -> bool
	testGetAPI() ==
        let instance = fmi3InstantiateBasicCoSimulation(
            "VariableTypes", "", "", false, true, false, false, false,
            mk_fmi3InstanceEnvironment(variableTypesFMU, mk_SolverData([]), nil),
            fmi3Logger, nil)
		in
			( let f64 = fmi3GetFloat64(instance, [2], 1, 7) in
				f64 = mk_(<fmi3OK>,
					[-Infinity, -1.79769E308, -2.22507E-308, NaN, 2.22507E-308, 1.79769E308, Infinity]))
			and
			( let f32 = fmi3GetFloat32(instance, [1], 1, 7) in
				f32.#1 = <fmi3OK> and
				f32.#2(1) = -Infinity and
				f32.#2(2) = -3.402823e+38 and
				f32.#2(3) = -1.175494e-38 and
				f32.#2(4) = NaN and
				f32.#2(5) = 1.175494e-38 and
				f32.#2(6) = 3.402823e+38 and
				f32.#2(7) = Infinity )
			and
			( let i64 = fmi3GetInt64(instance, [9], 1, 2) in
				i64 = mk_(<fmi3OK>, [-922337203685477580, 922337203685477580]) );
			-- TODO all the others!


	/**
	 * Run all tests.
	 */
	tests: () -> seq of bool
	tests() ==
	[
		testInstantiateModelExchange("ME", "{111-222-333-444}") <> nil,
		testInstantiateModelExchange("", "{111-222-333-444}") = nil,
		testInstantiateModelExchange("ME", "wrong") = nil,

		testInstantiateBasicCoSimulation(false) <> nil,
		testInstantiateBasicCoSimulation(true) = nil,

		testInstantiateHybridCoSimulation(false) <> nil,
		testInstantiateHybridCoSimulation(true) = nil,

		testInstantiateScheduledCoSimulation(false) <> nil,
		testInstantiateScheduledCoSimulation(true) = nil,

		testSetDebugLogging(["Full", "Terse"]),
		testSetDebugLogging(["Wrong"]) = false,

		testReset(),
		testFreeInstance(),
		testGetVersion(),

		testGetAPI()
	]
	post elems RESULT = {true};
