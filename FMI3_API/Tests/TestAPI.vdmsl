/**
 * This file is part of the INTO-CPS toolchain.
 *
 * Copyright (c) 2017-2019, INTO-CPS Association,
 * c/o Professor Peter Gorm Larsen, Department of Engineering
 * Finlandsgade 22, 8200 Aarhus N.
 *
 * All rights reserved.
 *
 * THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR
 * THIS INTO-CPS ASSOCIATION PUBLIC LICENSE VERSION 1.0.
 * ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES
 * RECIPIENT'S ACCEPTANCE OF THE OSMC PUBLIC LICENSE OR THE GPL 
 * VERSION 3, ACCORDING TO RECIPIENTS CHOICE.
 *
 * The INTO-CPS toolchain  and the INTO-CPS Association Public License are
 * obtained from the INTO-CPS Association, either from the above address, from
 * the URLs: http://www.into-cps.org, and in the INTO-CPS toolchain distribution.
 * GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without
 * even the implied warranty of  MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH IN THE
 * BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF
 * THE INTO-CPS ASSOCIATION.
 *
 * See the full INTO-CPS Association Public License conditions for more details.
 */

functions
    /**
     * Test the basic operation of the fmi3 instantiate functions.
     */
     testInstantiateModelExchange: () -> bool
     testInstantiateModelExchange() ==
        let me = fmi3InstantiateModelExchange(
            "ME instance",
            "{8c4e810f-3df3-4a00-8276-176fa3c9f9e0}",
            "",
            false,
            true,
            mk_fmi3InstanceEnvironment(springMassDamper, mk_SolverData([]), nil),
            fmi3Logger)
        in
            me <> nil;

     testInstantiateBasicCoSimulation: () -> bool
     testInstantiateBasicCoSimulation() ==
        let basic = fmi3InstantiateBasicCoSimulation(
            "Basic instance",
            "{8c4e810f-3df3-4a00-8276-176fa3c9f9e0}",
            "",
            false,
            true,
            false,
            false,
            false,
            mk_fmi3InstanceEnvironment(springMassDamper, mk_SolverData([]), nil),
            fmi3Logger,
            nil)
        in
            basic <> nil;

     testInstantiateHybridCoSimulation: () -> bool
     testInstantiateHybridCoSimulation() ==
        let hybrid = fmi3InstantiateHybridCoSimulation(
            "Hybrid instance",
            "{8c4e810f-3df3-4a00-8276-176fa3c9f9e0}",
            "",
            false,
            true,
            false,
            false,
            false,
            mk_fmi3InstanceEnvironment(springMassDamper, mk_SolverData([]), nil),
            fmi3Logger,
            nil)
        in
            hybrid <> nil;

    /**
     * Run all tests.
     */
    tests: () -> seq of bool
    tests() ==
    [
        testInstantiateModelExchange(),
        testInstantiateBasicCoSimulation(),
        testInstantiateHybridCoSimulation()
    ]
    ;-- post elems RESULT = {true};
