/**
 * This file is part of the INTO-CPS toolchain.
 *
 * Copyright (c) 2017-2019, INTO-CPS Association,
 * c/o Professor Peter Gorm Larsen, Department of Engineering
 * Finlandsgade 22, 8200 Aarhus N.
 *
 * All rights reserved.
 *
 * THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR
 * THIS INTO-CPS ASSOCIATION PUBLIC LICENSE VERSION 1.0.
 * ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES
 * RECIPIENT'S ACCEPTANCE OF THE OSMC PUBLIC LICENSE OR THE GPL 
 * VERSION 3, ACCORDING TO RECIPIENTS CHOICE.
 *
 * The INTO-CPS toolchain  and the INTO-CPS Association Public License are
 * obtained from the INTO-CPS Association, either from the above address, from
 * the URLs: http://www.into-cps.org, and in the INTO-CPS toolchain distribution.
 * GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without
 * even the implied warranty of  MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH IN THE
 * BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF
 * THE INTO-CPS ASSOCIATION.
 *
 * See the full INTO-CPS Association Public License conditions for more details.
 */

/**
 * 2.1.5 Creation, Destruction and Logging of FMU Instances.
 */
functions
	/**
	 * Implementation of basic fmi3Instantiate. See API methods below for different modes.
	 */
	fmi3Instantiate_Impl(
		instanceName		: fmi3String,
		instantiationToken	: fmi3String,
		fmuKind				: fmi3FMUKind,
		coSimConfig			: [fmi3CoSimulationConfiguration],
		instanceEnvironment	: fmi3InstanceEnvironment,
		logMessage			: fmi3CallbackLogMessage) result : fmi3Instance
	==
		let xmlModel = instanceEnvironment.xmlModel,
			eModelVariables = effectiveScalarVariables(xmlModel),
			aliasVars = getAliasRefMap(eModelVariables)
		in
			mk_fmi3Instance
			(
				-- The instance name
				instanceName,

				-- The FMU type
				fmuKind,

				-- The initial state
				<INSTANTIATED>,

				-- The callbacks and environment passed
				logMessage,
				instanceEnvironment,
				coSimConfig,

				-- The XML model
				xmlModel,

				-- The effective scalar variables, after all defaults and inherited values set
				eModelVariables,

				-- The continuous time state references
				[ u.valueReference | u in seq xmlModel.modelStructure.unknowns & u.kind = <Derivative> ],

				-- The initial unknown references, which may be an empty set
				{ u.valueReference | u in seq xmlModel.modelStructure.unknowns & u.kind = <InitialUnknown> },

				-- The solver derivative references
				[ sd | sd in seq instanceEnvironment.solverData.derivatives ],

				-- The map of valueReferences to sets of effective Variables
				aliasVars,

				-- The state map indexed by valueReference, created from the effective SVs
				-- Initially either the start value given, or the default start value for the type.
				getStartValues(aliasVars, eModelVariables),

				-- The solver data vector, addressed by SolverData's vref
				[ 0.0 | - in seq instanceEnvironment.solverData.derivatives ],

				-- The eventIndicators
				[ 0.0 | - in set {1, ..., nilNat(xmlModel.attributes.numberOfEventIndicators)} ],

				-- Initially dirty, because "start" values above need a calculate call
				true,

				-- tolerance, set by fmi3SetupExperiment (defaults to xmlModel DefaultExperiment)
				nil,

				-- IsNewEventIteration, used in ME only
				false,

				-- EventInfo for ME and CS?
				mk_fmi3EventInfo(
					nil,	-- nextEventTime
					false,	-- newDiscreteStatesNeeded
					false,	-- terminateSimulation
					false,	-- nominalsOfContinuousStatesChanged
					false,	-- valuesOfContinuousStatesChanged
					false	-- nextEventTimeDefined
				),

				-- start time, set by fmi3SetupExperiment
				nil,

				-- stop time, optionally set by fmi3SetupExperiment
				nil,

				-- current time, set by fmi3SetupExperiment
				nil
			)
				
	pre
		instanceName <> ""
		and (instanceEnvironment.xmlModel.modelExchange = nil)
		and (instantiationToken = instanceEnvironment.xmlModel.attributes.instantiationToken)
	post
		result.fmuState = <INSTANTIATED>
		and result.fmuKind = fmuKind
		and result.coSimulationConfiguration = nil;


	/**
	 * The fmi3InstantiateModelExchange API. This performs sufficient checks to pass the precondition on the
	 * implementation function, returning nil if any checks fail.
	 */
	fmi3InstantiateModelExchange(
		instanceName		: fmi3String,
		instantiationToken	: fmi3String,
		-					: fmi3String,	-- resourceLocation not modelled
		-					: fmi3Boolean,	-- visible not modelled
		loggingOn			: fmi3Boolean,
		instanceEnvironment	: fmi3InstanceEnvironment,
		logMessage			: fmi3CallbackLogMessage) result : [fmi3Instance]
	==
		if instanceName = ""
		then let - = logInst(instanceEnvironment, instanceName,
				"fmi3InstantiateModelExchange instanceName cannot be empty") in nil
		elseif instantiationToken <> instanceEnvironment.xmlModel.attributes.instantiationToken
		then let - = logInst(instanceEnvironment, instanceName,
				"fmi3InstantiateModelExchange instantiationToken does not match XML configuration") in nil
		elseif instanceEnvironment.xmlModel.modelExchange = nil
		then let - = logInst(instanceEnvironment, instanceName,
				"fmi3InstantiateModelExchange must define ModelExchange XML configuration") in nil
		else
			let instance = fmi3Instantiate_Impl(instanceName, instantiationToken,
				<ModelExchange>, nil, instanceEnvironment, logMessage) in
			let mk_(-, result) = fmi3SetDebugLogging(instance, loggingOn, 0, []) in
				result;

	/**
	 * The fmi3InstantiateBasicCoSimulation API. This performs sufficient checks to pass the precondition on the
	 * implementation function, returning nil if any checks fail.
	 */
	fmi3InstantiateBasicCoSimulation(
		instanceName							: fmi3String,
		instantiationToken						: fmi3String,
		-										: fmi3String,	-- resourceLocation not modelled
		-										: fmi3Boolean,	-- visible not modelled
		loggingOn								: fmi3Boolean,
		intermediateVariableGetRequired			: fmi3Boolean,
		intermediateInternalVariableGetRequired	: fmi3Boolean,
		intermediateVariableSetRequired			: fmi3Boolean,
		instanceEnvironment						: fmi3InstanceEnvironment,
		logMessage								: fmi3CallbackLogMessage,
		intermediateUpdate						: [fmi3CallbackIntermediateUpdate]) result : [fmi3Instance]
	==
		if instanceName = ""
		then let - = logInst(instanceEnvironment, instanceName,
				"fmi3InstantiateBasicCoSimulation instanceName cannot be empty") in nil
		elseif instantiationToken <> instanceEnvironment.xmlModel.attributes.instantiationToken
		then let - = logInst(instanceEnvironment, instanceName,
				"fmi3InstantiateBasicCoSimulation instantiationToken does not match XML configuration") in nil
		elseif instanceEnvironment.xmlModel.coSimulation = nil
				or instanceEnvironment.xmlModel.coSimulation.kind <> <BasicCoSimulation>
		then let - = logInst(instanceEnvironment, instanceName,
				"fmi3InstantiateBasicCoSimulation must define BasicCoSimulation XML configuration") in nil
		elseif (intermediateVariableGetRequired or intermediateInternalVariableGetRequired
				or intermediateVariableSetRequired) and intermediateUpdate = nil
		then let - = logInst(instanceEnvironment, instanceName,
				"fmi3InstantiateBasicCoSimulation must provide intermediateUpdate") in nil
		else
			let coSimConfig = mk_fmi3CoSimulationConfiguration(
				intermediateVariableGetRequired,
				intermediateInternalVariableGetRequired,
				intermediateVariableSetRequired,
				<fmi3ModeBasicCoSimulation>,
				intermediateUpdate,
				nil,
				nil)
			in
				let instance = fmi3Instantiate_Impl(instanceName, instantiationToken,
					<BasicCoSimulation>, coSimConfig, instanceEnvironment, logMessage) in
				let mk_(-, result) = fmi3SetDebugLogging(instance, loggingOn, 0, []) in
					result;


	/**
	 * The fmi3InstantiateHybridCoSimulation API. This performs sufficient checks to pass the precondition on the
	 * implementation function, returning nil if any checks fail.
	 */
	fmi3InstantiateHybridCoSimulation(
		instanceName							: fmi3String,
		instantiationToken						: fmi3String,
		-										: fmi3String,	-- resourceLocation not modelled
		-										: fmi3Boolean,	-- visible not modelled
		loggingOn								: fmi3Boolean,
		intermediateVariableGetRequired			: fmi3Boolean,
		intermediateInternalVariableGetRequired	: fmi3Boolean,
		intermediateVariableSetRequired			: fmi3Boolean,
		instanceEnvironment						: fmi3InstanceEnvironment,
		logMessage								: fmi3CallbackLogMessage,
		intermediateUpdate						: [fmi3CallbackIntermediateUpdate]) result : [fmi3Instance]
	==
		if instanceName = ""
		then let - = logInst(instanceEnvironment, instanceName,
				"fmi3InstantiateHybridCoSimulation instanceName cannot be empty") in nil
		elseif instantiationToken <> instanceEnvironment.xmlModel.attributes.instantiationToken
		then let - = logInst(instanceEnvironment, instanceName,
				"fmi3InstantiateHybridCoSimulation instantiationToken does not match XML configuration") in nil
		elseif instanceEnvironment.xmlModel.coSimulation = nil
				or instanceEnvironment.xmlModel.coSimulation.kind <> <HybridCoSimulation>
		then let - = logInst(instanceEnvironment, instanceName,
				"fmi3InstantiateHybridCoSimulation must define HybridCoSimulation XML configuration") in nil
		elseif (intermediateVariableGetRequired or intermediateInternalVariableGetRequired
				or intermediateVariableSetRequired) and intermediateUpdate = nil
		then let - = logInst(instanceEnvironment, instanceName,
				"fmi3InstantiateHybridCoSimulation must provide intermediateUpdate") in nil
		else
			let coSimConfig = mk_fmi3CoSimulationConfiguration(
				intermediateVariableGetRequired,
				intermediateInternalVariableGetRequired,
				intermediateVariableSetRequired,
				<fmi3ModeHybridCoSimulation>,
				intermediateUpdate,
				nil,
				nil)
			in
				let instance = fmi3Instantiate_Impl(instanceName, instantiationToken,
					<HybridCoSimulation>, coSimConfig, instanceEnvironment, logMessage) in
				let mk_(-, result) = fmi3SetDebugLogging(instance, loggingOn, 0, []) in
					result;

	/**
	 * The fmi3InstantiateScheduledCoSimulation API. This performs sufficient checks to pass the precondition on the
	 * implementation function, returning nil if any checks fail.
	 */
	fmi3InstantiateScheduledCoSimulation(
		instanceName							: fmi3String,
		instantiationToken						: fmi3String,
		-										: fmi3String,	-- resourceLocation not modelled
		-										: fmi3Boolean,	-- visible not modelled
		loggingOn								: fmi3Boolean,
		intermediateVariableGetRequired			: fmi3Boolean,
		intermediateInternalVariableGetRequired	: fmi3Boolean,
		intermediateVariableSetRequired			: fmi3Boolean,
		instanceEnvironment						: fmi3InstanceEnvironment,
		logMessage								: fmi3CallbackLogMessage,
		intermediateUpdate						: [fmi3CallbackIntermediateUpdate],
		lockPreemption							: fmi3CallbackLockPreemption,
		unlockPreemption						: fmi3CallbackUnlockPreemption) result : [fmi3Instance]
	==
		if instanceName = ""
		then let - = logInst(instanceEnvironment, instanceName,
				"fmi3InstantiateScheduledCoSimulation instanceName cannot be empty") in nil
		elseif instantiationToken <> instanceEnvironment.xmlModel.attributes.instantiationToken
		then let - = logInst(instanceEnvironment, instanceName,
				"fmi3InstantiateScheduledCoSimulation instantiationToken does not match XML configuration") in nil
		elseif instanceEnvironment.xmlModel.coSimulation = nil
				or instanceEnvironment.xmlModel.coSimulation.kind <> <ScheduledCoSimulation>
		then let - = logInst(instanceEnvironment, instanceName,
				"fmi3InstantiateScheduledCoSimulation must define ScheduledCoSimulation XML configuration") in nil
		elseif (intermediateVariableGetRequired or intermediateInternalVariableGetRequired
				or intermediateVariableSetRequired) and intermediateUpdate = nil
		then let - = logInst(instanceEnvironment, instanceName,
				"fmi3InstantiateScheduledCoSimulation must provide intermediateUpdate") in nil
		else
			let coSimConfig = mk_fmi3CoSimulationConfiguration(
				intermediateVariableGetRequired,
				intermediateInternalVariableGetRequired,
				intermediateVariableSetRequired,
				<fmi3ModeScheduledExecutionSimulation>,
				intermediateUpdate,
				lockPreemption,
				unlockPreemption)
			in
				let instance = fmi3Instantiate_Impl(instanceName, instantiationToken,
					<ScheduledCoSimulation>, coSimConfig, instanceEnvironment, logMessage) in
				let mk_(-, result) = fmi3SetDebugLogging(instance, loggingOn, 0, []) in
					result;


	/**
	 * Helper to log fmi3Instantiate* errors. These cannot use the callback logger because the
	 * fmi3Instance that defines the enabled categories has not yet been created. It implicitly
	 * uses the raw implementation - ie. it is guaranteed to log.
	 */
	logInst: fmi3InstanceEnvironment * fmi3String * fmi3String +> <VOID>
	logInst(ienv, instanceName, message) ==
		fmi3Logger_Impl(ienv, instanceName, <fmi3Error>, "logAll", message);


	/**
	 * Calculate the initial map of SV values, given their "start" attributes.
	 * Called by fmi3Instantiate and fmi3Reset.
	 */
	getStartValues: map fmi3ValueReference to set of Variable * seq1 of Variable +> map fmi3ValueReference to seq1 of fmi3Value
	getStartValues(aliasVars, eModelVariables) ==
	{
		vref |->
			let sv in set aliasVars(vref) in	-- Choose any alias from the set
				if sv.start <> nil
				then sv.start		-- All aliases have the same start
				else
					let defValue =	-- Set default scalar value for variable type
						if is_Real(sv) then 0.0
						else if is_Integer(sv) then 0
						else if is_Boolean(sv) then false
						else if is_String(sv) then ""
						else if is_Enumeration(sv) then 0
						else undefined
					in
						[defValue | - in set {1, ..., dimensionsProduct(eModelVariables, sv.base.dimensions)}]

		| vref in set dom aliasVars
	};

	/**
	 * Implementation of fmi3FreeInstance. See API method below.
	 */
	fmi3FreeInstance_Impl: fmi3Instance +> <VOID>
	fmi3FreeInstance_Impl(c) ==
		<VOID>	-- Logically calls c.xmlModel.funcs.freeMemory()
	pre
		c.fmuState in set STATES_fmi3FreeInstance;

	/**
	 * The fmi3FreeInstance API. This performs sufficient checks to pass the precondition on the
	 * implementation function, returning <VOID> if any checks fail.
	 */
	fmi3FreeInstance: [fmi3Instance] +> <VOID>
	fmi3FreeInstance(c) ==
		if c = nil
		then -- The function ignores a "null" argument
			<VOID>
		elseif c.fmuState not in set STATES_fmi3FreeInstance
		then let - = logAPIError(c, "Cannot call fmi3FreeInstance in this state") in
			<VOID>
		else
			fmi3FreeInstance_Impl(c);


	/**
	 * Implementation of fmi3SetDebugLogging. See API method below.
	 */
	fmi3SetDebugLogging_Impl: fmi3Instance * fmi3Boolean * nat * seq of fmi3String +> fmi3Status * fmi3Instance
	fmi3SetDebugLogging_Impl(c, loggingOn, nCategories, categories) ==
		mk_(<fmi3OK>,
			mu(c, instanceEnvironment |->
				mu(c.instanceEnvironment, logCategories |->
					if loggingOn
					then
						if nCategories = 0
						then [ cat.name | cat in seq c.xmlModel.logCategories ]
						else elems categories
					else nil)))
	pre
		c.fmuState in set STATES_fmi3SetDebugLogging
		and nCategories = len categories
		and card elems categories = nCategories
		and (nCategories > 0 =>
			let logcats = c.xmlModel.logCategories in
				logcats <> nil
				and forall cname in seq categories &
					exists lc in seq logcats &
						lc.name = cname)
	post
		RESULT.#2.instanceEnvironment.logCategories =
			if loggingOn
			then if nCategories = 0
				then [ cat.name | cat in seq c.xmlModel.logCategories ]
				else elems categories
			else nil;

	/**
	 * The fmi3FreeInstance API. This performs sufficient checks to pass the precondition on the
	 * implementation function, returning <VOID> if any checks fail.
	 */
	fmi3SetDebugLogging: fmi3Instance * fmi3Boolean * nat * seq of fmi3String +> fmi3Status * [fmi3Instance]
	fmi3SetDebugLogging(c, loggingOn, nCategories, categories) ==
		if c.fmuState not in set STATES_fmi3SetDebugLogging
		then let - = logAPIError(c, "Cannot call fmi3SetDebugLogging in this state") in
			mk_(<fmi3Error>, nil)
		elseif nCategories <> len categories or card elems categories <> nCategories
		then let - = logAPIError(c, "nCategories does not match categories length") in
			mk_(<fmi3Error>, nil)
		else let logcats = c.xmlModel.logCategories in
			if logcats = nil
			then let - = logAPIError(c, "No log categories defined in XML configuration") in
				mk_(<fmi3Error>, nil)
			elseif exists cname in seq categories & not exists lc in seq logcats & lc.name = cname
			then let - = logAPIError(c, "Some log categories not found in XML configuration") in
				mk_(<fmi3Error>, nil)
			else
				fmi3SetDebugLogging_Impl(c, loggingOn, nCategories, categories)
	post
		RESULT.#1 <> <fmi3OK> => RESULT.#2 = nil;
