/**
 * This file is part of the INTO-CPS toolchain.
 *
 * Copyright (c) 2017-2020, INTO-CPS Association,
 * c/o Professor Peter Gorm Larsen, Department of Engineering
 * Finlandsgade 22, 8200 Aarhus N.
 *
 * All rights reserved.
 *
 * THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR
 * THIS INTO-CPS ASSOCIATION PUBLIC LICENSE VERSION 1.0.
 * ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES
 * RECIPIENT'S ACCEPTANCE OF THE OSMC PUBLIC LICENSE OR THE GPL 
 * VERSION 3, ACCORDING TO RECIPIENTS CHOICE.
 *
 * The INTO-CPS toolchain  and the INTO-CPS Association Public License are
 * obtained from the INTO-CPS Association, either from the above address, from
 * the URLs: http://www.into-cps.org, and in the INTO-CPS toolchain distribution.
 * GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without
 * even the implied warranty of  MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH IN THE
 * BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF
 * THE INTO-CPS ASSOCIATION.
 *
 * See the full INTO-CPS Association Public License conditions for more details.
 */

/**
 * 4.2.2 Computation in Co-Simulation Interface Types
 * 6.2.2 Computation in Scheduled Co-Simulation
 */
functions
	/**
	 * Implementation of fmi3DoStep. See API method below.
	 */
	fmi3DoStep_Impl: fmi3Instance * fmi3Float * fmi3Float * fmi3Boolean +> fmi3Status * [fmi3Boolean] * [fmi3Boolean] * [fmi3Float] * [fmi3Instance]
	fmi3DoStep_Impl(c, currentCommunicationPoint, communicationStepSize, -/*noSetFMUStatePriorToCurrentPoint*/) ==
		let mk_(s, c2) = mk_(<fmi3OK>, c) /* c.instanceEnvironment.calculateDoStep(c,  currentCommunicationPoint, communicationStepSize) */ in
			if s <> <fmi3OK>
			then mk_(s, nil, nil, nil, nil)
			else mk_(s, nil, nil, nil, c2)		-- TODO!
	pre
		mk_(c.fmuKind, c.fmuState) in set STATES_fmi3DoStep
		and communicationStepSize > 0.0
		and currentCommunicationPoint >= 0.0
	post
		RESULT.#1 = <fmi3OK> =>
			epsilon(RESULT.#5.currentTime, currentCommunicationPoint + communicationStepSize);


	/**
	 * The fmi3DoStep API. This performs sufficient checks to pass the precondition on the
	 * implementation function, returning an fmi3Status if any checks fail.
	 */
	fmi3DoStep: fmi3Instance * fmi3Float * fmi3Float * fmi3Boolean +> fmi3Status * [fmi3Boolean] * [fmi3Boolean] * [fmi3Float] * [fmi3Instance]
	fmi3DoStep(c, currentCommunicationPoint, communicationStepSize, noSetFMUStatePriorToCurrentPoint) ==
		if mk_(c.fmuKind, c.fmuState) not in set STATES_fmi3DoStep
		then logAPIError(c, "Cannot call fmi3DoStep in this state",	mk_(<fmi3Error>, nil, nil, nil, nil))

		elseif communicationStepSize <= 0.0
		then logAPIError(c, "Communication step size must be >0", mk_(<fmi3Error>, nil, nil, nil, nil))

		elseif currentCommunicationPoint < 0.0
		then logAPIError(c, "Curret communication point must be >=0", mk_(<fmi3Error>, nil, nil, nil, nil))

		else fmi3DoStep_Impl(c, currentCommunicationPoint, communicationStepSize, noSetFMUStatePriorToCurrentPoint)
	 post
	 	RESULT.#1 <> <fmi3OK> <=> RESULT.#2 = nil;

	/**
	 * Implementation of fmi3ActivateModelPartition. See API method below.
	 */
	fmi3ActivateModelPartition_Impl(
		c					: fmi3Instance,
		clockReference		: fmi3ValueReference,
		clockElementIndex	: nat1,
		activationTime		: fmi3Float) result : fmi3Status
	==
		is not yet specified;

	fmi3ActivateModelPartition(
		c					: fmi3Instance,
		clockReference		: fmi3ValueReference,
		clockElementIndex	: nat1,
		activationTime		: fmi3Float) result : fmi3Status
	==
		if mk_(c.fmuKind, c.fmuState) not in set STATES_fmi3ActivateModelPartition
		then logAPIError(c, "Cannot call fmi3ActivateModelPartition in this state",	<fmi3Error>)

		else let clock = lookup(c.eModelVariables, clockReference) in
			if clock = nil
			then logAPIError(c, "ValueReference not found", <fmi3Error>)

			elseif not is_(clock, Clock)
			then logAPIError(c, "ValueReference is not a clock", <fmi3Error>)

			else fmi3ActivateModelPartition_Impl(c, clockReference, clockElementIndex, activationTime);

