/**
 * This file is part of the INTO-CPS toolchain.
 *
 * Copyright (c) 2017-2019, INTO-CPS Association,
 * c/o Professor Peter Gorm Larsen, Department of Engineering
 * Finlandsgade 22, 8200 Aarhus N.
 *
 * All rights reserved.
 *
 * THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR
 * THIS INTO-CPS ASSOCIATION PUBLIC LICENSE VERSION 1.0.
 * ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES
 * RECIPIENT'S ACCEPTANCE OF THE OSMC PUBLIC LICENSE OR THE GPL 
 * VERSION 3, ACCORDING TO RECIPIENTS CHOICE.
 *
 * The INTO-CPS toolchain  and the INTO-CPS Association Public License are
 * obtained from the INTO-CPS Association, either from the above address, from
 * the URLs: http://www.into-cps.org, and in the INTO-CPS toolchain distribution.
 * GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without
 * even the implied warranty of  MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH IN THE
 * BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF
 * THE INTO-CPS ASSOCIATION.
 *
 * See the full INTO-CPS Association Public License conditions for more details.
 */

/**
 * 3.2.3 State Machine for Model Exchange
 * 4.2.3 State Machine for Basic Co-Simulation
 * 5.2.4 State Machine for Hybrid Co-Simulation
 * 6.2.3 State Machine for Scheduled Co-Simulation
 */
types
	States = set of fmi3State;

values
	ANY_STATE = { s | s : fmi3State };

--------------------------------------------------------------------------------
-- Function calls for all simulation modes
--------------------------------------------------------------------------------
STATES_fmi3GetVersion : States               = ANY_STATE;
STATES_fmi3SetDebugLogging : States          = { <INSTANTIATED>, <INITIALIZATION_MODE>, <EVENT_MODE>, <CONTINUOUS_TIME_MODE>, <CONFIGURATION_MODE>, <RECONFIGURATION_MODE>, <STEP_MODE>, <TERMINATED>, <ERROR> };
STATES_fmi3EnterConfigurationMode : States   = { <INSTANTIATED>, <EVENT_MODE>, <STEP_MODE>, <CLOCK_ACTIVATION_MODE> };
STATES_fmi3ExitConfigurationMode : States    = { <CONFIGURATION_MODE>, <RECONFIGURATION_MODE> };
STATES_fmi3EnterInitializationMode : States  = { <INSTANTIATED> };
STATES_fmi3ExitInitializationMode : States   = { <INITIALIZATION_MODE> };
STATES_fmi3Terminate : States                = ANY_STATE \ {<TERMINATED>};
STATES_fmi3Reset : States                    = ANY_STATE;
STATES_fmi3FreeInstance : States             = ANY_STATE;

--- Above checked, below yet to be done!

STATES_fmi3GetReal : States                  = { <INITIALIZATION_MODE>, <EVENT_MODE>, <CONTINUOUS_TIME_MODE>, <STEP_MODE>, <RECONFIGURATION_MODE>, <TERMINATED>, <ERROR> };
STATES_fmi3GetInteger : States               = STATES_fmi3GetReal;
STATES_fmi3GetBoolean : States               = STATES_fmi3GetReal;
STATES_fmi3GetString : States                = STATES_fmi3GetReal;
STATES_fmi3SetReal : States                  = { <INSTANTIATED>, <INITIALIZATION_MODE>, <EVENT_MODE>, <CONTINUOUS_TIME_MODE>, <STEP_MODE> };
STATES_fmi3SetInteger : States               = { <INSTANTIATED>, <INITIALIZATION_MODE>, <EVENT_MODE>, <STEP_MODE> };
STATES_fmi3SetBoolean : States               = STATES_fmi3SetInteger;
STATES_fmi3SetString : States                = STATES_fmi3SetInteger;
STATES_fmi3GetFMUstate : States              = STATES_fmi3FreeInstance;
STATES_fmi3SetFMUstate : States              = STATES_fmi3FreeInstance;
STATES_fmi3FreeFMUstate : States             = STATES_fmi3FreeInstance;
STATES_fmi3SerializedFMUstateSize : States   = STATES_fmi3FreeInstance;
STATES_fmi3SerializeFMUstate : States        = STATES_fmi3FreeInstance;
STATES_fmi3DeSerializeFMUstate : States      = STATES_fmi3FreeInstance;
STATES_fmi3GetDirectionalDerivative : States = { <INITIALIZATION_MODE>, <EVENT_MODE>, <CONTINUOUS_TIME_MODE>, <STEP_MODE>, <RECONFIGURATION_MODE>, <TERMINATED>, <ERROR> }; 
STATES_fmi3GetAdjointDerivative : States     = { <INITIALIZATION_MODE>, <EVENT_MODE>, <CONTINUOUS_TIME_MODE>, <STEP_MODE>, <RECONFIGURATION_MODE>, <TERMINATED>, <ERROR> }; 

------------------------------------------------------------------------------
-- Function calls for Model-exchange
------------------------------------------------------------------------------
STATES_fmi3EnterEventMode : States           = { <EVENT_MODE>, <CONTINUOUS_TIME_MODE> };
STATES_fmi3NewDiscreteStates : States        = { <EVENT_MODE> };
STATES_fmi3EnterContinuousTimeMode : States  = { <EVENT_MODE> };
STATES_fmi3CompletedIntegratorStep : States  = { <CONTINUOUS_TIME_MODE> };
STATES_fmi3SetTime : States                  = { <EVENT_MODE>, <CONTINUOUS_TIME_MODE> };
STATES_fmi3SetContinuousStates : States      = { <CONTINUOUS_TIME_MODE> };
STATES_fmi3GetEventIndicators : States       = { <INITIALIZATION_MODE>, <EVENT_MODE>, <CONTINUOUS_TIME_MODE>, <TERMINATED>, <ERROR> };
STATES_fmi3GetContinuousStates : States      = STATES_fmi3GetEventIndicators;
STATES_fmi3GetDerivatives : States           = { <INITIALIZATION_MODE>, <EVENT_MODE>, <CONTINUOUS_TIME_MODE>, <TERMINATED>, <ERROR> };
STATES_fmi3GetNominalsOfContinuousStates : States = {  <INSTANTIATED>, <EVENT_MODE>, <CONTINUOUS_TIME_MODE>, <TERMINATED>, <ERROR> };

------------------------------------------------------------------------------
-- Function calls for Co-simulation
------------------------------------------------------------------------------
STATES_fmi3SetRealInputDerivatives : States  = { <INSTANTIATED>, <INITIALIZATION_MODE>, <STEP_MODE> };
STATES_fmi3GetRealOutputDerivatives : States = { <STEP_MODE>, <RECONFIGURATION_MODE>, <TERMINATED>, <ERROR> };
STATES_fmi3DoStep : States                   = { <STEP_MODE> };
STATES_fmi3CancelStep : States               = { <STEP_MODE> };
STATES_fmi3GetStatus : States                = { <STEP_MODE>, <RECONFIGURATION_MODE>, <TERMINATED> };
STATES_fmi3GetRealStatus : States            = STATES_fmi3GetStatus;
STATES_fmi3GetIntegerStatus : States         = STATES_fmi3GetStatus;
STATES_fmi3GetBooleanStatus : States         = STATES_fmi3GetStatus;
STATES_fmi3GetStringStatus : States          = STATES_fmi3GetStatus;

