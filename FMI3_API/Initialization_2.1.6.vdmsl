/**
 * This file is part of the INTO-CPS toolchain.
 *
 * Copyright (c) 2017-2019, INTO-CPS Association,
 * c/o Professor Peter Gorm Larsen, Department of Engineering
 * Finlandsgade 22, 8200 Aarhus N.
 *
 * All rights reserved.
 *
 * THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR
 * THIS INTO-CPS ASSOCIATION PUBLIC LICENSE VERSION 1.0.
 * ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES
 * RECIPIENT'S ACCEPTANCE OF THE OSMC PUBLIC LICENSE OR THE GPL 
 * VERSION 3, ACCORDING TO RECIPIENTS CHOICE.
 *
 * The INTO-CPS toolchain  and the INTO-CPS Association Public License are
 * obtained from the INTO-CPS Association, either from the above address, from
 * the URLs: http://www.into-cps.org, and in the INTO-CPS toolchain distribution.
 * GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without
 * even the implied warranty of  MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH IN THE
 * BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF
 * THE INTO-CPS ASSOCIATION.
 *
 * See the full INTO-CPS Association Public License conditions for more details.
 */

/**
 * 2.1.6  Initialization, Termination, and Resetting an FMU
 */
functions
	/**
	 * Implementation and API for fmi3SetupExperiment.
	 */
	fmi3SetupExperiment_Impl: fmi3Instance * fmi3Boolean * fmi3Float * fmi3Float * fmi3Boolean * fmi3Float +> fmi3Status * fmi3Instance
	fmi3SetupExperiment_Impl(c, toleranceDefined, tolerance, startTime, stopTimeDefined, stopTime) ==
		mk_(<fmi3OK>, mu(c,
			tolerance	|-> if toleranceDefined then tolerance
							elseif c.xmlModel.defaultExperiment <> nil
							then c.xmlModel.defaultExperiment.tolerance
							else nil,
			startTime	|-> startTime,
			stopTime	|-> if stopTimeDefined then stopTime else nil,
			currentTime	|-> startTime))		-- TODO should set independent variable?
	pre
		c.fmuState in set STATES_fmi3SetupExperiment
		and (stopTimeDefined => stopTime > startTime)
		and (toleranceDefined => tolerance >= 0)
	post
		RESULT.#2.fmuState = <INSTANTIATED>;

	fmi3SetupExperiment: fmi3Instance * fmi3Boolean * fmi3Float * fmi3Float * fmi3Boolean * fmi3Float +> fmi3Status * [fmi3Instance]
	fmi3SetupExperiment(c, toleranceDefined, tolerance, startTime, stopTimeDefined, stopTime) ==
		if c.fmuState not in set STATES_fmi3SetupExperiment
		then let - = logAPIError(c, "Cannot call fmi3SetupExperiment in this state") in
			mk_(<fmi3Error>, nil)
		elseif stopTimeDefined and stopTime <= startTime
		then let - = logAPIError(c, "stopTime is not > startTime") in
			mk_(<fmi3Error>, nil)
		elseif toleranceDefined and tolerance < 0
		then let - = logAPIError(c, "Tolerance must be >= 0") in
			mk_(<fmi3Error>, nil)
		else
			fmi3SetupExperiment_Impl(c, toleranceDefined, tolerance, startTime, stopTimeDefined, stopTime)
	 post
	 	RESULT.#1 <> <fmi3OK> <=> RESULT.#2 = nil;


	/**
	 * Implementation and API for fmi3EnterConfigurationMode.
	 */
	fmi3EnterConfigurationMode_Impl: fmi3Instance +> fmi3Status * fmi3Instance
	fmi3EnterConfigurationMode_Impl(c) ==
		mk_(<fmi3OK>, mu(c,
			fmuState |->
				if c.fmuState = <INITIALIZATION>
				then <CONFIGURATION_MODE>
				else <RECONFIGURATION_MODE>))
	pre
		c.fmuState in set STATES_fmi3EnterConfigurationMode
		and c.startTime <> nil
		and exists sv in seq c.eModelVariables & sv.base.causality = <structuralParameter>
	post
		RESULT.#2.fmuState in set {<CONFIGURATION_MODE>, <RECONFIGURATION_MODE>};

	fmi3EnterConfigurationMode: fmi3Instance +> fmi3Status * [fmi3Instance]
	fmi3EnterConfigurationMode(c) ==
		if c.fmuState not in set STATES_fmi3EnterConfigurationMode
		then let - = logAPIError(c, "Cannot call fmi3EnterConfigurationMode in this state") in
			mk_(<fmi3Error>, nil)
		elseif not exists sv in seq c.eModelVariables & sv.base.causality = <structuralParameter>
		then let - = logAPIError(c, "Cannot call fmi3EnterConfigurationMode with no structural parameters defined") in
			mk_(<fmi3Error>, nil)
		else
			fmi3EnterConfigurationMode_Impl(c)
	 post
	 	RESULT.#1 <> <fmi3OK> <=> RESULT.#2 = nil;


	/**
	 * Implementation and API for fmi3ExitConfigurationMode.
	 */
	fmi3ExitConfigurationMode_Impl: fmi3Instance +> fmi3Status * fmi3Instance
	fmi3ExitConfigurationMode_Impl(c) ==
		mk_(<fmi3OK>, mu(c,
			fmuState |->
				if c.fmuState = <CONFIGURATION_MODE>
				then <INITIALIZATION>
				else <EVENT_MODE>))

	pre
		c.fmuState in set STATES_fmi3ExitConfigurationMode
		and c.startTime <> nil
		and exists sv in seq c.eModelVariables & sv.base.causality = <structuralParameter>
	post
		RESULT.#2.fmuState in set {<INITIALIZATION>, <EVENT_MODE>};

	fmi3ExitConfigurationMode: fmi3Instance +> fmi3Status * [fmi3Instance]
	fmi3ExitConfigurationMode(c) ==
		if c.fmuState not in set STATES_fmi3ExitConfigurationMode
		then let - = logAPIError(c, "Cannot call fmi3ExitConfigurationMode in this state") in 
			mk_(<fmi3Error>, nil)
		elseif not exists sv in seq c.eModelVariables & sv.base.causality = <structuralParameter>
		then let - = logAPIError(c, "Cannot call fmi3ExitConfigurationMode with no structural parameters defined") in
			mk_(<fmi3Error>, nil)
		else
			fmi3ExitConfigurationMode_Impl(c)
	 post
	 	RESULT.#1 <> <fmi3OK> <=> RESULT.#2 = nil;


	/**
	 * Implementation and API for fmi3EnterInitializationMode.
	 */
	fmi3EnterInitializationMode_Impl: fmi3Instance +> fmi3Status * fmi3Instance
	fmi3EnterInitializationMode_Impl(c) ==
		mk_(<fmi3OK>, mu(c, fmuState |-> <INITIALIZATION>))
	pre
		c.fmuState in set STATES_fmi3EnterInitializationMode
		and c.startTime <> nil
	post
		RESULT.#2.fmuState = <INITIALIZATION>;

	fmi3EnterInitializationMode: fmi3Instance +> fmi3Status * [fmi3Instance]
	fmi3EnterInitializationMode(c) ==
		if c.fmuState not in set STATES_fmi3EnterInitializationMode
		then let - = logAPIError(c, "Cannot call fmi3EnterInitializationMode in this state") in
			mk_(<fmi3Error>, nil)
		elseif c.startTime = nil
		then let - = logAPIError(c, "fmi3SetupExperiment has not been called (startTime is nil)?") in
			mk_(<fmi3Error>, nil)
		else
			fmi3EnterInitializationMode_Impl(c)
	 post
	 	RESULT.#1 <> <fmi3OK> <=> RESULT.#2 = nil;


	/**
	 * Implementation and API for fmi3ExitInitializationMode.
	 */
	fmi3ExitInitializationMode_Impl: fmi3Instance +> fmi3Status * [fmi3Instance]
	fmi3ExitInitializationMode_Impl(c) ==
		let mk_(s, c2) = /* if c.dirty then c.calculateValues(c) else */ mk_(<fmi3OK>, c) in
			if s <> <fmi3OK>
			then mk_(s, nil)
			else mk_(<fmi3OK>, mu(c2,
				fmuState |->
					if c.fmuType = <fmi3CoSimulation>
					then <EVENT_MODE>
					else <STEP_MODE>))
	pre
		c.fmuState in set STATES_fmi3ExitInitializationMode
	post
		RESULT.#2.fmuState in set {<EVENT_MODE>, <STEP_MODE>};

	fmi3ExitInitializationMode: fmi3Instance +> fmi3Status * [fmi3Instance]
	fmi3ExitInitializationMode(c) ==
		if c.fmuState not in set STATES_fmi3ExitInitializationMode
		then let - = logAPIError(c, "Cannot call fmi3ExitInitializationMode in this state") in
			mk_(<fmi3Error>, nil)
		else
			fmi3ExitInitializationMode_Impl(c)
	 post
	 	RESULT.#1 <> <fmi3OK> <=> RESULT.#2 = nil;


	/**
	 * Implementation and API for fmi3Terminate.
	 */
	fmi3Terminate_Impl: fmi3Instance +> fmi3Status * fmi3Instance
	fmi3Terminate_Impl(c) ==
		mk_(<fmi3OK>, mu(c, fmuState |-> <TERMINATED>))
	pre
		c.fmuState in set STATES_fmi3Terminate
	post
		RESULT.#2.fmuState = <TERMINATED>;

	fmi3Terminate: fmi3Instance +> fmi3Status * [fmi3Instance]
	fmi3Terminate(c) ==
		if c.fmuState not in set STATES_fmi3Terminate
		then let - = logAPIError(c, "Cannot call fmi3Terminate in this state") in
			mk_(<fmi3Error>, nil)
		else
			fmi3Terminate_Impl(c)
	 post
	 	RESULT.#1 <> <fmi3OK> <=> RESULT.#2 = nil;


	/**
	 * Implementation and API for fmi3Reset.
	 */
	fmi3Reset_Impl: fmi3Instance +> fmi3Status * fmi3Instance
	fmi3Reset_Impl(c) ==
		mk_(<fmi3OK>, mu(c,
			variables	|-> getStartValues(c.aliasMap, c.eModelVariables),
			dirty		|-> true,
			fmuState	|-> <INSTANTIATED>))
	pre
		c.fmuState in set STATES_fmi3Reset
	post
		RESULT.#2.fmuState = <INSTANTIATED>;

	fmi3Reset: fmi3Instance +> fmi3Status * [fmi3Instance]
	fmi3Reset(c) ==
		if c.fmuState not in set STATES_fmi3Reset
		then let - = logAPIError(c, "Cannot call fmi3Reset in this state") in
			mk_(<fmi3Error>, nil)
		else
			fmi3Reset_Impl(c)
	 post
	 	RESULT.#1 <> <fmi3OK> <=> RESULT.#2 = nil;
	