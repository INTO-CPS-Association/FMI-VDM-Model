/**
 * This file is part of the INTO-CPS toolchain.
 *
 * Copyright (c) 2017-2019, INTO-CPS Association,
 * c/o Professor Peter Gorm Larsen, Department of Engineering
 * Finlandsgade 22, 8200 Aarhus N.
 *
 * All rights reserved.
 *
 * THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR
 * THIS INTO-CPS ASSOCIATION PUBLIC LICENSE VERSION 1.0.
 * ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES
 * RECIPIENT'S ACCEPTANCE OF THE OSMC PUBLIC LICENSE OR THE GPL 
 * VERSION 3, ACCORDING TO RECIPIENTS CHOICE.
 *
 * The INTO-CPS toolchain  and the INTO-CPS Association Public License are
 * obtained from the INTO-CPS Association, either from the above address, from
 * the URLs: http://www.into-cps.org, and in the INTO-CPS toolchain distribution.
 * GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without
 * even the implied warranty of  MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH IN THE
 * BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF
 * THE INTO-CPS ASSOCIATION.
 *
 * See the full INTO-CPS Association Public License conditions for more details.
 */

/**
 * 2.2.1 Definition of an FMU (fmiModelDescription)
 */
types
	ModelAttributes ::
		location					: Location
		fmiVersion					: NormalizedString
		modelName					: AnyString
		instantiationToken			: NormalizedString
		description					: [AnyString]
		author						: [AnyString]
		version						: [NormalizedString]
		copyright					: [AnyString]
		license						: [AnyString]
		generationTool				: [NormalizedString]
		generationDateAndTime		: [AnyString]
		variableNamingConvention	: [<flat> | <structured>]
		numberOfEventIndicators		: [nat];


	-- XSD definition in section 2.2.1
	FMIModelDescription ::
		-- The common model attributes
		attributes				: ModelAttributes			-- XSD 2.2.1

		-- ModelExchange
		modelExchange			: [ModelExchange]			-- XSD 3.3.1

		-- CoSimulation
		coSimulation			: [CoSimulation ]			-- XSD 4.3.1

		-- Build configuration
		buildConfiguration		: [BuildConfiguration]		-- XSD 2.2.2

		-- Unit Definitions that are utilized in "ModelVariables"
		unitDefinitions			: [seq1 of Unit]			-- XSD 2.2.3

		-- A global list of type definitions that are utilized in "ModelVariables"
		typeDefinitions			: [set1 of VariableType]	-- XSD 2.2.4

		-- Log categories
		logCategories			: [seq1 of Category]		-- XSD 2.2.5

		-- Default experiment
		defaultExperiment		: [DefaultExperiment]		-- XSD 2.2.6

		-- Terminals										-- XSD 2.2.7
		terminals				: [seq1 of Terminal]

		-- Graphical representation							-- XSD 2.2.8
		graphicalRepresentation	: [GraphicalRepresentation]

		-- Vendor annotations
		vendorAnnotations		: [seq1 of Tool]			-- XSD 2.2.9

		-- The central FMU data structure defining all variables of the FMU that
		-- Are visible/accessible via the FMU functions.
		modelVariables			: seq1 of Variable			-- XSD 2.2.10

		-- Defines the structure of the model.
		modelStructure			: ModelStructure;			-- XSD 2.2.11

functions
	/**
	 * Valid description attributes.
	 */
	isValidModelAttributes: ModelAttributes +> bool
	isValidModelAttributes(attrs) ==
		-- @OnFail("2.2.1 ModelAttribute fmiVersion should start with 3.0")
		( attrs.fmiVersion(1, ..., 3) = "3.0" );

	/**
	 * Invariant definition for FMIModelDescription
	 */
	isValidFMIModelDescription: FMIModelDescription +> bool
	isValidFMIModelDescription(md) ==
		-- First fill in effective values for model variables' missing attributes
		let eModelVariables = effectiveScalarVariables(md) in
		{
			-- @OnFail("2.2.1 ModelAttributes invalid at line %s", md.attributes.location)
			( isValidModelAttributes(md.attributes) ),

			-- @OnFail("2.2.1 ModelExchange invalid at line %s", md.modelExchange.base.location)
			( isValidModelExchange(md.modelExchange) ),

			-- @OnFail("2.2.1 CoSimulation invalid at line %s", md.coSimulation.base.location)
			( isValidCoSimulation(md.coSimulation) ),

			-- @OnFail("2.2.1 BuildConfiguration invalid"))
			( isValidBuildConfiguration(md.buildConfiguration) ),

			-- @OnFail("2.2.1 UnitDefinitions invalid"))
			( isValidUnitDefinitions(md.unitDefinitions) ),

			-- @OnFail("2.2.1 TypeDefinitions invalid")
			( isValidTypeDefinitions(md.typeDefinitions) ),

			-- @OnFail("2.2.1 LogCategories invalid")
			( isValidLogCategories(md.logCategories) ),

			-- @OnFail("2.2.1 DefaultExperiment invalid at line %s", md.defaultExperiment.location)
			( isValidDefaultExperiment(md.defaultExperiment) ),

			-- @OnFail("2.2.1 Terminals invalid")
			( isValidTerminals(md.terminals) ),

			-- @OnFail("2.2.1 GraphicalRepresentation invalid")
			( isValidGraphicalRepresentation(md.graphicalRepresentation) ),

			-- @OnFail("2.2.1 VendorAnnotations invalid")
			( isValidVendorAnnotation(md.vendorAnnotations) ),

			-- @OnFail("2.2.1 Variables invalid")
			( isValidModelVariables(md.modelVariables) ),		-- NOTE: NOT effective variables!

			-- @OnFail("2.2.1 Effective Variables invalid")
			( isValidEffectiveVariables(eModelVariables) ),		-- NOTE: effective variables!

			-- @OnFail("2.2.1 ModelStructure invalid at line %s", md.modelStructure.location)
			( isValidModelStructure(md.modelStructure) ),

			-- @OnFail("2.2.1 Variables typecheck against TypeDefinitions failed")
			( typeCheck(eModelVariables, md.typeDefinitions) ),

			-- @OnFail("2.2.1 Neither ModelExchange nor CoSimulation specified")
			( md.modelExchange <> nil or md.coSimulation <> nil ),

			(
				md.attributes.variableNamingConvention = <structured> =>
					dunion
					{
						{
							-- @OnFail("2.2.9 Structured name %s invalid at line %s", sv.base.name, sv.base.location)
							( isValidStructuredName(sv.base.name) ),

							-- @OnFail("2.2.9 Name %s is not Real at line %s", sv.base.name, sv.base.location)
							( sv.base.name(1, ..., 4) = "der(" => is_Real(sv) )
						}

						| sv in seq eModelVariables
					}
					= {true}
			),

			(
				md.typeDefinitions <> nil =>
					dunion
					{
						{
							/* @OnFail("2.2.3 TypeDefinition and Variable names overlap: %s at line %s",
									std.base.name, std.base.location) */
							( not exists sv in seq eModelVariables & sv.base.name = std.base.name ),

							is_RealType(std) =>
								std.realAtts.unit <> nil =>
									/* @OnFail("2.2.3 Type %s, Real unit %s not defined in UnitDefinitions at line %s",
										std.base.name, std.realAtts.unit, std.base.location) */
									( md.unitDefinitions <> nil
									  and exists u in seq md.unitDefinitions & u.name = std.realAtts.unit )
						}

						| std in set md.typeDefinitions
					} = {true}
			),

			(
				{
					sv.base.canHandleMultipleSetPerTimeInstant <> nil =>
						/* @OnFail("2.2.7 Variable %s, canHandleMultipleSetPerTimeInstant invalid at line %s",
							sv.base.name, sv.base.location) */
						( md.modelExchange <> nil and sv.base.causality = <input> )

					| sv in seq eModelVariables
				} = {true}
			),

			(
				{
					is_Real(sv) =>
					{
						/* @OnFail("2.2.7 Variable %s, Real unit must be defined for displayUnit %s at line %s",
							sv.base.name, sv.realAtts.displayUnit, sv.base.location) */
						( sv.realAtts.displayUnit <> nil => sv.realAtts.unit <> nil ),

						sv.realAtts.unit <> nil =>
							/* @OnFail("2.2.7 Variable %s, Real unit %s not defined in UnitDefinitions at line %s",
								sv.base.name, sv.realAtts.unit, sv.base.location) */
							( md.unitDefinitions <> nil
							  and exists u in seq md.unitDefinitions & u.name = sv.realAtts.unit )
					}
					= {true}

					| sv in seq eModelVariables
				} = {true}
			),

			(
				{
					let sv = eModelVariables(svi) in
						is_Real(sv) and sv.varAtts.reinit <> nil =>
						/* @OnFail("2.2.7 Variable %s, Real reinit for model exchange continuous time only at line %s",
								sv.base.name, sv.base.location) */
						( isContinuousTimeState(svi, eModelVariables) and md.modelExchange <> nil )

					| svi in set inds eModelVariables
				} = {true}
			),

			(
				let outputRefs = { sv.base.valueReference |
						sv in seq eModelVariables & sv.base.causality = <output> },
					structRefs = { u.valueReference |
						u in seq nilSeq[Unknown](md.modelStructure.unknowns) &
						u.kind = <Output> }
				in
					if outputRefs <> {}
					then
						/* @OnFail("2.2.8 Output variables but no outputs declared at line %s",
							md.modelStructure.location) */
						( structRefs <> {} )

						and
						/* @OnFail("2.2.8 Outputs section does not match output variables at line %s",
							md.modelStructure.location) */
						( structRefs = outputRefs )
					else
						/* @OnFail("2.2.8 Outputs should be omitted at line %s", md.modelStructure.location) */
						( structRefs = {} )
			),

			(
				md.modelExchange <> nil =>
					let derivativeRefs = { sv.base.valueReference |
							sv in seq eModelVariables & isStateDerivative(sv) },
						structRefs = { u.valueReference |
							u in seq nilSeq[Unknown](md.modelStructure.unknowns) &
							u.kind = <Derivative> }
					in
						if derivativeRefs <> {}
						then
							/* @OnFail("2.2.8 Real/derivative variables but no Derivatives declared at line %s",
								md.modelStructure.location) */
							( structRefs <> {} )

							and
							/* @OnFail("2.2.8 Derivatives do not match Real/derivative variables at line %s",
								md.modelStructure.location) */
							( structRefs = derivativeRefs )
						else
							/* @OnFail("2.2.8 Derivatives declared, but no Real/derivative variables at line %s",
								md.modelStructure.location) */
							( structRefs = {} )
			),

			-- InitalUnknowns must include all output (approx/calculated), calculatedParameters and 
			-- all continuous-time states and derivatives that are approx/calculated.
			(
				let ctVars = continuousTimeStates(eModelVariables),
					sdVars = stateDerivatives(eModelVariables),
					initRefs = { sv.base.valueReference | sv in seq eModelVariables &
						(sv.base.causality = <output>
							and sv.base.initial in set { <approx>, <calculated> })

						or (sv.base.causality = <calculatedParameter>)

						or (sv in set ctVars
							and sv.base.initial in set { <approx>, <calculated> })

						or (sv in set sdVars
							and sv.base.initial in set { <approx>, <calculated> }) }
				in
					initRefs <> {} =>
						let ius = [ iu |
							iu in seq nilSeq[Unknown](md.modelStructure.unknowns) &
							iu.kind = <InitialUnknown> ] in
						{
							-- @OnFail("2.2.8 InitialUnknowns must include refs: %s", initRefs)
							( ius <> [] ),

							-- @OnFail("2.2.8 InitialUnknowns must include refs: %s", initRefs)
							( { u.valueReference | u in seq ius } subset initRefs )
						} = {true}
			),

			(
				md.modelStructure.eventIndicators <> nil =>
				{
					exists sv in seq eModelVariables &
						/* @OnFail("2.2.8 EventIndicator valueReference %s invalid at line %s",
							ei.valueReference, ei.location)	 */
						( sv.base.valueReference = ei.valueReference )

					| ei in seq md.modelStructure.eventIndicators
				}
				= {true}
			),

			(
				md.modelStructure.unknowns <> nil => dunion
				{
					{
						-- @OnFail("2.2.8 Unknown dependency %s invalid at line %s", vr, unk.location)
						( exists sv in seq eModelVariables & sv.base.valueReference = vr )

						| vr in seq nilSeq[fmi3ValueReference](unk.dependencies)
					}

					| unk in seq nilSeq[Unknown](md.modelStructure.unknowns)
				}
				= {true}
			),

			(
				md.graphicalRepresentation <> nil =>
				{
					/* @OnFail("2.2.8 Graphical terminal %s not declared in Terminals at line %s",
						gterm.name, gterm.location) */
					( md.terminals <> nil and
					  exists term in seq md.terminals & term.name = gterm.name )

					| gterm in seq md.graphicalRepresentation.terminals
				}
				= {true}
			)
		} = {true};

	/**
	 * Check that all variables' declaredTypes are defined, that the variables' types match
	 * the declared types.
	 */
	typeCheck: seq1 of Variable * [set1 of VariableType] +> bool
	typeCheck(variables, typedefs) ==
		{
			sv.base.declaredType <> nil =>
				let matchingTypes = { td |
					td in set nilSet[VariableType](typedefs) &
					td.base.name = sv.base.declaredType } in
				{
					/* @OnFail("2.2.3 Typedefs have multiple matching names: %s",
						{ m.base.name | m in set matchingTypes } ) */
					( matchingTypes <> {} => card matchingTypes = 1 ),

					/* @OnFail("2.2.3 Declared type %s unknown at line %s",
						sv.base.declaredType, sv.base.location ) */
					( card matchingTypes <> 0 ),

					-- The match is has compatible values in the Variable
					card matchingTypes = 1 => let { simpleType } = matchingTypes in
						cases simpleType:
							mk_RealType(-, -, -, mk_fmi3FloatXXAttributes(min, max, -)) ->
								/* @OnFail("2.2.7 Variable %s min/max exceeds RealType %s at line %s",
									sv.base.name, sv.base.declaredType, sv.base.location) */
								( (min <> nil and sv.floatAtts.min <> nil => min <= sv.floatAtts.min)
									and
								  (max <> nil and sv.floatAtts.max <> nil => max >= sv.floatAtts.max) ),

							mk_IntegerType(-, -, -, mk_fmi3IntXXAttributes(min, max)) ->
								/* @OnFail("2.2.7 Variable %s min/max exceeds IntegerType %s at line %s",
									sv.base.name, sv.base.declaredType, sv.base.location) */
								( (min <> nil and sv.floatAtts.min <> nil => min <= sv.floatAtts.min)
									and
								  (max <> nil and sv.floatAtts.max <> nil => max >= sv.floatAtts.max) ),

							others -> true
						end,

					-- The match is the same type as the Variable type and for numerics,
					card matchingTypes = 1 => let { simpleType } = matchingTypes in
						cases simpleType:
							mk_RealType(-, -, -, -) ->
								/* @OnFail("2.2.7 Variable %s, RealType not referenced by Real variable %s at line %s",
									sv.base.name, sv.base.declaredType, sv.base.location) */
								( is_Real(sv) ),

							mk_IntegerType(-, -, -, -) ->
								/* @OnFail("2.2.7 Variable %s, IntegerType not referenced by Integer variable %s at line %s",
									sv.base.name, sv.base.declaredType, sv.base.location) */
								( is_Integer(sv) ),

							mk_BooleanType(-, -) ->
								/* @OnFail("2.2.7 Variable %s, BooleanType not referenced by Boolean variable %s at line %s",
									sv.base.name, sv.base.declaredType, sv.base.location) */
								( is_Boolean(sv) ),

							mk_StringType(-, -) ->
								/* @OnFail("2.2.7 Variable %s, StringType not referenced by String variable %s at line %s",
									sv.base.name, sv.base.declaredType, sv.base.location) */
								( is_String(sv) ),

							mk_BinaryType(-,-, -, -) ->
								/* @OnFail("2.2.7 Variable %s, BinaryType not referenced by Binary variable %s at line %s",
									sv.base.name, sv.base.declaredType, sv.base.location) */
								( is_Binary(sv) ),

							mk_EnumerationType(-, -, -, -) ->
								/* @OnFail("2.2.7 Variable %s, EnumerationType not referenced by Enumeration variable %s at line %s",
									sv.base.name, sv.base.declaredType, sv.base.location) */
								( is_Enumeration(sv) ),

							mk_ClockType(-, -, -) ->
								/* @OnFail("2.2.7 Variable %s, StringType not referenced by String variable %s at line %s",
									sv.base.name, sv.base.declaredType, sv.base.location) */
								( is_Clock(sv) )
						end
				} = {true}
			| sv in seq variables
		} = {true};
