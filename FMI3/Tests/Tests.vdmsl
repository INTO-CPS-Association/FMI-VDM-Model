/**
 * This file is part of the INTO-CPS toolchain.
 *
 * Copyright (c) 2017-2019, INTO-CPS Association,
 * c/o Professor Peter Gorm Larsen, Department of Engineering
 * Finlandsgade 22, 8200 Aarhus N.
 *
 * All rights reserved.
 *
 * THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR
 * THIS INTO-CPS ASSOCIATION PUBLIC LICENSE VERSION 1.0.
 * ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES
 * RECIPIENT'S ACCEPTANCE OF THE OSMC PUBLIC LICENSE OR THE GPL 
 * VERSION 3, ACCORDING TO RECIPIENTS CHOICE.
 *
 * The INTO-CPS toolchain  and the INTO-CPS Association Public License are
 * obtained from the INTO-CPS Association, either from the above address, from
 * the URLs: http://www.into-cps.org, and in the INTO-CPS toolchain distribution.
 * GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without
 * even the implied warranty of  MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH IN THE
 * BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF
 * THE INTO-CPS ASSOCIATION.
 *
 * See the full INTO-CPS Association Public License conditions for more details.
 */

/**
 * Various model tests
 */
traces
	/**
	 * Test the ScalarInvariant invariant function with all possible inputs - should return true/false (total)
	 * for every combination. Variable types are tested with "start" both defined and undefined.
	 */
	SVInvariantTotal:
		let c : [Causality] in
		let v : [Variability] in
		let i : [Initial] in
		let a : fmi3Annotation = [ mk_Tool(0, "A", mk_token(1)) ] in
		let t in set
		{
			mk_Real(
				mk_fmi3VariableBase(0, nil, a, "name", 1234, nil, c, v, i, nil, nil, nil, nil),
				mk_fmi3RealVariableAttributes(nil, nil),
				mk_fmi3RealAttributes(nil, nil, nil, nil, nil),
				mk_fmi3FloatXXAttributes(nil, nil, nil),
				1.23),

			mk_Integer(
				mk_fmi3VariableBase(0, nil, a, "name", 1234, nil, c, v, i, nil, nil, nil, nil),
				mk_fmi3IntegerAttributes(nil),
				mk_fmi3IntXXAttributes(nil, nil),
				123)
		}
		in
			isValidScalarVariable(t);

functions
	/**
	 * Helper to make Reals for test below.
	 */
	mkVariable: Causality * Variability * [Initial] * [real] +> Real
	mkVariable(causality, variability, initial, start) ==
		mk_Real(
			mk_fmi3VariableBase(0, nil, nil, "name", 1234, nil, causality, variability, initial, nil, nil, nil, nil),
			mk_fmi3RealVariableAttributes(nil, nil),
			mk_fmi3RealAttributes(nil, nil, nil, nil, nil),
			mk_fmi3FloatXXAttributes(nil, nil, nil),
			start);

	/**
	 * Test the ScalarVariable invariant for the table on p48, where the SV is valid or not
	 * for particular "initial" values, given a combination of causality and variability.
	 */
	testCausalityVariabilityInitial: () +> bool
	testCausalityVariabilityInitial() ==
		let nilv   = nil,
		    startv = 1.0
		in
			forall causality : Causality &
				forall variability : Variability &
					-- @Printf("Testing %s/%s ...\n", causality, variability)
					-- @OnFail("Test %s/%s failed", causality, variability)
					(cases causality:
						<parameter> ->
							cases variability:
								<fixed>, <tunable> ->
									isValidScalarVariable(mkVariable(causality, variability, <exact>, startv)) and
									not isValidScalarVariable(mkVariable(causality, variability, <approx>, startv)) and
									not isValidScalarVariable(mkVariable(causality, variability, <calculated>, nilv)),

								<constant>, <discrete>, <continuous> ->
									forall initial : Initial &
										not isValidScalarVariable(mkVariable(causality, variability, initial, nilv))
							end,

						<calculatedParameter> ->
							cases variability:
								<fixed>, <tunable> ->
									isValidScalarVariable(mkVariable(causality, variability, <calculated>, nilv)) and
									isValidScalarVariable(mkVariable(causality, variability, <approx>, startv)) and
									not isValidScalarVariable(mkVariable(causality, variability, <exact>, nilv)),

								<constant>, <discrete>, <continuous> ->
									forall initial : Initial &
										not isValidScalarVariable(mkVariable(causality, variability, initial, nilv))
							end,

						<input> ->
							cases variability:
								<discrete>, <continuous> ->
									isValidScalarVariable(mkVariable(causality, variability, nil, startv)) and
									not isValidScalarVariable(mkVariable(causality, variability, <calculated>, nilv)) and
									not isValidScalarVariable(mkVariable(causality, variability, <approx>, startv)) and
									not isValidScalarVariable(mkVariable(causality, variability, <exact>, nilv)),

								<constant>, <fixed>, <tunable> ->
									forall initial : Initial &
										not isValidScalarVariable(mkVariable(causality, variability, initial, nilv))
							end,

						<output> ->
							cases variability:
								<constant> ->
									isValidScalarVariable(mkVariable(causality, variability, <exact>, startv)) and
									not isValidScalarVariable(mkVariable(causality, variability, <calculated>, nilv)) and
									not isValidScalarVariable(mkVariable(causality, variability, <approx>, startv)),

								<discrete>, <continuous> ->
									isValidScalarVariable(mkVariable(causality, variability, <calculated>, nilv)) and
									isValidScalarVariable(mkVariable(causality, variability, <exact>, startv))
									and isValidScalarVariable(mkVariable(causality, variability, <approx>, startv)),

								<fixed>, <tunable> ->
									forall initial : Initial &
										not isValidScalarVariable(mkVariable(causality, variability, initial, nilv))
							end,

						<local> ->
							cases variability:
								<constant> ->
									isValidScalarVariable(mkVariable(causality, variability, <exact>, startv)) and
									not isValidScalarVariable(mkVariable(causality, variability, <calculated>, nilv)) and
									not isValidScalarVariable(mkVariable(causality, variability, <approx>, startv)),

								<fixed>, <tunable> ->
									isValidScalarVariable(mkVariable(causality, variability, <calculated>, nilv)) and
									isValidScalarVariable(mkVariable(causality, variability, <approx>, startv)) and
									not isValidScalarVariable(mkVariable(causality, variability, <exact>, startv)),

								<discrete>, <continuous> ->
									isValidScalarVariable(mkVariable(causality, variability, <calculated>, nilv)) and
									isValidScalarVariable(mkVariable(causality, variability, <approx>, startv)) and
									isValidScalarVariable(mkVariable(causality, variability, <exact>, startv))
							end,

						<independent> ->
							forall initial : Initial &
								not isValidScalarVariable(mkVariable(causality, variability, initial, nilv))
					end);

	testStructuredNames: () +> seq of bool
	testStructuredNames() ==
	[
		isValidStructuredName("der(a.b.c,3)"),
		isValidStructuredName("der(a)"),
		isValidStructuredName("a"),
		isValidStructuredName("'!#$'"),
		isValidStructuredName("a[1]"),
		isValidStructuredName("_abc[1,2,3]"),
		isValidStructuredName("xyz.abc.def[1,2,3]"),
		isValidStructuredName("'!!!\\?'.a10[1,2,3]"),
		isValidStructuredName("a20[1,2,3].def[1]"),
		isValidStructuredName("'\\\"\\?\\\\'"),
		not isValidStructuredName("a[1,]"),
		not isValidStructuredName("[1]"),
		not isValidStructuredName("'1@")
	];

functions
	/**
	 * Run all tests and check that they pass.
	 */
	tests: () +> seq of bool
	tests() ==
	[
		testCausalityVariabilityInitial()
		-- isValidFMIModelDescription(example)
	]
	^	testStructuredNames()

	post elems RESULT = {true};
