/**
 * This file is part of the INTO-CPS toolchain.
 *
 * Copyright (c) 2017-2019, INTO-CPS Association,
 * c/o Professor Peter Gorm Larsen, Department of Engineering
 * Finlandsgade 22, 8200 Aarhus N.
 *
 * All rights reserved.
 *
 * THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR
 * THIS INTO-CPS ASSOCIATION PUBLIC LICENSE VERSION 1.0.
 * ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES
 * RECIPIENT'S ACCEPTANCE OF THE OSMC PUBLIC LICENSE OR THE GPL 
 * VERSION 3, ACCORDING TO RECIPIENTS CHOICE.
 *
 * The INTO-CPS toolchain  and the INTO-CPS Association Public License are
 * obtained from the INTO-CPS Association, either from the above address, from
 * the URLs: http://www.into-cps.org, and in the INTO-CPS toolchain distribution.
 * GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without
 * even the implied warranty of  MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH IN THE
 * BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF
 * THE INTO-CPS ASSOCIATION.
 *
 * See the full INTO-CPS Association Public License conditions for more details.
 */

/**
 * 2.2.4 Definition of Types (TypeDefinitions)
 */
types
	fmi3TypeDefinitionBase ::
		name				: NormalizedString1
		description			: [AnyString];

	fmi3RealAttributes ::
		quantity			: [NormalizedString1]
		unit				: [NormalizedString1]
		displayUnit			: [NormalizedString1]
		relativeQuantity	: [bool]
		unbounded			: [bool];

	fmi3FloatXXAttributes ::
		min					: [real]
		max					: [real]
		nominal				: [real];

	fmi3IntegerAttributes ::
		quantity			: [NormalizedString1];

	fmi3IntXXAttributes ::
		min					: [int]
		max					: [int];

	fmi3ClockAttributes ::
		clockType			: <synchronousTime> | <communicationPoint>
		priority			: nat
		periodic			: [bool]
		strict				: [bool]
		intervalCounter		: [nat]
		shiftCounter		: [nat]
		resolution			: [nat];

	-- The common attributes above are used to compose various types:

	RealType ::
		base				: fmi3TypeDefinitionBase
		kind				: <Float64> | <Float32>
		realAtts			: fmi3RealAttributes
		floatAtts			: fmi3FloatXXAttributes;

	IntegerType ::
		base				: fmi3TypeDefinitionBase
		kind				: <Int64> | <Int32> | <Int16> | <Int8> | <UInt64> | <UInt32> | <UInt16> | <UInt8> 
		integerAtts			: fmi3IntegerAttributes
		intAtts				: fmi3IntXXAttributes;

	BooleanType ::
		base				: fmi3TypeDefinitionBase;

	StringType ::
		base				: fmi3TypeDefinitionBase;

	BinaryType ::
		base				: fmi3TypeDefinitionBase
		mimeType			: [NormalizedString1]
		maxSize				: nat;

	ClockType ::
		base				: fmi3TypeDefinitionBase
		clockAttrs			: fmi3ClockAttributes;

	Item ::
		name				: NormalizedString1
		value				: int
		description			: [AnyString];

	EnumerationType ::
		base				: fmi3TypeDefinitionBase
		quantity			: [NormalizedString1]
		items				: seq1 of Item;

	VariableType = RealType | IntegerType | BooleanType | StringType | BinaryType | EnumerationType | ClockType;


functions
	isValidType: VariableType +> bool
	isValidType(stype) ==
		cases stype:
			mk_RealType(-, -, mk_fmi3RealAttributes(-, unit, dunit, -, -), mk_fmi3FloatXXAttributes(min, max, -)) ->
			{
				-- @OnFail("2.2.4 Type %s, Float max %s not >= min %s", stype.base.name, max, min)
				( max <> nil and min <> nil => max >= min ),

				-- @OnFail("2.2.4 Type %s, Real unit must be defined for displayUnit %s", stype.base.name, dunit)
				( dunit <> nil => unit <> nil )
			} = {true},

			mk_IntegerType(-, -, -, mk_fmi3IntXXAttributes(min, max)) ->
				-- @OnFail("2.2.4 Type %s, Integer max %s not >= min %s", stype.base.name, max, min)
				( max <> nil and min <> nil => max >= min ),

			-- Items of an enumeration as a sequence of "name" and "value" pairs. The
			-- values can be any integer number, but must be unique within the same
			-- enumeration (in order that the mapping between "name" and "value" is
			-- bijective). An Enumeration element must have at least one Item.

			mk_EnumerationType(-, -, items) ->
				-- @OnFail("2.2.4 Type %s, Enumeration item name/values do not form a bijection", stype.base.name)
				(
					card { i.name | i in seq items } = len items
					and	card { i.value | i in seq items } = len items
				),

			others -> true		-- String and Boolean
		end;

	isValidTypeDefinitions: [set1 of VariableType] +> bool
	isValidTypeDefinitions(defs) ==
		defs <> nil =>
			{
				/* @OnFail("2.2.4 TypeDefinitions names are not unique: %s",
					{ a.name | a, b in set defs & a <> b and a.name = b.name }) */
				( card { stype.base.name | stype in set defs } = card defs )
			}
			union
			{
				-- @OnFail("2.2.4 TypeDefinition %s invalid at line %s", stype.name, stype.location)
				( isValidType(stype) )

				| stype in set defs
			} = {true};

