/**
 * This file is part of the INTO-CPS toolchain.
 *
 * Copyright (c) 2017-2019, INTO-CPS Association,
 * c/o Professor Peter Gorm Larsen, Department of Engineering
 * Finlandsgade 22, 8200 Aarhus N.
 *
 * All rights reserved.
 *
 * THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR
 * THIS INTO-CPS ASSOCIATION PUBLIC LICENSE VERSION 1.0.
 * ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES
 * RECIPIENT'S ACCEPTANCE OF THE OSMC PUBLIC LICENSE OR THE GPL 
 * VERSION 3, ACCORDING TO RECIPIENTS CHOICE.
 *
 * The INTO-CPS toolchain  and the INTO-CPS Association Public License are
 * obtained from the INTO-CPS Association, either from the above address, from
 * the URLs: http://www.into-cps.org, and in the INTO-CPS toolchain distribution.
 * GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without
 * even the implied warranty of  MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH IN THE
 * BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF
 * THE INTO-CPS ASSOCIATION.
 *
 * See the full INTO-CPS Association Public License conditions for more details.
 */

/**
 * 4.3.1 Definition of a ModelExchange section of an FMU.
 */
types
	ModelExchangeKind = <ModelExchange>;	-- May be others one day, see CoSimulationKind

	ModelExchange ::
		base								: fmi3InterfaceType
		kind								: ModelExchangeKind
		completedIntegratorStepNotNeeded	: [bool];

functions
	/**
	 * Check ModelExchange values.
	 */
	isValidModelExchange: [ModelExchange] +> bool
	isValidModelExchange(me) ==
		me <> nil =>
		{
			-- @OnFail("3.3.1 ModelExchange annotations invalid at line %s", me.base.location)
			( isValidVendorAnnotation(me.base.annotations) ),

			/* @OnFail("3.3.1 ModelExchange modelIdentifer %s not valid C variable name at line %s",
						 me.base.modelIdentifier, me.base.location) */
			( me.base.modelIdentifier <> ""
			  and me.base.modelIdentifier(1) in set elems NONDIGITS )
		}
		= {true};
