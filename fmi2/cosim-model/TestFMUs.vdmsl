/*********************************************************************************
 *
 *	Copyright (c) 2017-2022, INTO-CPS Association,
 *	c/o Professor Peter Gorm Larsen, Department of Engineering
 *	Finlandsgade 22, 8200 Aarhus N.
 *
 *	MIT Licence:
 *
 *	Permission is hereby granted, free of charge, to any person obtaining a copy of
 *	this software and associated documentation files (the "Software"), to deal in
 *	the Software without restriction, including without limitation the rights to use,
 *	copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 *	Software, and to permit persons to whom the Software is furnished to do so,
 *	subject to the following conditions:
 *
 *	The above copyright notice and this permission notice shall be included in all
 *	copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 *	INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 *	PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *	OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 *	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *	SPDX-License-Identifier: MIT
 *
 *********************************************************************************/

/**
 * FMUs to test CoSimulation and functions for loop searching.
 */
values
	loc : Location = mk_Location("?", 1);

	FMU1 = mk_FmiModelDescription
	(
		loc, "2.0", "FMU1", "GUID", nil, nil, nil, nil, nil, nil, nil, nil, nil,

		nil,

		nil, nil,

		nil,

		nil,

		nil,

		nil,

		[
			mk_ScalarVariable(loc, "A", 0, nil, <input>, nil, nil, nil,
					mk_Real(loc, nil, nil, nil, nil, nil, nil, nil, nil, nil, 0, nil, nil), nil),
			mk_ScalarVariable(loc, "B", 0, nil, <output>, nil, nil, nil,
					mk_Real(loc, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil), nil)
		],

		mk_ModelStructure
		(
			loc,
			[ mk_Unknown(loc, 2, [1], [<dependent>]) ],		-- B depends on A
			nil,
			[ mk_Unknown(loc, 2, [1], [<dependent>]) ]		-- B depends on A
		)
	);

	FMU2 = mk_FmiModelDescription
	(
		loc, "2.0", "FMU2", "GUID", nil, nil, nil, nil, nil, nil, nil, nil, nil,

		nil,

		nil, nil,

		nil,

		nil,

		nil,

		nil,

		[
			mk_ScalarVariable(loc, "C", 0, nil, <input>, nil, nil, nil,
					mk_Real(loc, nil, nil, nil, nil, nil, nil, nil, nil, nil, 0, nil, nil), nil),
			mk_ScalarVariable(loc, "D", 0, nil, <output>, nil, nil, nil,
					mk_Real(loc, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil), nil)
		],

		mk_ModelStructure
		(
			loc,
			[ mk_Unknown(loc, 2, [1], [<dependent>]) ],		-- D depends on C
			nil,
			[ mk_Unknown(loc, 2, [1], [<dependent>]) ]		-- D depends on C
		)
	);

	COSIM = mk_CoSimulationConfig
	(
		[ FMU1, FMU2 ],

		{
			mk_FMUVariable(1, 2) |-> { mk_FMUVariable(2, 1) },	-- FMU1.B -> FMU2.C
			mk_FMUVariable(2, 2) |-> { mk_FMUVariable(1, 1) }	-- FMU2.C -> FMU1.A (loop!)
		},

		{ |-> }
	)

functions
	test: () -> bool
	test() ==
		hasLoops(COSIM, false);
