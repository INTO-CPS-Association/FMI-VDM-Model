/*********************************************************************************
 *
 *	Copyright (c) 2017-2022, INTO-CPS Association,
 *	c/o Professor Peter Gorm Larsen, Department of Engineering
 *	Finlandsgade 22, 8200 Aarhus N.
 *
 *	MIT Licence:
 *
 *	Permission is hereby granted, free of charge, to any person obtaining a copy of
 *	this software and associated documentation files (the "Software"), to deal in
 *	the Software without restriction, including without limitation the rights to use,
 *	copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 *	Software, and to permit persons to whom the Software is furnished to do so,
 *	subject to the following conditions:
 *
 *	The above copyright notice and this permission notice shall be included in all
 *	copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 *	INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 *	PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *	OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 *	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *	SPDX-License-Identifier: MIT
 *
 *********************************************************************************/

/**
 * 3.2.3 State machine (and API tables)
 * 4.2.4 State machine (and API tables)
 */
values
--------------------------------------------------------------------------------
-- Function calls for both Model-exchange and Co-simulation
--------------------------------------------------------------------------------
STATES_fmi2GetTypesPlatform         = { <START>, <END>, <INSTANTIATED>, <INITIALIZATION>, <EVENT_MODE>, <CT_MODE>, <STEP_COMPLETE>, <STEP_IN_PROGRESS>, <STEP_FAILED>, <STEP_CANCELLED>, <TERMINATED>, <ERROR> };
STATES_fmi2GetVersion               = STATES_fmi2GetTypesPlatform;
STATES_fmi2SetDebugLogging          = { <INSTANTIATED>, <INITIALIZATION>, <EVENT_MODE>, <CT_MODE>, <STEP_COMPLETE>, <STEP_IN_PROGRESS>, <STEP_FAILED>, <STEP_CANCELLED>, <TERMINATED>, <ERROR> };
STATES_fmi2Instantiate              = { <START>, <END> };
STATES_fmi2FreeInstance             = { <INSTANTIATED>, <INITIALIZATION>, <EVENT_MODE>, <CT_MODE>, <STEP_COMPLETE>, <STEP_FAILED>, <STEP_CANCELLED>, <TERMINATED>, <ERROR> };
STATES_fmi2SetupExperiment          = { <INSTANTIATED> };
STATES_fmi2EnterInitializationMode  = { <INSTANTIATED> };
STATES_fmi2ExitInitializationMode   = { <INITIALIZATION> };
STATES_fmi2Terminate                = { <EVENT_MODE>, <CT_MODE>, <STEP_COMPLETE>, <STEP_FAILED> };
STATES_fmi2Reset                    = STATES_fmi2FreeInstance;
STATES_fmi2GetReal                  = { <INITIALIZATION>, <EVENT_MODE>, <CT_MODE>, <STEP_COMPLETE>, <STEP_FAILED>, <STEP_CANCELLED>, <TERMINATED>, <ERROR> };
STATES_fmi2GetInteger               = STATES_fmi2GetReal;
STATES_fmi2GetBoolean               = STATES_fmi2GetReal;
STATES_fmi2GetString                = STATES_fmi2GetReal;
STATES_fmi2SetReal                  = { <INSTANTIATED>, <INITIALIZATION>, <EVENT_MODE>, <CT_MODE>, <STEP_COMPLETE> };
STATES_fmi2SetInteger               = { <INSTANTIATED>, <INITIALIZATION>, <EVENT_MODE>, <STEP_COMPLETE> };
STATES_fmi2SetBoolean               = STATES_fmi2SetInteger;
STATES_fmi2SetString                = STATES_fmi2SetInteger;
STATES_fmi2GetFMUstate              = STATES_fmi2FreeInstance;
STATES_fmi2SetFMUstate              = STATES_fmi2FreeInstance;
STATES_fmi2FreeFMUstate             = STATES_fmi2FreeInstance;
STATES_fmi2SerializedFMUstateSize   = STATES_fmi2FreeInstance;
STATES_fmi2SerializeFMUstate        = STATES_fmi2FreeInstance;
STATES_fmi2DeSerializeFMUstate      = STATES_fmi2FreeInstance;
STATES_fmi2GetDirectionalDerivative = { <INITIALIZATION>, <EVENT_MODE>, <CT_MODE>, <STEP_COMPLETE>, <STEP_FAILED>, <STEP_CANCELLED>, <TERMINATED>, <ERROR> }; 

------------------------------------------------------------------------------
-- Function calls for Model-exchange
------------------------------------------------------------------------------
STATES_fmi2EnterEventMode           = { <EVENT_MODE>, <CT_MODE> };
STATES_fmi2NewDiscreteStates        = { <EVENT_MODE> };
STATES_fmi2EnterContinuousTimeMode  = { <EVENT_MODE> };
STATES_fmi2CompletedIntegratorStep  = { <CT_MODE> };
STATES_fmi2SetTime                  = { <EVENT_MODE>, <CT_MODE> };
STATES_fmi2SetContinuousStates      = { <CT_MODE> };
STATES_fmi2GetEventIndicators       = { <INITIALIZATION>, <EVENT_MODE>, <CT_MODE>, <TERMINATED>, <ERROR> };
STATES_fmi2GetContinuousStates      = STATES_fmi2GetEventIndicators;
STATES_fmi2GetDerivatives           = { <INITIALIZATION>, <EVENT_MODE>, <CT_MODE>, <TERMINATED>, <ERROR> };
STATES_fmi2GetNominalsOfContinuousStates = {  <INSTANTIATED>, <EVENT_MODE>, <CT_MODE>, <TERMINATED>, <ERROR> };

------------------------------------------------------------------------------
-- Function calls for Co-simulation
------------------------------------------------------------------------------
STATES_fmi2SetRealInputDerivatives  = { <INSTANTIATED>, <INITIALIZATION>, <STEP_COMPLETE> };
STATES_fmi2GetRealOutputDerivatives = { <STEP_COMPLETE>, <STEP_FAILED>, <STEP_CANCELLED>, <TERMINATED>, <ERROR> };
STATES_fmi2DoStep                   = { <STEP_COMPLETE> };
STATES_fmi2CancelStep               = { <STEP_IN_PROGRESS> };
STATES_fmi2GetStatus                = { <STEP_COMPLETE>, <STEP_IN_PROGRESS>, <STEP_FAILED>, <TERMINATED> };
STATES_fmi2GetRealStatus            = STATES_fmi2GetStatus;
STATES_fmi2GetIntegerStatus         = STATES_fmi2GetStatus;
STATES_fmi2GetBooleanStatus         = STATES_fmi2GetStatus;
STATES_fmi2GetStringStatus          = STATES_fmi2GetStatus;

