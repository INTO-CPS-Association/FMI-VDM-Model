/*********************************************************************************
 *
 *	Copyright (c) 2017-2022, INTO-CPS Association,
 *	c/o Professor Peter Gorm Larsen, Department of Engineering
 *	Finlandsgade 22, 8200 Aarhus N.
 *
 *	MIT Licence:
 *
 *	Permission is hereby granted, free of charge, to any person obtaining a copy of
 *	this software and associated documentation files (the "Software"), to deal in
 *	the Software without restriction, including without limitation the rights to use,
 *	copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 *	Software, and to permit persons to whom the Software is furnished to do so,
 *	subject to the following conditions:
 *
 *	The above copyright notice and this permission notice shall be included in all
 *	copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 *	INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 *	PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *	OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 *	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *	SPDX-License-Identifier: MIT
 *
 *********************************************************************************/

/**
 * 3.2.3 State Machine of Calling Sequence (Model Exchange)
 * 4.2.4 State Machine of Calling Sequence (Co-simulation)
 */
functions
	-- State transition validation functions, where XXX in the Standard is a
	-- pair of predicates called varsXXX and isXXX.

	varsSEA: fmi2Component * seq of fmi2ValueReference * Kind +> bool
	varsSEA(c, vrs, kind) ==
		forall vr in seq vrs & isSEA(c, vr, kind);

	isSEA: fmi2Component * fmi2ValueReference * Kind +> bool
	isSEA(c, vr, kind) ==
		let sv = lookup(c.eModelVariables, vr, kind) in
			sv <> nil and
			sv.variability <> <constant>
			and sv.initial in set { <exact>, <approx> };


	varsSE: fmi2Component * seq of fmi2ValueReference * Kind +> bool
	varsSE(c, vrs, kind) ==
		forall vr in seq vrs & isSE(c, vr, kind);

	isSE: fmi2Component * fmi2ValueReference * Kind +> bool
	isSE(c, vr, kind) ==
		let sv = lookup(c.eModelVariables, vr, kind) in
			sv <> nil and
			sv.variability <> <constant>
			and (sv.causality = <input>
				 or sv.initial = <exact>);


	varsINC: fmi2Component * seq of fmi2ValueReference * Kind +> bool
	varsINC(c, vrs, kind) ==
		forall vr in seq vrs & isINC(c, vr, kind);

	isINC: fmi2Component * fmi2ValueReference * Kind +> bool
	isINC(c, vr, kind) ==
		let sv = lookup(c.eModelVariables, vr, kind) in
			sv <> nil and
			is_Real(sv.fmi2ScalarVariable)
			and sv.causality = <input>
			and sv.variability = <continuous>;


	varsINI: fmi2Component * seq of fmi2ValueReference * Kind +> bool
	varsINI(c, vrs, kind) ==
		forall vr in seq vrs & isINI(c, vr, kind);

	isINI: fmi2Component * fmi2ValueReference * Kind +> bool
	isINI(c, vr, kind) ==
		let sv = lookup(c.eModelVariables, vr, kind) in
			sv <> nil and
			((sv.causality = <input>
				and sv.fmi2ScalarVariable.derivative <> nil)
			  or (sv.variability <> <constant>
				and sv.initial in set { <exact>, <approx> }));


	varsIN: fmi2Component * seq of fmi2ValueReference * Kind +> bool
	varsIN(c, vrs, kind) ==
		forall vr in seq vrs & isIN(c, vr, kind);

	isIN: fmi2Component * fmi2ValueReference * Kind +> bool
	isIN(c, vr, kind) ==
		let sv = lookup(c.eModelVariables, vr, kind) in
			sv <> nil and
			if c.fmuType = <fmi2ModelExchange>
			then
				(sv.variability = <discrete>
					and sv.causality = <input>)
				or sv.variability = <tunable>
			else
				vr in set c.initialUnknowns
				or (sv.causality = <input>
				 	 or (sv.causality = <parameter>
						 and sv.variability = <tunable>));


	varsINIT: fmi2Component * seq of fmi2ValueReference * Kind +> bool
	varsINIT(c, vrs, kind) ==
		forall vr in seq vrs & isINIT(c, vr, kind);

	isINIT: fmi2Component * fmi2ValueReference * Kind +> bool
	isINIT(c, vr, kind) ==
		let sv = lookup(c.eModelVariables, vr, kind) in
			sv <> nil and
			sv.causality = <output>
			or vr in set c.initialUnknowns;


	varsINIE: fmi2Component * seq of fmi2ValueReference * Kind +> bool
	varsINIE(c, vrs, kind) ==
		forall vr in seq vrs & isINIE(c, vr, kind);

	isINIE: fmi2Component * fmi2ValueReference * Kind +> bool
	isINIE(c, vr, kind) ==
		let sv = lookup(c.eModelVariables, vr, kind) in
			sv <> nil and
			sv.variability <> <constant>
			and sv.initial = <exact>;
