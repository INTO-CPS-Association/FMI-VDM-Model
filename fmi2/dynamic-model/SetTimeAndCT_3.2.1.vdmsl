/*********************************************************************************
 *
 *	Copyright (c) 2017-2022, INTO-CPS Association,
 *	c/o Professor Peter Gorm Larsen, Department of Engineering
 *	Finlandsgade 22, 8200 Aarhus N.
 *
 *	MIT Licence:
 *
 *	Permission is hereby granted, free of charge, to any person obtaining a copy of
 *	this software and associated documentation files (the "Software"), to deal in
 *	the Software without restriction, including without limitation the rights to use,
 *	copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 *	Software, and to permit persons to whom the Software is furnished to do so,
 *	subject to the following conditions:
 *
 *	The above copyright notice and this permission notice shall be included in all
 *	copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 *	INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 *	PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *	OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 *	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *	SPDX-License-Identifier: MIT
 *
 *********************************************************************************/

/**
 * 3.2.1 Providing Independent Variables and Re-initialization of Caching
 */
functions
	/**
	 * Implementation and API for fmi2SetTime.
	 */
	fmi2SetTime_Impl: fmi2Component * fmi2Real +> fmi2Status * fmi2Component
	fmi2SetTime_Impl(c, time) ==
		mk_(<fmi2OK>, mu(c,
			currentTime |-> time))
	pre
		c.fmuType = <fmi2ModelExchange>
		and c.fmuState in set STATES_fmi2SetTime;

	fmi2SetTime: fmi2Component * fmi2Real +> fmi2Status * [fmi2Component]
	fmi2SetTime(c, time) ==
		if c.fmuType <> <fmi2ModelExchange>
		then let - = logAPIError(c, "Cannot call fmi2SetTime for fmi2CoSimulation", []) in
			mk_(<fmi2Error>, nil)
		elseif c.fmuState not in set STATES_fmi2SetTime
		then let - = logAPIError(c, "Cannot call fmi2SetTime in state %s", [c.fmuState]) in
			mk_(<fmi2Error>, nil)
		else
			fmi2SetTime_Impl(c, time)
	 post
	 	RESULT.#1 <> <fmi2OK> <=> RESULT.#2 = nil;


	/**
	 * Implementation and API for fmi2SetContinuousStates.
	 */
	fmi2SetContinuousStates_Impl: fmi2Component * seq of fmi2Real * nat +> fmi2Status * fmi2Component
	fmi2SetContinuousStates_Impl(c, x, nx) ==
		let modifiers = { aliasTag(c.eModelVariables(c.continuousTimeStates(i))) |-> x(i) | i in set inds x } in 
			mk_(<fmi2OK>, mu(c,
				variables |-> c.variables ++ modifiers))
	pre
		c.fmuType = <fmi2ModelExchange>
		and c.fmuState in set STATES_fmi2SetContinuousStates
		and nx = len x
		and nx = len c.continuousTimeStates;

	fmi2SetContinuousStates: fmi2Component * seq of fmi2Real * nat +> fmi2Status * [fmi2Component]
	fmi2SetContinuousStates(c, x, nx) ==
		if c.fmuType <> <fmi2ModelExchange>
		then let - = logAPIError(c, "Cannot call fmi2SetContinuousStates for fmi2CoSimulation", []) in
			mk_(<fmi2Error>, nil)
		elseif c.fmuState not in set STATES_fmi2SetContinuousStates
		then let - = logAPIError(c, "Cannot call fmi2SetContinuousStates in state %s", [c.fmuState]) in
			mk_(<fmi2Error>, nil)
		elseif nx <> len x
		then let - = logAPIError(c, "nx and x are not consistent", []) in
			mk_(<fmi2Error>, nil)
		elseif nx <> len c.continuousTimeStates
		then let - = logAPIError(c, "Expecting %s continuous state values", [len c.continuousTimeStates]) in
			mk_(<fmi2Error>, nil)
		else
			fmi2SetContinuousStates_Impl(c, x, nx)
	 post
	 	RESULT.#1 <> <fmi2OK> <=> RESULT.#2 = nil;
