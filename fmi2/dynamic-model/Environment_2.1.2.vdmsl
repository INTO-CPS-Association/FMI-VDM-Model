/*********************************************************************************
 *
 *	Copyright (c) 2017-2022, INTO-CPS Association,
 *	c/o Professor Peter Gorm Larsen, Department of Engineering
 *	Finlandsgade 22, 8200 Aarhus N.
 *
 *	MIT Licence:
 *
 *	Permission is hereby granted, free of charge, to any person obtaining a copy of
 *	this software and associated documentation files (the "Software"), to deal in
 *	the Software without restriction, including without limitation the rights to use,
 *	copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 *	Software, and to permit persons to whom the Software is furnished to do so,
 *	subject to the following conditions:
 *
 *	The above copyright notice and this permission notice shall be included in all
 *	copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 *	INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 *	PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *	OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 *	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *	SPDX-License-Identifier: MIT
 *
 *********************************************************************************/

/**
 * 2.1.2 Platform Dependent Definitions
 */
types
	SolverDerivative ::
		vref					: fmi2ValueReference	-- VRef of base variable
		order					: nat1					-- Order of solver's derivative
		type					: <input> | <output>;

	SolverData ::
		derivatives				: seq of SolverDerivative;

	fmi2ComponentEnvironment ::
		solver					: SolverData
		model					: FmiModelDescription
		calculateValues			: fmi2Component -> fmi2Status * [fmi2Component]
		calculateDoStep			: fmi2Component * fmi2Real * fmi2Real -> fmi2Status * [fmi2Component]
		calculateEvents			: fmi2Component -> fmi2Status * [fmi2Component]

	inv cenv ==
		-- The FMI model is valid
		isValidFMIModelDescription(cenv.model)

		-- And the solver data does not contain any derivatives of SVs that are
		-- already represented in the SV list
		and (forall sd in seq cenv.solver.derivatives &
			not exists idx in set inds cenv.model.modelVariables &
				let mk_(o, b) = getDerivativeBase(idx, cenv.model.modelVariables) in
					sd.order = o and sd.vref = cenv.model.modelVariables(b).valueReference)

		-- And CoSim solver data output derivative orders do not exceed
		-- maxOutputDerivativeOrder
		and (cenv.model.coSimulation <> nil =>
			let max = cenv.model.coSimulation.maxOutputDerivativeOrder in
				max <> nil => forall sd in seq cenv.solver.derivatives &
					sd.type = <output> => sd.order <= max);

	fmi2Component ::
		instanceName			: fmi2String
		fmuType					: fmi2Type
		fmuState				: fmi2State
		callbacks				: fmi2CallbackFunctions
		componentEnvironment	: fmi2ComponentEnvironment

		-- convenience read-only fields, copied from componentEnvironment
		model					: FmiModelDescription
		eModelVariables			: seq1 of ScalarVariable
		continuousTimeStates	: seq of nat1
		initialUnknowns			: set of nat1
		solverDerivatives		: seq of SolverDerivative

		-- state, events and settings
		logCategories			: [set1 of fmi2String]				-- nil means logging off
		variables				: map AliasTag to fmi2Value			-- Raw SV data values
		derivatives				: seq of fmi2Real					-- Solver derivative data
		eventIndicators			: seq of fmi2Real					-- ME events
		dirty					: bool								-- True if SVs updated but not recalculated
		tolerance				: [fmi2Real]						-- From DefaultExperiment or fmi2SetupExperiment
		isNewEventIteration		: bool								-- Used in ME
		eventInfo				: fmi2EventInfo						-- Used in ME and CS?

		-- time values
		startTime				: [real]
		stopTime				: [real]
		currentTime				: [real]	-- TODO should be independent SV?

	inv c ==
		(len c.continuousTimeStates = len nilSeq[Unknown](c.model.modelStructure.derivatives))
		and (forall sd in seq c.solverDerivatives & lookup(c.eModelVariables, sd.vref, <Real>) <> nil)
		and (len c.derivatives = len c.solverDerivatives)
		and (len c.eventIndicators = nilNat(c.model.numberOfEventIndicators))
		and (c.isNewEventIteration => c.fmuType = <fmi2ModelExchange>)
		and (c.currentTime <> nil <=> c.startTime <> nil)
		and (c.currentTime <> nil => c.currentTime >= c.startTime)
		and (c.stopTime <> nil and c.startTime <> nil => c.stopTime > c.startTime and c.currentTime <= c.stopTime);
