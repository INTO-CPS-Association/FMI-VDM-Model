/*********************************************************************************
 *
 *	Copyright (c) 2017-2022, INTO-CPS Association,
 *	c/o Professor Peter Gorm Larsen, Department of Engineering
 *	Finlandsgade 22, 8200 Aarhus N.
 *
 *	MIT Licence:
 *
 *	Permission is hereby granted, free of charge, to any person obtaining a copy of
 *	this software and associated documentation files (the "Software"), to deal in
 *	the Software without restriction, including without limitation the rights to use,
 *	copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 *	Software, and to permit persons to whom the Software is furnished to do so,
 *	subject to the following conditions:
 *
 *	The above copyright notice and this permission notice shall be included in all
 *	copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 *	INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 *	PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *	OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 *	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *	SPDX-License-Identifier: MIT
 *
 *********************************************************************************/

/**
 * 2.1.2 Platform Dependent Definitions
 * 2.1.3 Status Returned by Functions
 */
types
	fmi2Real			= real;
	fmi2Integer			= int;
	fmi2Boolean			= bool;
	fmi2Char			= char;
	fmi2String			= seq of fmi2Char;
	-- fmi2Byte			= ?;

	-- Possible values for a ScalarVariable
	fmi2Value	= fmi2Real | fmi2Integer | fmi2Boolean | fmi2String;

	fmi2Type =
		<fmi2ModelExchange> |
		<fmi2CoSimulation>;

	fmi2Status =
		<fmi2OK> |
		<fmi2Warning> |
		<fmi2Discard> |
		<fmi2Error> |
		<fmi2Fatal> |
		<fmi2Pending>;

	fmi2State =
		<START> |
		<INSTANTIATED> |
		<INITIALIZATION> |
		<EVENT_MODE> |
		<CT_MODE> |
		<STEP_COMPLETE> |
		<STEP_IN_PROGRESS> |
		<STEP_FAILED> |
		<STEP_CANCELLED> |
		<TERMINATED> |
		<ERROR> |
		<FATAL> |
		<END>;

	fmi2EventInfo ::
		newDiscreteStatesNeeded				: fmi2Boolean
		terminateSimulation					: fmi2Boolean
		nominalsOfContinuousStatesChanged	: fmi2Boolean
		valuesOfContinuousStatesChanged		: fmi2Boolean
		nextEventTimeDefined				: fmi2Boolean
		nextEventTime						: [fmi2Real]
	inv
		info == info.nextEventTimeDefined <=> info.nextEventTime <> nil;

	fmi2CallbackFunctions ::
		logger					: fmi2Component * fmi2String * fmi2Status * fmi2String * fmi2String * seq of ? +> <VOID>
		allocateMemory			: nat1 * nat1 +> token
		freeMemory				: token +> <VOID>
		stepFinished			: fmi2ComponentEnvironment * fmi2Status +> <VOID>
		componentEnvironment	: fmi2ComponentEnvironment;

