/*********************************************************************************
 *
 *	Copyright (c) 2017-2022, INTO-CPS Association,
 *	c/o Professor Peter Gorm Larsen, Department of Engineering
 *	Finlandsgade 22, 8200 Aarhus N.
 *
 *	MIT Licence:
 *
 *	Permission is hereby granted, free of charge, to any person obtaining a copy of
 *	this software and associated documentation files (the "Software"), to deal in
 *	the Software without restriction, including without limitation the rights to use,
 *	copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 *	Software, and to permit persons to whom the Software is furnished to do so,
 *	subject to the following conditions:
 *
 *	The above copyright notice and this permission notice shall be included in all
 *	copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 *	INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 *	PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *	OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 *	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *	SPDX-License-Identifier: MIT
 *
 *********************************************************************************/

/**
 * 4.2.2 Computation
 */
functions
	/**
	 * Implementation of fmi2DoStep. See API method below.
	 */
	fmi2DoStep_Impl: fmi2Component * fmi2Real * fmi2Real * fmi2Boolean +> fmi2Status * [fmi2Component]
	fmi2DoStep_Impl(c, currentCommunicationPoint, communicationStepSize, -/*noSetFMUStatePriorToCurrentPoint*/) ==
		let mk_(s, c2) = c.componentEnvironment.calculateDoStep(c,  currentCommunicationPoint, communicationStepSize) in
			if s <> <fmi2OK>
			then mk_(s, nil)
			else mk_(s, c2)
	pre
		c.fmuType = <fmi2CoSimulation>
		and c.fmuState in set STATES_fmi2DoStep
		and communicationStepSize > 0.0
		and currentCommunicationPoint >= 0.0
	post
		RESULT.#1 = <fmi2OK> =>
			epsilon(RESULT.#2.currentTime, currentCommunicationPoint + communicationStepSize);


	/**
	 * The fmi2DoStep API. This performs sufficient checks to pass the precondition on the
	 * implementation function, returning an fmi2Status if any checks fail.
	 */
	fmi2DoStep: fmi2Component * fmi2Real * fmi2Real * fmi2Boolean +> fmi2Status * [fmi2Component]
	fmi2DoStep(c, currentCommunicationPoint, communicationStepSize, noSetFMUStatePriorToCurrentPoint) ==
		if c.fmuType <> <fmi2CoSimulation>
		then let - = logAPIError(c, "Cannot call fmi2DoStep for fmi2ModelExchange", []) in
			mk_(<fmi2Error>, nil)
		elseif c.fmuState not in set STATES_fmi2DoStep
		then let - = logAPIError(c, "Cannot call fmi2DoStep in state %s", [c.fmuState]) in
			mk_(<fmi2Error>, nil)
		elseif communicationStepSize <= 0.0
		then let - = logAPIError(c, "Communication step size must be >0", []) in
			mk_(<fmi2Error>, nil)
		elseif currentCommunicationPoint < 0.0
		then let - = logAPIError(c, "Curret communication point must be >=0", []) in
			mk_(<fmi2Error>, nil)
		else
			fmi2DoStep_Impl(c, currentCommunicationPoint, communicationStepSize, noSetFMUStatePriorToCurrentPoint)
	 post
	 	RESULT.#1 <> <fmi2OK> <=> RESULT.#2 = nil;


	/**
	 * Implementation of fmi2CancelStep. See API method below.
	 */
	fmi2CancelStep_Impl: fmi2Component +> fmi2Status * [fmi2Component]
	fmi2CancelStep_Impl(c) ==
		mk_(<fmi2OK>, mu(c, fmuState |-> <STEP_CANCELLED>))
	pre
		c.fmuType = <fmi2CoSimulation>
		and c.fmuState in set STATES_fmi2CancelStep;

	/**
	 * The fmi2CancelStep API. This performs sufficient checks to pass the precondition on the
	 * implementation function, returning an fmi2Status if any checks fail.
	 */
	fmi2CancelStep: fmi2Component +> fmi2Status * [fmi2Component]
	fmi2CancelStep(c) ==
		if c.fmuType <> <fmi2CoSimulation>
		then let - = logAPIError(c, "Cannot call fmi2CancelStep for fmi2ModelExchange", []) in
			mk_(<fmi2Error>, nil)
		elseif c.fmuState not in set STATES_fmi2CancelStep
		then let - = logAPIError(c, "Cannot call fmi2CancelStep in state %s\n", [c.fmuState]) in
			mk_(<fmi2Error>, nil)
	 	else
	 		fmi2CancelStep_Impl(c)
	 post
	 	RESULT.#1 <> <fmi2OK> <=> RESULT.#2 = nil;
