/**
 * This file is part of the INTO-CPS toolchain.
 *
 * Copyright (c) 2017-2019, INTO-CPS Association,
 * c/o Professor Peter Gorm Larsen, Department of Engineering
 * Finlandsgade 22, 8200 Aarhus N.
 *
 * All rights reserved.
 *
 * THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR
 * THIS INTO-CPS ASSOCIATION PUBLIC LICENSE VERSION 1.0.
 * ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES
 * RECIPIENT'S ACCEPTANCE OF THE OSMC PUBLIC LICENSE OR THE GPL 
 * VERSION 3, ACCORDING TO RECIPIENTS CHOICE.
 *
 * The INTO-CPS toolchain  and the INTO-CPS Association Public License are
 * obtained from the INTO-CPS Association, either from the above address, from
 * the URLs: http://www.into-cps.org, and in the INTO-CPS toolchain distribution.
 * GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without
 * even the implied warranty of  MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH IN THE
 * BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF
 * THE INTO-CPS ASSOCIATION.
 *
 * See the full INTO-CPS Association Public License conditions for more details.
 */

/**
 * 2.1.6  Initialization, Termination, and Resetting an FMU
 */
functions
	/**
	 * Implementation and API for fmi2SetupExperiment.
	 */
	fmi2SetupExperiment_Impl: fmi2Component * fmi2Boolean * fmi2Real * fmi2Real * fmi2Boolean * fmi2Real +> fmi2Status * fmi2Component
	fmi2SetupExperiment_Impl(c, toleranceDefined, tolerance, startTime, stopTimeDefined, stopTime) ==
		mk_(<fmi2OK>, mu(c,
			tolerance	|-> if toleranceDefined then tolerance
							elseif c.model.defaultExperiment <> nil
							then c.model.defaultExperiment.tolerance
							else nil,
			startTime	|-> startTime,
			stopTime	|-> if stopTimeDefined then stopTime else nil,
			currentTime	|-> startTime))		-- TODO should set independent variable?
	pre
		c.fmuState in set STATES_fmi2SetupExperiment
		and (stopTimeDefined => stopTime > startTime)
		and (toleranceDefined => tolerance >= 0)
	post
		RESULT.#2.fmuState = <INSTANTIATED>;

	fmi2SetupExperiment: fmi2Component * fmi2Boolean * fmi2Real * fmi2Real * fmi2Boolean * fmi2Real +> fmi2Status * [fmi2Component]
	fmi2SetupExperiment(c, toleranceDefined, tolerance, startTime, stopTimeDefined, stopTime) ==
		if c.fmuState not in set STATES_fmi2SetupExperiment
		then let - = logAPIError(c, "Cannot call fmi2SetupExperiment in state %s", [c.fmuState]) in
			mk_(<fmi2Error>, nil)
		elseif stopTimeDefined and stopTime <= startTime
		then let - = logAPIError(c, "stopTime is not > startTime", []) in
			mk_(<fmi2Error>, nil)
		elseif toleranceDefined and tolerance < 0
		then let - = logAPIError(c, "Tolerance must be >= 0", []) in
			mk_(<fmi2Error>, nil)
		else
			fmi2SetupExperiment_Impl(c, toleranceDefined, tolerance, startTime, stopTimeDefined, stopTime)
	 post
	 	RESULT.#1 <> <fmi2OK> <=> RESULT.#2 = nil;


	/**
	 * Implementation and API for fmi2EnterInitializationMode.
	 */
	fmi2EnterInitializationMode_Impl: fmi2Component +> fmi2Status * fmi2Component
	fmi2EnterInitializationMode_Impl(c) ==
		mk_(<fmi2OK>, mu(c, fmuState |-> <INITIALIZATION>))
	pre
		c.fmuState in set STATES_fmi2EnterInitializationMode
		and c.startTime <> nil
	post
		RESULT.#2.fmuState = <INITIALIZATION>;

	fmi2EnterInitializationMode: fmi2Component +> fmi2Status * [fmi2Component]
	fmi2EnterInitializationMode(c) ==
		if c.fmuState not in set STATES_fmi2EnterInitializationMode
		then let - = logAPIError(c, "Cannot call fmi2EnterInitializationMode in state %s", [c.fmuState]) in
			mk_(<fmi2Error>, nil)
		elseif c.startTime = nil
		then let - = logAPIError(c, "fmi2SetupExperiment has not been called (startTime is nil)?", []) in
			mk_(<fmi2Error>, nil)
		else
			fmi2EnterInitializationMode_Impl(c)
	 post
	 	RESULT.#1 <> <fmi2OK> <=> RESULT.#2 = nil;


	/**
	 * Implementation and API for fmi2ExitInitializationMode.
	 */
	fmi2ExitInitializationMode_Impl: fmi2Component +> fmi2Status * [fmi2Component]
	fmi2ExitInitializationMode_Impl(c) ==
		let mk_(s, c2) = if c.dirty then c.componentEnvironment.calculateValues(c) else mk_(<fmi2OK>, c) in
			if s <> <fmi2OK>
			then mk_(s, nil)
			else mk_(<fmi2OK>, mu(c2,
				fmuState |->
					if c.fmuType = <fmi2CoSimulation>
					then <STEP_COMPLETE>
					else <EVENT_MODE>))
	pre
		c.fmuState in set STATES_fmi2ExitInitializationMode
	post
		RESULT.#2.fmuState =
			if c.fmuType = <fmi2CoSimulation>
			then <STEP_COMPLETE>
			else <EVENT_MODE>;

	fmi2ExitInitializationMode: fmi2Component +> fmi2Status * [fmi2Component]
	fmi2ExitInitializationMode(c) ==
		if c.fmuState not in set STATES_fmi2ExitInitializationMode
		then let - = logAPIError(c, "Cannot call fmi2ExitInitializationMode in state %s", [c.fmuState]) in
			mk_(<fmi2Error>, nil)
		else
			fmi2ExitInitializationMode_Impl(c)
	 post
	 	RESULT.#1 <> <fmi2OK> <=> RESULT.#2 = nil;


	/**
	 * Implementation and API for fmi2Terminate.
	 */
	fmi2Terminate_Impl: fmi2Component +> fmi2Status * fmi2Component
	fmi2Terminate_Impl(c) ==
		mk_(<fmi2OK>, mu(c, fmuState |-> <TERMINATED>))
	pre
		c.fmuState in set STATES_fmi2Terminate
	post
		RESULT.#2.fmuState = <TERMINATED>;

	fmi2Terminate: fmi2Component +> fmi2Status * [fmi2Component]
	fmi2Terminate(c) ==
		if c.fmuState not in set STATES_fmi2Terminate
		then let - = logAPIError(c, "Cannot call fmi2Terminate in state %s", [c.fmuState]) in
			mk_(<fmi2Error>, nil)
		else
			fmi2Terminate_Impl(c)
	 post
	 	RESULT.#1 <> <fmi2OK> <=> RESULT.#2 = nil;


	/**
	 * Implementation and API for fmi2Reset.
	 */
	fmi2Reset_Impl: fmi2Component +> fmi2Status * fmi2Component
	fmi2Reset_Impl(c) ==
		mk_(<fmi2OK>, mu(c,
			variables	|-> startValues(getAliasRefMap(c.eModelVariables)),
			dirty		|-> true,
			fmuState	|-> <INSTANTIATED>))
	pre
		c.fmuState in set STATES_fmi2Reset
	post
		RESULT.#2.fmuState = <INSTANTIATED>;

	fmi2Reset: fmi2Component +> fmi2Status * [fmi2Component]
	fmi2Reset(c) ==
		if c.fmuState not in set STATES_fmi2Reset
		then let - = logAPIError(c, "Cannot call fmi2Reset in state %s", [c.fmuState]) in
			mk_(<fmi2Error>, nil)
		else
			fmi2Reset_Impl(c)
	 post
	 	RESULT.#1 <> <fmi2OK> <=> RESULT.#2 = nil;
	