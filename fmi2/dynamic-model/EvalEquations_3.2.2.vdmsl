/*********************************************************************************
 *
 *	Copyright (c) 2017-2022, INTO-CPS Association,
 *	c/o Professor Peter Gorm Larsen, Department of Engineering
 *	Finlandsgade 22, 8200 Aarhus N.
 *
 *	MIT Licence:
 *
 *	Permission is hereby granted, free of charge, to any person obtaining a copy of
 *	this software and associated documentation files (the "Software"), to deal in
 *	the Software without restriction, including without limitation the rights to use,
 *	copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 *	Software, and to permit persons to whom the Software is furnished to do so,
 *	subject to the following conditions:
 *
 *	The above copyright notice and this permission notice shall be included in all
 *	copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 *	INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 *	PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *	OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 *	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *	SPDX-License-Identifier: MIT
 *
 *********************************************************************************/

/**
 * 3.2.2 Evaluation of Model Equations
 */
functions
	/**
	 * Implementation and API for fmi2EnterEventMode.
	 */
	fmi2EnterEventMode_Impl: fmi2Component +> fmi2Status * fmi2Component
	fmi2EnterEventMode_Impl(c) ==
		mk_(<fmi2OK>, mu(c,
			fmuState |-> <EVENT_MODE>,
			isNewEventIteration |-> true))
	pre
		c.fmuType = <fmi2ModelExchange>
		and c.fmuState in set STATES_fmi2EnterEventMode
	post
		RESULT.#1 = <fmi2OK> => RESULT.#2.fmuState = <EVENT_MODE>;

	fmi2EnterEventMode: fmi2Component +> fmi2Status * [fmi2Component]
	fmi2EnterEventMode(c) ==
		if c.fmuType <> <fmi2ModelExchange>
		then let - = logAPIError(c, "Cannot call fmi2EnterEventMode for fmi2CoSimulation", []) in
			mk_(<fmi2Error>, nil)
		elseif c.fmuState not in set STATES_fmi2EnterEventMode
		then let - = logAPIError(c, "Cannot call fmi2EnterEventMode in state %s", [c.fmuState]) in
			mk_(<fmi2Error>, nil)
	 	else
	 		fmi2EnterEventMode_Impl(c);


	/**
	 * Implementation and API for fmi2NewDiscreteStates.
	 */
	fmi2NewDiscreteStates_Impl: fmi2Component +> fmi2Status * [fmi2Component] * [fmi2EventInfo]
	fmi2NewDiscreteStates_Impl(c) ==
    	let mk_(s, c2) = c.componentEnvironment.calculateEvents(c) in
			mk_(s, c2, if c2 = nil then nil else c2.eventInfo)
	pre
		c.fmuType = <fmi2ModelExchange>
		and c.fmuState in set STATES_fmi2NewDiscreteStates;
		-- and c.eventInfo <> nil;

	fmi2NewDiscreteStates: fmi2Component +> fmi2Status * [fmi2Component] * [fmi2EventInfo]
	fmi2NewDiscreteStates(c) ==
		if c.fmuType <> <fmi2ModelExchange>
		then let - = logAPIError(c, "Cannot call fmi2NewDiscreteStates for fmi2CoSimulation", []) in
			mk_(<fmi2Error>, nil, nil)
		elseif c.fmuState not in set STATES_fmi2NewDiscreteStates
		then let - = logAPIError(c, "Cannot call fmi2NewDiscreteStates in state %s", [c.fmuState]) in
			mk_(<fmi2Error>, nil, nil)
--		elseif c.eventInfo = nil
--		then let - = logAPIError(c, "Cannot call fmi2NewDiscreteStates with no eventInfo", []) in
--			mk_(<fmi2Error>, nil, nil)
	 	else
	 		fmi2NewDiscreteStates_Impl(c);


	/**
	 * Implementation and API for fmi2EnterContinuousTimeMode.
	 */
	fmi2EnterContinuousTimeMode_Impl: fmi2Component +> fmi2Status * fmi2Component
	fmi2EnterContinuousTimeMode_Impl(c) ==
		mk_(<fmi2OK>, mu(c, fmuState |-> <CT_MODE>))
	pre
		c.fmuType = <fmi2ModelExchange>
		and c.fmuState in set STATES_fmi2EnterContinuousTimeMode
	post
		RESULT.#2.fmuState = <CT_MODE>;

	fmi2EnterContinuousTimeMode: fmi2Component +> fmi2Status * [fmi2Component]
	fmi2EnterContinuousTimeMode(c) ==
		if c.fmuType <> <fmi2ModelExchange>
		then let - = logAPIError(c, "Cannot call fmi2EnterContinuousTimeMode for fmi2CoSimulation", []) in
			mk_(<fmi2Error>, nil)
		elseif c.fmuState not in set STATES_fmi2EnterContinuousTimeMode
		then let - = logAPIError(c, "Cannot call fmi2EnterContinuousTimeMode in state %s", [c.fmuState]) in
			mk_(<fmi2Error>, nil)
	 	else
	 		fmi2EnterContinuousTimeMode_Impl(c)
	 post
	 	RESULT.#1 = <fmi2OK> <=> RESULT.#2 <> nil;


	/**
	 * Implementation and API for fmi2CompletedIntegratorStep.
	 */
	fmi2CompletedIntegratorStep_Impl: fmi2Component * fmi2Boolean +> fmi2Status * fmi2Boolean * fmi2Boolean
	fmi2CompletedIntegratorStep_Impl(c, -) ==
		mk_(<fmi2OK>, true, false)	-- TODO!!
	pre
		c.fmuType = <fmi2ModelExchange>
		and c.fmuState in set STATES_fmi2CompletedIntegratorStep
		and not nilBool(c.model.modelExchange.completedIntegratorStepNotNeeded);

	fmi2CompletedIntegratorStep: fmi2Component * fmi2Boolean +> fmi2Status * [fmi2Boolean] * [fmi2Boolean]
	fmi2CompletedIntegratorStep(c, noSetFMUStatePriorToCurrentPoint) ==
		if c.fmuType <> <fmi2ModelExchange>
		then let - = logAPIError(c, "Cannot call fmi2CompletedIntegratorStep for fmi2CoSimulation", []) in
			mk_(<fmi2Error>, nil, nil)
		elseif c.fmuState not in set STATES_fmi2CompletedIntegratorStep
		then let - = logAPIError(c, "Cannot call fmi2CompletedIntegratorStep in state %s", [c.fmuState]) in
			mk_(<fmi2Error>, nil, nil)
		elseif nilBool(c.model.modelExchange.completedIntegratorStepNotNeeded)
		then let - = logAPIError(c, "fmi2CompletedIntegratorStep not needed", []) in
			mk_(<fmi2Error>, nil, nil)
	 	else
	 		fmi2CompletedIntegratorStep_Impl(c, noSetFMUStatePriorToCurrentPoint)
	 post
	 	RESULT.#1 = <fmi2OK> <=> RESULT.#2 <> nil and RESULT.#3 <> nil;


	/**
	 * Implementation and API for fmi2GetDerivatives.
	 */
	fmi2GetDerivatives_Impl: fmi2Component * nat +> fmi2Status * seq of fmi2Real
	fmi2GetDerivatives_Impl(c, nx) ==
		-- Compute derivatives TODO
		mk_(<fmi2OK>, [ c.variables(aliasTag(c.eModelVariables(idx))) | idx in seq c.continuousTimeStates ])
	pre
		c.fmuType = <fmi2ModelExchange>
		and c.fmuState in set STATES_fmi2GetDerivatives
		and nx = len c.continuousTimeStates;

	fmi2GetDerivatives: fmi2Component * nat +> fmi2Status * [seq of fmi2Real]
	fmi2GetDerivatives(c, nx) ==
		if c.fmuType <> <fmi2ModelExchange>
		then let - = logAPIError(c, "Cannot call fmi2GetDerivatives for fmi2CoSimulation", []) in
			mk_(<fmi2Error>, nil)
		elseif c.fmuState not in set STATES_fmi2GetDerivatives
		then let - = logAPIError(c, "Cannot call fmi2GetDerivatives in state %s", [c.fmuState]) in
			mk_(<fmi2Error>, nil)
		elseif nx <> len c.continuousTimeStates
		then let - = logAPIError(c, "Wrong number of derivates requested, expecting %s", [len c.continuousTimeStates]) in
			mk_(<fmi2Error>, nil)
	 	else
	 		fmi2GetDerivatives_Impl(c, nx)
	 post
	 	RESULT.#1 = <fmi2OK> <=> RESULT.#2 <> nil;


	/**
	 * Implementation and API for fmi2GetEventIndicators.
	 */
	fmi2GetEventIndicators_Impl: fmi2Component * nat +> fmi2Status * seq of fmi2Real
	fmi2GetEventIndicators_Impl(c, ni) ==
		-- Compute event indicators TODO
		mk_(<fmi2OK>, [ 0 | - in set {1, ..., ni} ])
	pre
		c.fmuType = <fmi2ModelExchange>
		and c.fmuState in set STATES_fmi2GetEventIndicators
		and ni = nilNat(c.model.numberOfEventIndicators);

	fmi2GetEventIndicators: fmi2Component * nat +> fmi2Status * [seq of fmi2Real]
	fmi2GetEventIndicators(c, ni) ==
		if c.fmuType <> <fmi2ModelExchange>
		then let - = logAPIError(c, "Cannot call fmi2GetEventIndicators for fmi2CoSimulation", []) in
			mk_(<fmi2Error>, nil)
		elseif c.fmuState not in set STATES_fmi2GetEventIndicators
		then let - = logAPIError(c, "Cannot call fmi2GetEventIndicators in state %s", [c.fmuState]) in
			mk_(<fmi2Error>, nil)
		elseif ni <> nilNat(c.model.numberOfEventIndicators)
		then let - = logAPIError(c, "Wrong number of event indicators passed", []) in
			mk_(<fmi2Error>, nil)
	 	else
	 		fmi2GetEventIndicators_Impl(c, ni)
	 post
	 	RESULT.#1 = <fmi2OK> <=> RESULT.#2 <> nil;


	/**
	 * Implementation and API for fmi2GetContinuousStates.
	 */
	fmi2GetContinuousStates_Impl: fmi2Component * nat +> fmi2Status * seq of fmi2Real
	fmi2GetContinuousStates_Impl(c, nx) ==
		mk_(<fmi2OK>, [ c.variables(aliasTag(c.eModelVariables(idx))) | idx in seq c.continuousTimeStates ])
	pre
		c.fmuType = <fmi2ModelExchange>
		and c.fmuState in set STATES_fmi2GetContinuousStates
		and nx = len c.continuousTimeStates;

	fmi2GetContinuousStates: fmi2Component * nat +> fmi2Status * [seq of fmi2Real]
	fmi2GetContinuousStates(c, nx) ==
		if c.fmuType <> <fmi2ModelExchange>
		then let - = logAPIError(c, "Cannot call fmi2GetContinuousStates for fmi2CoSimulation", []) in
			mk_(<fmi2Error>, nil)
		elseif c.fmuState not in set STATES_fmi2GetContinuousStates
		then let - = logAPIError(c, "Cannot call fmi2GetContinuousStates in state %s", [c.fmuState]) in
			mk_(<fmi2Error>, nil)
		elseif nx <> len c.continuousTimeStates
		then let - = logAPIError(c, "Wrong number of derivates requested, expecting %s", [len c.continuousTimeStates]) in
			mk_(<fmi2Error>, nil)
	 	else
	 		fmi2GetContinuousStates_Impl(c, nx)
	 post
	 	RESULT.#1 = <fmi2OK> <=> RESULT.#2 <> nil;


	/**
	 * Implementation and API for fmi2GetNominalsOfContinuousStates.
	 */
	fmi2GetNominalsOfContinuousStates_Impl: fmi2Component * nat +> fmi2Status * seq of fmi2Real
	fmi2GetNominalsOfContinuousStates_Impl(c, nx) ==
		mk_(<fmi2OK>, [ 1.0 | - in seq c.continuousTimeStates ])	-- TODO!
	pre
		c.fmuType = <fmi2ModelExchange>
		and c.fmuState in set STATES_fmi2GetNominalsOfContinuousStates
		and nx = len c.continuousTimeStates;

	fmi2GetNominalsOfContinuousStates: fmi2Component * nat +> fmi2Status * [seq of fmi2Real]
	fmi2GetNominalsOfContinuousStates(c, nx) ==
		if c.fmuType <> <fmi2ModelExchange>
		then let - = logAPIError(c, "Cannot call fmi2GetNominalsOfContinuousStates for fmi2CoSimulation", []) in
			mk_(<fmi2Error>, nil)
		elseif c.fmuState not in set STATES_fmi2GetNominalsOfContinuousStates
		then let - = logAPIError(c, "Cannot call fmi2GetNominalsOfContinuousStates in state %s", [c.fmuState]) in
			mk_(<fmi2Error>, nil)
		elseif nx <> len c.continuousTimeStates
		then let - = logAPIError(c, "Wrong number of derivates requested, expecting %s", [len c.continuousTimeStates]) in
			mk_(<fmi2Error>, nil)
	 	else
	 		fmi2GetNominalsOfContinuousStates_Impl(c, nx)
	 post
	 	RESULT.#1 = <fmi2OK> <=> RESULT.#2 <> nil;
