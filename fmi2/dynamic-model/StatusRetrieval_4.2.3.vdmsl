/*********************************************************************************
 *
 *	Copyright (c) 2017-2022, INTO-CPS Association,
 *	c/o Professor Peter Gorm Larsen, Department of Engineering
 *	Finlandsgade 22, 8200 Aarhus N.
 *
 *	MIT Licence:
 *
 *	Permission is hereby granted, free of charge, to any person obtaining a copy of
 *	this software and associated documentation files (the "Software"), to deal in
 *	the Software without restriction, including without limitation the rights to use,
 *	copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 *	Software, and to permit persons to whom the Software is furnished to do so,
 *	subject to the following conditions:
 *
 *	The above copyright notice and this permission notice shall be included in all
 *	copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 *	INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 *	PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *	OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 *	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *	SPDX-License-Identifier: MIT
 *
 *********************************************************************************/

/**
 * 4.2.3 Retrieving Status Information from the Slave
 */
types
	fmi2StatusKind = <fmi2DoStepStatus> | <fmi2PendingStatus> | <fmi2LastSuccessfulTime> | <fmi2Terminated>;

functions
	/**
	 * Implementation and API for fmi2GetStatus.
	 */
	fmi2GetStatus_Impl: fmi2Component * fmi2StatusKind +> fmi2Status * fmi2Status
	fmi2GetStatus_Impl(c, s) ==
		mk_(<fmi2OK>, <fmi2Pending>)	-- TODO: async interface
	pre
		c.fmuType = <fmi2CoSimulation>
		and c.fmuState in set STATES_fmi2GetStatus
		and s = <fmi2DoStepStatus>;

	fmi2GetStatus: fmi2Component * fmi2StatusKind +> fmi2Status * [fmi2Status]
	fmi2GetStatus(c, s) ==
		if c.fmuType <> <fmi2CoSimulation>
		then let - = logAPIError(c, "Cannot call fmi2GetStatus for fmi2ModelExchange", []) in
			mk_(<fmi2Error>, nil)
		elseif c.fmuState not in set STATES_fmi2GetStatus
		then let - = logAPIError(c, "Cannot call fmi2GetStatus in state %s", [c.fmuState]) in
			mk_(<fmi2Error>, nil)
		elseif s <> <fmi2DoStepStatus>
		then let - = logAPIError(c, "Cannot fmi2GetStatus of %s", [s]) in
			mk_(<fmi2Error>, nil)
		else
			fmi2GetStatus_Impl(c, s)
	 post
	 	RESULT.#1 <> <fmi2OK> <=> RESULT.#2 = nil;


	/**
	 * Implementation and API for fmi2GetRealStatus.
	 */
	fmi2GetRealStatus_Impl: fmi2Component * fmi2StatusKind +> fmi2Status * fmi2Real
	fmi2GetRealStatus_Impl(c, s) ==
		mk_(<fmi2OK>, c.currentTime)	-- TODO: last successful <> current
	pre
		c.fmuType = <fmi2CoSimulation>
		and c.fmuState in set STATES_fmi2GetRealStatus
		and s = <fmi2LastSuccessfulTime>;

	fmi2GetRealStatus: fmi2Component * fmi2StatusKind +> fmi2Status * [fmi2Real]
	fmi2GetRealStatus(c, s) ==
		if c.fmuType <> <fmi2CoSimulation>
		then let - = logAPIError(c, "Cannot call fmi2GetRealStatus for fmi2ModelExchange", []) in
			mk_(<fmi2Error>, nil)
		elseif c.fmuState not in set STATES_fmi2GetRealStatus
		then let - = logAPIError(c, "Cannot call fmi2GetRealStatus in state %s", [c.fmuState]) in
			mk_(<fmi2Error>, nil)
		elseif s <> <fmi2LastSuccessfulTime>
		then let - = logAPIError(c, "Cannot fmi2GetRealStatus of %s", [s]) in
			mk_(<fmi2Error>, nil)
		else
			fmi2GetRealStatus_Impl(c, s)
	 post
	 	RESULT.#1 <> <fmi2OK> <=> RESULT.#2 = nil;


	/**
	 * Implementation and API for fmi2GetIntegerStatus.
	 */
	fmi2GetIntegerStatus_Impl: fmi2Component * fmi2StatusKind +> fmi2Status * fmi2Integer
	fmi2GetIntegerStatus_Impl(c, s) ==
		is not yet specified	-- No Integer statuses at present
	pre
		c.fmuType = <fmi2CoSimulation>
		and c.fmuState in set STATES_fmi2GetIntegerStatus;

	fmi2GetIntegerStatus: fmi2Component * fmi2StatusKind +> fmi2Status * [fmi2Integer]
	fmi2GetIntegerStatus(c, s) ==
		if c.fmuType <> <fmi2CoSimulation>
		then let - = logAPIError(c, "Cannot call fmi2GetIntegerStatus for fmi2ModelExchange", []) in
			mk_(<fmi2Error>, nil)
		elseif c.fmuState not in set STATES_fmi2GetIntegerStatus
		then let - = logAPIError(c, "Cannot call fmi2GetIntegerStatus in state %s", [c.fmuState]) in
			mk_(<fmi2Error>, nil)
		elseif true		-- No Integer statuses at present
		then let - = logAPIError(c, "Cannot fmi2GetIntegerStatus of %s", [s]) in
			mk_(<fmi2Error>, nil)
		else
			fmi2GetIntegerStatus_Impl(c, s)
	 post
	 	RESULT.#1 <> <fmi2OK> <=> RESULT.#2 = nil;


	/**
	 * Implementation and API for fmi2GetBooleanStatus.
	 */
	fmi2GetBooleanStatus_Impl: fmi2Component * fmi2StatusKind +> fmi2Status * fmi2Boolean
	fmi2GetBooleanStatus_Impl(c, s) ==
		mk_(<fmi2OK>, c.fmuState = <TERMINATED>)
	pre
		c.fmuType = <fmi2CoSimulation>
		and c.fmuState in set STATES_fmi2GetBooleanStatus
		and s = <fmi2Terminated>;

	fmi2GetBooleanStatus: fmi2Component * fmi2StatusKind +> fmi2Status * [fmi2Boolean]
	fmi2GetBooleanStatus(c, s) ==
		if c.fmuType <> <fmi2CoSimulation>
		then let - = logAPIError(c, "Cannot call fmi2GetBooleanStatus for fmi2ModelExchange", []) in
			mk_(<fmi2Error>, nil)
		elseif c.fmuState not in set STATES_fmi2GetBooleanStatus
		then let - = logAPIError(c, "Cannot call fmi2GetBooleanStatus in state %s", [c.fmuState]) in
			mk_(<fmi2Error>, nil)
		elseif s <> <fmi2Terminated>
		then let - = logAPIError(c, "Cannot fmi2GetBooleanStatus of %s", [s]) in
			mk_(<fmi2Error>, nil)
		else
			fmi2GetBooleanStatus_Impl(c, s)
	 post
	 	RESULT.#1 <> <fmi2OK> <=> RESULT.#2 = nil;


	/**
	 * Implementation and API for fmi2GetStringStatus.
	 */
	fmi2GetStringStatus_Impl: fmi2Component * fmi2StatusKind +> fmi2Status * fmi2String
	fmi2GetStringStatus_Impl(c, s) ==
		mk_(<fmi2OK>, "pending undefined")	-- TODO: async processing 
	pre
		c.fmuType = <fmi2CoSimulation>
		and c.fmuState in set STATES_fmi2GetStringStatus
		and s = <fmi2PendingStatus>;

	fmi2GetStringStatus: fmi2Component * fmi2StatusKind +> fmi2Status * [fmi2String]
	fmi2GetStringStatus(c, s) ==
		if c.fmuType <> <fmi2CoSimulation>
		then let - = logAPIError(c, "Cannot call fmi2GetStringStatus for fmi2ModelExchange", []) in
			mk_(<fmi2Error>, nil)
		elseif c.fmuState not in set STATES_fmi2GetStringStatus
		then let - = logAPIError(c, "Cannot call fmi2GetStringStatus in state %s", [c.fmuState]) in
			mk_(<fmi2Error>, nil)
		elseif s <> <fmi2PendingStatus>
		then let - = logAPIError(c, "Cannot fmi2GetStringStatus of %s", [s]) in
			mk_(<fmi2Error>, nil)
		else
			fmi2GetStringStatus_Impl(c, s)
	 post
	 	RESULT.#1 <> <fmi2OK> <=> RESULT.#2 = nil;
