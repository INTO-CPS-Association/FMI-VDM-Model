/*********************************************************************************
 *
 *	Copyright (c) 2017-2022, INTO-CPS Association,
 *	c/o Professor Peter Gorm Larsen, Department of Engineering
 *	Finlandsgade 22, 8200 Aarhus N.
 *
 *	MIT Licence:
 *
 *	Permission is hereby granted, free of charge, to any person obtaining a copy of
 *	this software and associated documentation files (the "Software"), to deal in
 *	the Software without restriction, including without limitation the rights to use,
 *	copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 *	Software, and to permit persons to whom the Software is furnished to do so,
 *	subject to the following conditions:
 *
 *	The above copyright notice and this permission notice shall be included in all
 *	copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 *	INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 *	PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *	OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 *	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *	SPDX-License-Identifier: MIT
 *
 *********************************************************************************/

/**
 * 2.1.8 Getting and Setting the Complete FMU State
 */
types
	fmi2FMUState = fmi2Component;
	SerializedState = fmi2FMUState * nat;		-- state and size of serialized state

functions
	canDoGetSetState: fmi2Component * set of fmi2State +> bool
	canDoGetSetState(c, states) ==
		c.fmuState in set states
		and if c.fmuType = <fmi2CoSimulation>
		then nilBool(c.model.coSimulation.canGetAndSetFMUstate)
		else nilBool(c.model.modelExchange.canGetAndSetFMUstate);

	/**
	 * Implementation and API for fmi2GetFMUstate.
	 */
	fmi2GetFMUstate_Impl: fmi2Component +> fmi2Status * fmi2FMUState
	fmi2GetFMUstate_Impl(c) ==
		mk_(<fmi2OK>, c)
	pre
		canDoGetSetState(c, STATES_fmi2GetFMUstate);

	fmi2GetFMUstate: fmi2Component +> fmi2Status * [fmi2FMUState]
	fmi2GetFMUstate(c) ==
		if not canDoGetSetState(c, STATES_fmi2GetFMUstate)
		then let - = logAPIError(c, "Can't call fmi2GetFMUstate", []) in
			mk_(<fmi2Error>, nil)
		else
			fmi2GetFMUstate_Impl(c)
	 post
	 	RESULT.#1 = <fmi2OK> <=> RESULT.#2 <> nil;


	/**
	 * Implementation and API for fmi2SetFMUstate.
	 */
	fmi2SetFMUstate_Impl: fmi2Component * fmi2FMUState +> fmi2Status * fmi2Component
	fmi2SetFMUstate_Impl(c, FMUstate) ==
		mk_(<fmi2OK>, FMUstate)
	pre
		canDoGetSetState(c, STATES_fmi2SetFMUstate);

	fmi2SetFMUstate: fmi2Component * fmi2FMUState +> fmi2Status * [fmi2Component]
	fmi2SetFMUstate(c, FMUstate) ==
		if not canDoGetSetState(c, STATES_fmi2SetFMUstate)
		then let - = logAPIError(c, "Can't call fmi2SetFMUstate", []) in
			mk_(<fmi2Error>, nil)
		else
			fmi2SetFMUstate_Impl(c, FMUstate)
	 post
	 	RESULT.#1 <> <fmi2OK> <=> RESULT.#2 = nil;


	/**
	 * Implementation and API for fmi2FreeFMUstate.
	 */
	fmi2FreeFMUstate_Impl: fmi2Component * fmi2FMUState +> fmi2Status
	fmi2FreeFMUstate_Impl(c, -) ==
		<fmi2OK>
	pre
		canDoGetSetState(c, STATES_fmi2FreeFMUstate);

	fmi2FreeFMUstate: fmi2Component * fmi2FMUState +> fmi2Status
	fmi2FreeFMUstate(c, FMUstate) ==
		if not canDoGetSetState(c, STATES_fmi2FreeFMUstate)
		then let - = logAPIError(c, "Can't call fmi2FreeFMUstate", []) in
			<fmi2Error>
		else
			fmi2FreeFMUstate_Impl(c, FMUstate);


	/**
	 * Implementation and API for fmi2SerializedFMUstateSize.
	 */
	fmi2SerializedFMUstateSize_Impl: fmi2Component * fmi2FMUState +> fmi2Status * nat
	fmi2SerializedFMUstateSize_Impl(c, -) ==
		mk_(<fmi2OK>, 0)	-- Size is abstract in the VDM model
	pre
		canDoGetSetState(c, STATES_fmi2SerializedFMUstateSize);

	fmi2SerializedFMUstateSize: fmi2Component * fmi2FMUState +> fmi2Status * [nat]
	fmi2SerializedFMUstateSize(c, FMUstate) ==
		if not canDoGetSetState(c, STATES_fmi2SerializedFMUstateSize)
		then let - = logAPIError(c, "Can't call fmi2SerializedFMUstateSize", []) in
			mk_(<fmi2Error>, nil)
		else
			fmi2SerializedFMUstateSize_Impl(c, FMUstate)
	 post
	 	RESULT.#1 = <fmi2OK> <=> RESULT.#2 <> nil;


	/**
	 * Implementation and API for fmi2SerializeFMUstate.
	 */
	fmi2SerializeFMUstate_Impl: fmi2Component * fmi2FMUState * nat +> fmi2Status * SerializedState
	fmi2SerializeFMUstate_Impl(c, FMUstate, size) ==
		mk_(<fmi2OK>, mk_(FMUstate, size))
	pre
		canDoGetSetState(c, STATES_fmi2SerializeFMUstate);

	fmi2SerializeFMUstate: fmi2Component * fmi2FMUState * nat +> fmi2Status * [SerializedState]
	fmi2SerializeFMUstate(c, FMUstate, size) ==
		if not canDoGetSetState(c, STATES_fmi2SerializeFMUstate)
		then let - = logAPIError(c, "Can't call fmi2SerializeFMUstate", []) in
			mk_(<fmi2Error>, nil)
		else
			fmi2SerializeFMUstate_Impl(c, FMUstate, size)
	 post
	 	RESULT.#1 = <fmi2OK> <=> RESULT.#2 <> nil;


	/**
	 * Implementation and API for fmi2DeSerializeFMUstate.
	 */
	fmi2DeSerializeFMUstate_Impl: fmi2Component * SerializedState * nat +> fmi2Status * fmi2FMUState
	fmi2DeSerializeFMUstate_Impl(c, serializedState, size) ==
		mk_(<fmi2OK>, serializedState.#1)
	pre
		serializedState.#2 = size
		and canDoGetSetState(c, STATES_fmi2DeSerializeFMUstate);

	fmi2DeSerializeFMUstate: fmi2Component * SerializedState * nat +> fmi2Status * [fmi2FMUState]
	fmi2DeSerializeFMUstate(c, serializedState, size) ==
		if serializedState.#2 <> size
		then let - = logAPIError(c, "Size does not match serialised state", []) in
			mk_(<fmi2Error>, nil)
		elseif not canDoGetSetState(c, STATES_fmi2DeSerializeFMUstate)
		then let - = logAPIError(c, "Can't call fmi2DeSerializeFMUstate", []) in
			mk_(<fmi2Error>, nil)
		else
			fmi2DeSerializeFMUstate_Impl(c, serializedState, size)
	 post
	 	RESULT.#1 = <fmi2OK> <=> RESULT.#2 <> nil;

	