/*********************************************************************************
 *
 *	Copyright (c) 2017-2022, INTO-CPS Association,
 *	c/o Professor Peter Gorm Larsen, Department of Engineering
 *	Finlandsgade 22, 8200 Aarhus N.
 *
 *	MIT Licence:
 *
 *	Permission is hereby granted, free of charge, to any person obtaining a copy of
 *	this software and associated documentation files (the "Software"), to deal in
 *	the Software without restriction, including without limitation the rights to use,
 *	copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 *	Software, and to permit persons to whom the Software is furnished to do so,
 *	subject to the following conditions:
 *
 *	The above copyright notice and this permission notice shall be included in all
 *	copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 *	INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 *	PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *	OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 *	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *	SPDX-License-Identifier: MIT
 *
 *********************************************************************************/

/**
 * 2.1.7 Getting and Setting Variable Values
 */
functions
	/**
	 * The general contracts for calling fmi2GetXXX and fmi2SetXXX functions in a given state.
	 */
	generalGetPrecondition: fmi2Component * seq of fmi2ValueReference * Kind +> bool
	generalGetPrecondition(c, vrs, kind) ==
		cases c.fmuState:
			<INSTANTIATED>		-> false,
			<INITIALIZATION>	-> varsINIT(c, vrs, kind),
			<EVENT_MODE>		-> true,
			<CT_MODE>			-> true,
			<STEP_COMPLETE>		-> true,
			<STEP_IN_PROGRESS>	-> false,
			<STEP_FAILED>		-> true,
			<STEP_CANCELLED>	-> true,
			<TERMINATED>		-> true,
			<ERROR>				-> true,

			others -> undefined
		end;

	generalSetPrecondition: fmi2Component * seq of fmi2ValueReference * Kind +> bool
	generalSetPrecondition(c, vrs, kind) ==
		if c.fmuType = <fmi2ModelExchange>
		then
			cases c.fmuState:
				<INSTANTIATED>		-> varsSEA(c, vrs, kind),
				<INITIALIZATION>	-> varsSE(c, vrs, kind),
				<EVENT_MODE>		-> varsIN(c, vrs, kind) or varsINC(c, vrs, kind),
				<CT_MODE>			-> varsINC(c, vrs, kind),
				<TERMINATED>		-> false,
				<ERROR>				-> false,

				others -> undefined
			end
		else	-- fmi2CoSimulation
			cases c.fmuState:
				<INSTANTIATED>		-> varsINI(c, vrs, kind),
				<INITIALIZATION>	-> varsIN(c, vrs, kind) or varsINI(c, vrs, kind),
				<STEP_COMPLETE>		-> varsIN(c, vrs, kind),
				<STEP_IN_PROGRESS>	-> false,
				<STEP_FAILED>		-> false,
				<STEP_CANCELLED>	-> false,
				<TERMINATED>		-> false,
				<ERROR>				-> false,

				others -> undefined
			end;



	/**
	 * Implementation and API for fmi2GetReal.
	 */
	fmi2GetReal_Impl: fmi2Component * seq of fmi2ValueReference * nat +> fmi2Status * [seq of fmi2Real]
	fmi2GetReal_Impl(c, vrs, nvr) ==
		let mk_(s, c2) = if c.dirty then c.componentEnvironment.calculateValues(c) else mk_(<fmi2OK>, c) in
			if s <> <fmi2OK>
			then mk_(s, nil)
			else mk_(<fmi2OK>, [ c2.variables(mk_AliasTag(vr, <Real>)) | vr in seq vrs ])
	pre
		len vrs = nvr
		and generalGetPrecondition(c, vrs, <Real>)
		and forall vr in seq vrs & lookup(c.eModelVariables, vr, <Real>) <> nil
	post
		RESULT.#1 = <fmi2OK> => len RESULT.#2 = nvr;

	fmi2GetReal: fmi2Component * seq of fmi2ValueReference * nat +> fmi2Status * [seq of fmi2Real]
	fmi2GetReal(c, vrs, nvr) ==
		if len vrs <> nvr
		then let - = logAPIError(c, "vrs and nvr do not match", []) in
			mk_(<fmi2Error>, nil)
		elseif not generalGetPrecondition(c, vrs, <Real>)
		then let - = logAPIError(c, "Get preconditions failed", []) in
			mk_(<fmi2Error>, nil)
		elseif exists vr in seq vrs & lookup(c.eModelVariables, vr, <Real>) = nil
		then let - = logAPIError(c, "Value references are not all Real variables", []) in
			mk_(<fmi2Error>, nil)
		else
			fmi2GetReal_Impl(c, vrs, nvr)
	 post
	 	RESULT.#1 = <fmi2OK> <=> RESULT.#2 <> nil;


	/**
	 * Implementation and API for fmi2GetInteger.
	 */
	fmi2GetInteger_Impl: fmi2Component * seq of fmi2ValueReference * nat +> fmi2Status * [seq of fmi2Integer]
	fmi2GetInteger_Impl(c, vrs, nvr) ==
		let mk_(s, c2) = if c.dirty then c.componentEnvironment.calculateValues(c) else mk_(<fmi2OK>, c) in
			if s <> <fmi2OK>
			then mk_(s, nil)
			else mk_(<fmi2OK>, [ c2.variables(mk_AliasTag(vr, <Integer>)) | vr in seq vrs ])
	pre
		len vrs = nvr
		and generalGetPrecondition(c, vrs, <Integer>)
		and forall vr in seq vrs & lookup(c.eModelVariables, vr, <Integer>) <> nil
	post
		RESULT.#1 <> <fmi2Discard>
		and (RESULT.#1 = <fmi2OK> => len RESULT.#2 = nvr);

	fmi2GetInteger: fmi2Component * seq of fmi2ValueReference * nat +> fmi2Status * [seq of fmi2Integer]
	fmi2GetInteger(c, vrs, nvr) ==
		if len vrs <> nvr
		then let - = logAPIError(c, "vrs and nvr do not match", []) in
			mk_(<fmi2Error>, nil)
		elseif not generalGetPrecondition(c, vrs, <Integer>)
		then let - = logAPIError(c, "Get preconditions failed", []) in
			mk_(<fmi2Error>, nil)
		elseif exists vr in seq vrs & lookup(c.eModelVariables, vr, <Integer>) = nil
		then let - = logAPIError(c, "Value references are not all Integer variables", []) in
			mk_(<fmi2Error>, nil)
		else
			fmi2GetInteger_Impl(c, vrs, nvr)
	 post
	 	RESULT.#1 = <fmi2OK> <=> RESULT.#2 <> nil;


	/**
	 * Implementation and API for fmi2GetBoolean.
	 */
	fmi2GetBoolean_Impl: fmi2Component * seq of fmi2ValueReference * nat +> fmi2Status * [seq of fmi2Boolean]
	fmi2GetBoolean_Impl(c, vrs, nvr) ==
		let mk_(s, c2) = if c.dirty then c.componentEnvironment.calculateValues(c) else mk_(<fmi2OK>, c) in
			if s <> <fmi2OK>
			then mk_(s, nil)
			else mk_(<fmi2OK>, [ c2.variables(mk_AliasTag(vr, <Boolean>)) | vr in seq vrs ])
	pre
		len vrs = nvr
		and generalGetPrecondition(c, vrs, <Boolean>)
		and forall vr in seq vrs & lookup(c.eModelVariables, vr, <Boolean>) <> nil
	post
		RESULT.#1 <> <fmi2Discard>
		and (RESULT.#1 = <fmi2OK> => len RESULT.#2 = nvr);

	fmi2GetBoolean: fmi2Component * seq of fmi2ValueReference * nat +> fmi2Status * [seq of fmi2Boolean]
	fmi2GetBoolean(c, vrs, nvr) ==
		if len vrs <> nvr
		then let - = logAPIError(c, "vrs and nvr do not match", []) in
			mk_(<fmi2Error>, nil)
		elseif not generalGetPrecondition(c, vrs, <Boolean>)
		then let - = logAPIError(c, "Get preconditions failed", []) in
			mk_(<fmi2Error>, nil)
		elseif exists vr in seq vrs & lookup(c.eModelVariables, vr, <Boolean>) = nil
		then let - = logAPIError(c, "Value references are not all Boolean variables", []) in
			mk_(<fmi2Error>, nil)
		else
			fmi2GetBoolean_Impl(c, vrs, nvr)
	 post
	 	RESULT.#1 = <fmi2OK> <=> RESULT.#2 <> nil;


	/**
	 * Implementation and API for fmi2GetString.
	 */
	fmi2GetString_Impl: fmi2Component * seq of fmi2ValueReference * nat +> fmi2Status * [seq of fmi2String]
	fmi2GetString_Impl(c, vrs, nvr) ==
		let mk_(s, c2) = if c.dirty then c.componentEnvironment.calculateValues(c) else mk_(<fmi2OK>, c) in
			if s <> <fmi2OK>
			then mk_(s, nil)
			else mk_(<fmi2OK>, [ c2.variables(mk_AliasTag(vr, <String>)) | vr in seq vrs ])
	pre
		len vrs = nvr
		and generalGetPrecondition(c, vrs, <String>)
		and forall vr in seq vrs & lookup(c.eModelVariables, vr, <String>) <> nil
	post
		RESULT.#1 <> <fmi2Discard>
		and (RESULT.#1 = <fmi2OK> => len RESULT.#2 = nvr);

	fmi2GetString: fmi2Component * seq of fmi2ValueReference * nat +> fmi2Status * [seq of fmi2String]
	fmi2GetString(c, vrs, nvr) ==
		if len vrs <> nvr
		then let - = logAPIError(c, "vrs and nvr do not match", []) in
			mk_(<fmi2Error>, nil)
		elseif not generalGetPrecondition(c, vrs, <String>)
		then let - = logAPIError(c, "Get preconditions failed", []) in
			mk_(<fmi2Error>, nil)
		elseif exists vr in seq vrs & lookup(c.eModelVariables, vr, <String>) = nil
		then let - = logAPIError(c, "Value references are not all String variables", []) in
			mk_(<fmi2Error>, nil)
		else
			fmi2GetString_Impl(c, vrs, nvr)
	 post
	 	RESULT.#1 = <fmi2OK> <=> RESULT.#2 <> nil;


	/**
	 * Implementation and API for fmi2SetReal.
	 */
	fmi2SetReal_Impl: fmi2Component * seq1 of fmi2ValueReference * nat1 * seq1 of fmi2Real +> fmi2Status * fmi2Component
	fmi2SetReal_Impl(c, vrs, nvr, value) ==
		let updates = { mk_AliasTag(vrs(i), <Real>) |-> value(i) | i in set inds vrs } in
			mk_(<fmi2OK>, mu(c,
				variables |-> c.variables ++ updates,
				dirty     |-> true))
	pre
		len vrs = nvr and len vrs = len value
		and generalSetPrecondition(c, vrs, <Real>)
		and forall i in set inds vrs &
			let vr = vrs(i),
				sv = lookup(c.eModelVariables, vr, <Real>)
			in
				sv <> nil
				and sv.causality <> <independent>
				and let min = sv.fmi2ScalarVariable.min,
						max = sv.fmi2ScalarVariable.max
					in
						(min <> nil => value(i) >= min)	and (max <> nil => value(i) <= max);

	fmi2SetReal: fmi2Component * seq1 of fmi2ValueReference * nat1 * seq1 of fmi2Real +> fmi2Status * [fmi2Component]
	fmi2SetReal(c, vrs, nvr, value) ==
		if len vrs <> nvr
		then let - = logAPIError(c, "vrs and nvr do not match", []) in
			mk_(<fmi2Error>, nil)
		elseif len vrs <> len value
		then let - = logAPIError(c, "vrs and value do not match", []) in
			mk_(<fmi2Error>, nil)
		elseif not generalSetPrecondition(c, vrs, <Real>)
		then let - = logAPIError(c, "Set preconditions failed", []) in
			mk_(<fmi2Error>, nil)
		elseif exists vr in seq vrs & lookup(c.eModelVariables, vr, <Real>) = nil
		then let - = logAPIError(c, "Value references are not all Real variables", []) in
			mk_(<fmi2Error>, nil)
		elseif exists i in set inds vrs &
			let sv = lookup(c.eModelVariables, vrs(i), <Real>),
				min = sv.fmi2ScalarVariable.min,
				max = sv.fmi2ScalarVariable.max
			in
				(min <> nil and value(i) < min)	or (max <> nil and value(i) > max)
		then let - = logAPIError(c, "Values not all within min/max for variables", []) in
			mk_(<fmi2Error>, nil)
		elseif exists i in set inds vrs &
			let sv = lookup(c.eModelVariables, vrs(i), <Real>) in sv.causality = <independent>
		then let - = logAPIError(c, "Cannot set value of independent variable", []) in
			mk_(<fmi2Error>, nil)
		else
			fmi2SetReal_Impl(c, vrs, nvr, value)
	 post
	 	RESULT.#1 = <fmi2OK> <=> RESULT.#2 <> nil;


	/**
	 * Implementation and API for fmi2SetInteger.
	 */
	fmi2SetInteger_Impl: fmi2Component * seq1 of fmi2ValueReference * nat1 * seq1 of fmi2Integer +> fmi2Status * fmi2Component
	fmi2SetInteger_Impl(c, vrs, nvr, value) ==
		let updates = { mk_AliasTag(vrs(i), <Integer>) |-> value(i) | i in set inds vrs } in
			mk_(<fmi2OK>, mu(c,
				variables |-> c.variables ++ updates,
				dirty     |-> true))
	pre
		len vrs = nvr and len vrs = len value
		and generalSetPrecondition(c, vrs, <Integer>)
		and forall i in set inds vrs &
			let vr = vrs(i),
				sv = lookup(c.eModelVariables, vr, <Integer>)
			in
				sv <> nil
				and let min = sv.fmi2ScalarVariable.min,
						max = sv.fmi2ScalarVariable.max
					in
						(min <> nil => value(i) >= min)	and (max <> nil => value(i) <= max);

	fmi2SetInteger: fmi2Component * seq1 of fmi2ValueReference * nat1 * seq1 of fmi2Integer +> fmi2Status * [fmi2Component]
	fmi2SetInteger(c, vrs, nvr, value) ==
		if len vrs <> nvr
		then let - = logAPIError(c, "vrs and nvr do not match", []) in
			mk_(<fmi2Error>, nil)
		elseif len vrs <> len value
		then let - = logAPIError(c, "vrs and value do not match", []) in
			mk_(<fmi2Error>, nil)
		elseif not generalSetPrecondition(c, vrs, <Integer>)
		then let - = logAPIError(c, "Set preconditions failed", []) in
			mk_(<fmi2Error>, nil)
		elseif exists vr in seq vrs & lookup(c.eModelVariables, vr, <Integer>) = nil
		then let - = logAPIError(c, "Value references are not all Integer variables", []) in
			mk_(<fmi2Error>, nil)
		elseif exists i in set inds vrs &
			let sv = lookup(c.eModelVariables, vrs(i), <Integer>),
				min = sv.fmi2ScalarVariable.min,
				max = sv.fmi2ScalarVariable.max
			in
				(min <> nil and value(i) < min)	or (max <> nil and value(i) > max)
		then let - = logAPIError(c, "Values not all within min/max for variables", []) in
			mk_(<fmi2Error>, nil)
		else
			fmi2SetInteger_Impl(c, vrs, nvr, value)
	 post
	 	RESULT.#1 = <fmi2OK> <=> RESULT.#2 <> nil;


	/**
	 * Implementation and API for fmi2SetBoolean.
	 */
	fmi2SetBoolean_Impl: fmi2Component * seq1 of fmi2ValueReference * nat1 * seq1 of fmi2Boolean +> fmi2Status * [fmi2Component]
	fmi2SetBoolean_Impl(c, vrs, nvr, value) ==
		let updates = { mk_AliasTag(vrs(i), <Boolean>) |-> value(i) | i in set inds vrs } in
			mk_(<fmi2OK>, mu(c,
				variables |-> c.variables ++ updates,
				dirty     |-> true))
	pre
		len vrs = nvr and len vrs = len value
		and generalSetPrecondition(c, vrs, <Boolean>)
		and forall vr in seq vrs &
			lookup(c.eModelVariables, vr, <Boolean>) <> nil;

	fmi2SetBoolean: fmi2Component * seq1 of fmi2ValueReference * nat1 * seq1 of fmi2Boolean +> fmi2Status * [fmi2Component]
	fmi2SetBoolean(c, vrs, nvr, value) ==
		if len vrs <> nvr
		then let - = logAPIError(c, "vrs and nvr do not match", []) in
			mk_(<fmi2Error>, nil)
		elseif len vrs <> len value
		then let - = logAPIError(c, "vrs and value do not match", []) in
			mk_(<fmi2Error>, nil)
		elseif not generalSetPrecondition(c, vrs, <Boolean>)
		then let - = logAPIError(c, "Set preconditions failed", []) in
			mk_(<fmi2Error>, nil)
		elseif exists vr in seq vrs & lookup(c.eModelVariables, vr, <Boolean>) = nil
		then let - = logAPIError(c, "Value references are not all Boolean variables", []) in
			mk_(<fmi2Error>, nil)
		else
			fmi2SetBoolean_Impl(c, vrs, nvr, value)
	 post
	 	RESULT.#1 = <fmi2OK> <=> RESULT.#2 <> nil;


	/**
	 * Implementation and API for fmi2SetString.
	 */
	fmi2SetString_Impl: fmi2Component * seq1 of fmi2ValueReference * nat1 * seq1 of fmi2String +> fmi2Status * fmi2Component
	fmi2SetString_Impl(c, vrs, nvr, value) ==
		let updates = { mk_AliasTag(vrs(i), <String>) |-> value(i) | i in set inds vrs } in
			mk_(<fmi2OK>, mu(c,
				variables |-> c.variables ++ updates,
				dirty     |-> true))
	pre
		len vrs = nvr and len vrs = len value
		and generalSetPrecondition(c, vrs, <String>)
		and forall vr in seq vrs &
			lookup(c.eModelVariables, vr, <String>) <> nil;

	fmi2SetString: fmi2Component * seq1 of fmi2ValueReference * nat1 * seq1 of fmi2String +> fmi2Status * [fmi2Component]
	fmi2SetString(c, vrs, nvr, value) ==
		if len vrs <> nvr
		then let - = logAPIError(c, "vrs and nvr do not match", []) in
			mk_(<fmi2Error>, nil)
		elseif len vrs <> len value
		then let - = logAPIError(c, "vrs and value do not match", []) in
			mk_(<fmi2Error>, nil)
		elseif not generalSetPrecondition(c, vrs, <String>)
		then let - = logAPIError(c, "Set preconditions failed", []) in
			mk_(<fmi2Error>, nil)
		elseif exists vr in seq vrs & lookup(c.eModelVariables, vr, <String>) = nil
		then let - = logAPIError(c, "Value references are not all String variables", []) in
			mk_(<fmi2Error>, nil)
		else
			fmi2SetString_Impl(c, vrs, nvr, value)
	 post
	 	RESULT.#1 = <fmi2OK> <=> RESULT.#2 <> nil;
