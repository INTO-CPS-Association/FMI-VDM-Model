/*********************************************************************************
 *
 *	Copyright (c) 2017-2022, INTO-CPS Association,
 *	c/o Professor Peter Gorm Larsen, Department of Engineering
 *	Finlandsgade 22, 8200 Aarhus N.
 *
 *	MIT Licence:
 *
 *	Permission is hereby granted, free of charge, to any person obtaining a copy of
 *	this software and associated documentation files (the "Software"), to deal in
 *	the Software without restriction, including without limitation the rights to use,
 *	copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 *	Software, and to permit persons to whom the Software is furnished to do so,
 *	subject to the following conditions:
 *
 *	The above copyright notice and this permission notice shall be included in all
 *	copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 *	INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 *	PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *	OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 *	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *	SPDX-License-Identifier: MIT
 *
 *********************************************************************************/

/**
 * 2.1.9 Getting Partial Derivatives
 */
functions
	/**
	 * Implementation and API for fmi2GetDirectionalDerivative.
	 */
	fmi2GetDirectionalDerivative_Impl: fmi2Component * seq of fmi2ValueReference * nat *
				seq of fmi2ValueReference * nat * seq of fmi2Real +> fmi2Status * seq of fmi2Real
	fmi2GetDirectionalDerivative_Impl(c, vUnknown_ref, nUnknown, vKnown_ref, nKnown, dvKnown) ==
		mk_(<fmi2OK>, dvKnown)	-- TODO!
	pre
		c.fmuState in set STATES_fmi2GetDirectionalDerivative
		and nUnknown = len vUnknown_ref
		and nKnown = len vKnown_ref
	post
		RESULT.#1 = <fmi2OK> => len RESULT.#2 = nKnown;

	fmi2GetDirectionalDerivative: fmi2Component * seq of fmi2ValueReference * nat *
				seq of fmi2ValueReference * nat* seq of fmi2Real +> fmi2Status * [seq of fmi2Real]
	fmi2GetDirectionalDerivative(c, vUnknown_ref, nUnknown, vKnown_ref, nKnown, dvKnown) ==
		if c.fmuState not in set STATES_fmi2GetDirectionalDerivative
		then let - = logAPIError(c, "Cannot call fmi2GetDirectionalDerivative in state %s", [c.fmuState]) in
			mk_(<fmi2Error>, nil)
		elseif nUnknown <> len vUnknown_ref or nKnown <> len vKnown_ref
		then let - = logAPIError(c, "Array length mismatch", []) in
			mk_(<fmi2Error>, nil)
		else
			fmi2GetDirectionalDerivative_Impl(c, vUnknown_ref, nUnknown, vKnown_ref, nKnown, dvKnown)
	 post
	 	RESULT.#1 <> <fmi2OK> <=> RESULT.#2 = nil;
