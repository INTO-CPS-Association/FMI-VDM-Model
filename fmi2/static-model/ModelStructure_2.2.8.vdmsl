/*********************************************************************************
 *
 *	Copyright (c) 2017-2022, INTO-CPS Association,
 *	c/o Professor Peter Gorm Larsen, Department of Engineering
 *	Finlandsgade 22, 8200 Aarhus N.
 *
 *	MIT Licence:
 *
 *	Permission is hereby granted, free of charge, to any person obtaining a copy of
 *	this software and associated documentation files (the "Software"), to deal in
 *	the Software without restriction, including without limitation the rights to use,
 *	copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 *	Software, and to permit persons to whom the Software is furnished to do so,
 *	subject to the following conditions:
 *
 *	The above copyright notice and this permission notice shall be included in all
 *	copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 *	INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 *	PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *	OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 *	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *	SPDX-License-Identifier: MIT
 *
 *********************************************************************************/

/**
 * 2.2.8 Definition of the Model Structure (ModelStructure)
 */
functions
	/**
	 * Validate an Unknown structure in isolation.
	 */
	isValidUnknown: Unknown +> bool
	isValidUnknown(u) ==
	-- @OnFail(1350, "2.2.8 Unknown %s has invalid dependencies/kinds at %s", u.index, loc2str(u.location))
	(
		if u.dependencies <> nil
		then u.dependenciesKind <> nil =>
			{
				-- @OnFail(1351, "2.2.8 Dependencies list does not match dependenciesKind at %s", loc2str(u.location))
				( len u.dependencies = len u.dependenciesKind ),

				/* @OnFail(1352, "2.2.8 Unknown has duplicate indexes %s at %s",
					{ u.dependencies(a) | a, b in set inds u.dependencies &
						a <> b and u.dependencies(a) = u.dependencies(b) }, loc2str(u.location)) */
				( len u.dependencies = card elems u.dependencies),

				-- @OnFail(1353, "2.2.8 Unknown cannot depend on itself at %s", loc2str(u.location))
				(true) -- CHECK THIS! ( u.index not in set elems u.dependencies )
			} = {true}
		else
			u.dependenciesKind = nil
	);

	/**
	 * Validation of a ModelStructure.
	 */
	isValidModelStructure: ModelStructure +> bool
	isValidModelStructure(ms) ==
	{
		-- @OnFail(1354, "2.2.8 ModelStructure has invalid Unknowns")
		(
			{
				list <> nil =>
					{ isValidUnknown(u) | u in seq list } = {true}

				| list in set {ms.outputs, ms.derivatives, ms.initialUnknowns}
			} = {true}
		),

		-- @OnFail(1355, "2.2.8 InitialUnknowns are not of kind dependent or constant")
		(
			ms.initialUnknowns <> nil =>
				forall iu in seq ms.initialUnknowns &
					iu.dependenciesKind <> nil =>
						forall dk in seq iu.dependenciesKind &
							 dk in set { <dependent>, <constant>, nil }
		)
	} = {true};

