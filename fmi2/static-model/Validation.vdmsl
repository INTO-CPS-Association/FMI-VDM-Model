/**
 * This file is part of the INTO-CPS toolchain.
 *
 * Copyright (c) 2017-2019, INTO-CPS Association,
 * c/o Professor Peter Gorm Larsen, Department of Engineering
 * Finlandsgade 22, 8200 Aarhus N.
 *
 * All rights reserved.
 *
 * THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR
 * THIS INTO-CPS ASSOCIATION PUBLIC LICENSE VERSION 1.0.
 * ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES
 * RECIPIENT'S ACCEPTANCE OF THE OSMC PUBLIC LICENSE OR THE GPL 
 * VERSION 3, ACCORDING TO RECIPIENTS CHOICE.
 *
 * The INTO-CPS toolchain  and the INTO-CPS Association Public License are
 * obtained from the INTO-CPS Association, either from the above address, from
 * the URLs: http://www.into-cps.org, and in the INTO-CPS toolchain distribution.
 * GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without
 * even the implied warranty of  MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH IN THE
 * BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF
 * THE INTO-CPS ASSOCIATION.
 *
 * See the full INTO-CPS Association Public License conditions for more details.
 */

/**
 * Functions to support the validation of FMU configuration files.
 */
functions
	/**
	 * This function is called via VDMCheck.sh and MaestroCheck, being passed a single
	 * XML type.
	 */
	isValidFMIConfiguration: FmiModelDescription | FmiBuildDescription | FmiTerminalsAndIcons +> bool
	isValidFMIConfiguration(conf) ==
		if is_(conf, FmiModelDescription)
		then isValidFMIModelDescription(conf)

		elseif is_(conf, FmiBuildDescription)
		then isValidFMIBuildDescription(conf)

		else if is_(conf, FmiTerminalsAndIcons)
		then isValidFMITerminalsAndIcons(conf)

		else undefined;		-- Undefined top level type

	/**
	 * This function is called via a VDMCheck.sh which uses FMUReader to generate all three
	 * XML files and check them in one pass.
	 */
	isValidFMIConfigurations: [FmiModelDescription] * [FmiBuildDescription] * [FmiTerminalsAndIcons] +> bool
	isValidFMIConfigurations(model, build, terminals) ==
	{
		model <> nil => isValidFMIModelDescription(model),
		build <> nil => isValidFMIBuildDescription(build),
		terminals <> nil => isValidFMITerminalsAndIcons(terminals)
	}
	= {true};

	