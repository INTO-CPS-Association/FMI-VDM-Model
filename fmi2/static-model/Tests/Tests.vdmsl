/*********************************************************************************
 *
 *	Copyright (c) 2017-2022, INTO-CPS Association,
 *	c/o Professor Peter Gorm Larsen, Department of Engineering
 *	Finlandsgade 22, 8200 Aarhus N.
 *
 *	MIT Licence:
 *
 *	Permission is hereby granted, free of charge, to any person obtaining a copy of
 *	this software and associated documentation files (the "Software"), to deal in
 *	the Software without restriction, including without limitation the rights to use,
 *	copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 *	Software, and to permit persons to whom the Software is furnished to do so,
 *	subject to the following conditions:
 *
 *	The above copyright notice and this permission notice shall be included in all
 *	copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 *	INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 *	PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *	OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 *	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *	SPDX-License-Identifier: MIT
 *
 *********************************************************************************/

/**
 * Various model tests
 */
traces
	/**
	 * Test the ScalarInvariant invariant function with all possible inputs - should return true/false (total)
	 * for every combination. Variable types are tested with "start" both defined and undefined.
	 */
	SVInvariantTotal:
		let c : [Causality] in
		let v : [Variability] in
		let i : [Initial] in
		let s in set
		{
			mk_Real(loc, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil),
			mk_Real(loc, nil, nil, nil, nil, nil, nil, nil, nil, nil, 1.23, nil, nil),
			mk_Integer(loc, nil, nil, nil, nil, nil),
			mk_Integer(loc, nil, nil, nil, nil, 123),
			mk_Boolean(loc, nil, nil),
			mk_Boolean(loc, nil, true),
			mk_String(loc, nil, nil),
			mk_String(loc, nil, "123")
		} in
		let a in set { mk_Tool(loc, "Annotation", mk_token("?")) }
		in
			isValidScalarVariable(mk_ScalarVariable(loc, "name", 0, nil, c, v, i, nil, s, [a]));

functions
	/**
	 * Test the ScalarVariable invariant for the table on p48, where the SV is valid or not
	 * for particular "initial" values, given a combination of causality and variability.
	 */
	testCausalityVariabilityInitial: () +> bool
	testCausalityVariabilityInitial() ==
		let nilv   = mk_Real(loc, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil),
		    startv = mk_Real(loc, nil, nil, nil, nil, nil, nil, nil, nil, nil, 1.0, nil, nil)
		in
			forall causality : Causality &
				forall variability : Variability &
					-- @Printf("Testing %s/%s ...\n", causality, variability)
					-- @OnFail("Test %s/%s failed", causality, variability)
					(cases causality:
						<parameter> ->
							cases variability:
								<fixed>, <tunable> ->
									isValidScalarVariable(mk_ScalarVariable(loc, "n", 0, nil, causality, variability, <exact>, nil, startv, nil)) and
									not isValidScalarVariable(mk_ScalarVariable(loc, "n", 0, nil, causality, variability, <approx>, nil, startv, nil)) and
									not isValidScalarVariable(mk_ScalarVariable(loc, "n", 0, nil, causality, variability, <calculated>, nil, nilv, nil)),

								<constant>, <discrete>, <continuous> ->
									forall initial : Initial &
										not isValidScalarVariable(mk_ScalarVariable(loc, "n", 0, nil, causality, variability, initial, nil, nilv, nil))
							end,

						<calculatedParameter> ->
							cases variability:
								<fixed>, <tunable> ->
									isValidScalarVariable(mk_ScalarVariable(loc, "n", 0, nil, causality, variability, <calculated>, nil, nilv, nil)) and
									isValidScalarVariable(mk_ScalarVariable(loc, "n", 0, nil, causality, variability, <approx>, nil, startv, nil)) and
									not isValidScalarVariable(mk_ScalarVariable(loc, "n", 0, nil, causality, variability, <exact>, nil, nilv, nil)),

								<constant>, <discrete>, <continuous> ->
									forall initial : Initial &
										not isValidScalarVariable(mk_ScalarVariable(loc, "n", 0, nil, causality, variability, initial, nil, nilv, nil))
							end,

						<input> ->
							cases variability:
								<discrete>, <continuous> ->
									isValidScalarVariable(mk_ScalarVariable(loc, "n", 0, nil, causality, variability, nil, nil, startv, nil)) and
									not isValidScalarVariable(mk_ScalarVariable(loc, "n", 0, nil, causality, variability, <calculated>, nil, nilv, nil)) and
									not isValidScalarVariable(mk_ScalarVariable(loc, "n", 0, nil, causality, variability, <approx>, nil, startv, nil)) and
									not isValidScalarVariable(mk_ScalarVariable(loc, "n", 0, nil, causality, variability, <exact>, nil, nilv, nil)),

								<constant>, <fixed>, <tunable> ->
									forall initial : Initial &
										not isValidScalarVariable(mk_ScalarVariable(loc, "n", 0, nil, causality, variability, initial, nil, nilv, nil))
							end,

						<output> ->
							cases variability:
								<constant> ->
									isValidScalarVariable(mk_ScalarVariable(loc, "n", 0, nil, causality, variability, <exact>, nil, startv, nil)) and
									not isValidScalarVariable(mk_ScalarVariable(loc, "n", 0, nil, causality, variability, <calculated>, nil, nilv, nil)) and
									not isValidScalarVariable(mk_ScalarVariable(loc, "n", 0, nil, causality, variability, <approx>, nil, startv, nil)),

								<discrete>, <continuous> ->
									isValidScalarVariable(mk_ScalarVariable(loc, "n", 0, nil, causality, variability, <calculated>, nil, nilv, nil)) and
									isValidScalarVariable(mk_ScalarVariable(loc, "n", 0, nil, causality, variability, <exact>, nil, startv, nil))
									and isValidScalarVariable(mk_ScalarVariable(loc, "n", 0, nil, causality, variability, <approx>, nil, startv, nil)),

								<fixed>, <tunable> ->
									forall initial : Initial &
										not isValidScalarVariable(mk_ScalarVariable(loc, "n", 0, nil, causality, variability, initial, nil, nilv, nil))
							end,

						<local> ->
							cases variability:
								<constant> ->
									isValidScalarVariable(mk_ScalarVariable(loc, "n", 0, nil, causality, variability, <exact>, nil, startv, nil)) and
									not isValidScalarVariable(mk_ScalarVariable(loc, "n", 0, nil, causality, variability, <calculated>, nil, nilv, nil)) and
									not isValidScalarVariable(mk_ScalarVariable(loc, "n", 0, nil, causality, variability, <approx>, nil, startv, nil)),

								<fixed>, <tunable> ->
									isValidScalarVariable(mk_ScalarVariable(loc, "n", 0, nil, causality, variability, <calculated>, nil, nilv, nil)) and
									isValidScalarVariable(mk_ScalarVariable(loc, "n", 0, nil, causality, variability, <approx>, nil, startv, nil)) and
									not isValidScalarVariable(mk_ScalarVariable(loc, "n", 0, nil, causality, variability, <exact>, nil, startv, nil)),

								<discrete>, <continuous> ->
									isValidScalarVariable(mk_ScalarVariable(loc, "n", 0, nil, causality, variability, <calculated>, nil, nilv, nil)) and
									isValidScalarVariable(mk_ScalarVariable(loc, "n", 0, nil, causality, variability, <approx>, nil, startv, nil)) and
									isValidScalarVariable(mk_ScalarVariable(loc, "n", 0, nil, causality, variability, <exact>, nil, startv, nil))
							end,

						<independent> ->
							forall initial : Initial &
								not isValidScalarVariable(mk_ScalarVariable(loc, "n", 0, nil, causality, variability, initial, nil, nilv, nil))
					end);

	testStructuredNames: () +> seq of bool
	testStructuredNames() ==
	[
		isValidStructuredName("der(a.b.c,3)"),
		isValidStructuredName("der(a)"),
		isValidStructuredName("a"),
		isValidStructuredName("'!#$'"),
		isValidStructuredName("a[1]"),
		isValidStructuredName("_abc[1,2,3]"),
		isValidStructuredName("xyz.abc.def[1,2,3]"),
		isValidStructuredName("'!!!\\?'.a10[1,2,3]"),
		isValidStructuredName("a20[1,2,3].def[1]"),
		isValidStructuredName("'\\\"\\?\\\\'"),
		not isValidStructuredName("a[1,]"),
		not isValidStructuredName("[1]"),
		not isValidStructuredName("'1@"),
		not isValidStructuredName("ABC..DEF"),
		not isValidStructuredName("ABC[1]..DEF")
	];

values
--	test: () +> bool
--	test() ==
--	isValidFMIModelDescription

	/**
	 * This test model is based on the example on p62
	 */
	example = mk_FmiModelDescription
	(
		loc,

		-- Attributes
		"2.0", "Example FMU", "GUID", nil, nil, nil, nil, nil, nil, nil, nil, nil,

		-- Model Types
		mk_ModelExchange(loc, "example", nil, nil, nil, nil, nil, nil, nil, nil),
		nil,

		-- Unit definitions
		nil,

		-- TypeDefinitions
		[
			mk_SimpleType(loc, "Real-1-10",      nil, mk_RealType(loc, nil, nil, nil, nil, 1, 10, nil, nil)),
			mk_SimpleType(loc, "Real-Positive",	 nil, mk_RealType(loc, nil, nil, nil, nil, 0, nil, nil, nil)),
			mk_SimpleType(loc, "Real-Undefined", nil, mk_RealType(loc, nil, nil, nil, nil, nil, nil, nil, nil))
		],

		-- Log categories
		nil,

		-- Default experiment
		nil,

		-- Vendor annotations
		nil,

		-- ScalarVariables
		[
			mk_ScalarVariable(loc, "p", 0, nil,		<parameter>, <fixed>,		nil, nil,
			     mk_Real(loc, "Real-Positive", nil, nil, nil, nil,  0, 10, nil, nil, 1, nil, nil), nil),	-- 1
			mk_ScalarVariable(loc, "u1", 1, nil,		<input>, <continuous>,		nil, nil,
			     mk_Real(loc, "Real-Positive", nil, nil, nil, nil, 0, 10, nil, nil, 1, nil, nil), nil),	-- 2
			mk_ScalarVariable(loc, "u2", 2, nil,		<input>, <continuous>,		nil, nil,
			     mk_Real(loc, "Real-Positive", nil, nil, nil, nil, 0, 10, nil, nil, 1, nil, nil), nil),	-- 3
			mk_ScalarVariable(loc, "u3", 3, nil,		<input>, <discrete>,		nil, nil,
			     mk_Real(loc, "Real-Positive", nil, nil, nil, nil, 0, 10, nil, nil, 1, nil, nil), nil),	-- 4
			mk_ScalarVariable(loc, "x1", 4, nil,		<input>, <continuous>,		nil, nil,
			     mk_Real(loc, "Real-Undefined", nil, nil, nil, nil, 0, 10, nil, nil, 1, nil, nil), nil),	-- 5
			mk_ScalarVariable(loc, "x2", 5, nil,		<local>, <continuous>,		nil, nil,
			     mk_Real(loc, "Real-Undefined", nil, nil, nil, nil, 0, 10, nil, nil, nil, nil, nil), nil),	-- 6
			mk_ScalarVariable(loc, "x3", 6, nil,		<local>, <continuous>,		nil, nil,
			     mk_Real(loc, "Real-Undefined", nil, nil, nil, nil, 0, 10, nil, nil, nil, nil, nil), nil),	-- 7
			mk_ScalarVariable(loc, "der(x1)", 7, nil,	<calculatedParameter>, <tunable>,	nil, nil,
			     mk_Real(loc, "Real-Positive", nil, nil, nil, nil, 0, 10, nil, nil, nil, 5, nil), nil),	-- 8
			mk_ScalarVariable(loc, "der(x2)",	8, nil,	<calculatedParameter>, <tunable>,	nil, nil,
			     mk_Real(loc, "Real-Positive", nil, nil, nil, nil, 0, 10, nil, nil, nil, 6, nil), nil),	-- 9
			mk_ScalarVariable(loc, "der(x3)",	9, nil,	<calculatedParameter>, <tunable>,	nil, nil,
			     mk_Real(loc, "Real-Positive", nil, nil, nil, nil, 0, 10, nil, nil, nil, 7, nil), nil),	-- 10
			mk_ScalarVariable(loc, "y", 10, nil,		<output>, <continuous>,		nil, nil,
			     mk_Real(loc, "Real-Positive", nil, nil, nil, nil, 0, 10, nil, nil, nil, nil, nil), nil)	-- 11
		],

		mk_ModelStructure
		(
			loc,
			-- Outputs
			[
				mk_Unknown(loc, 11,	[6, 7], nil)
			],
			-- Derivatives
			nil,
			-- InitialUnknowns
			[
				-- mk_Unknown(0, 6,	[2, 4, 5], nil),
				-- mk_Unknown(0, 7,	[2, 4, 5, 11], nil),
				mk_Unknown(loc, 8,	nil, nil),
				mk_Unknown(loc, 9,	nil, nil),
				mk_Unknown(loc, 10,	nil, nil),
				mk_Unknown(loc, 11,	nil, nil)
			]
		)
	);

functions
	/**
	 * Run all tests and check that they pass.
	 */
	tests: () +> seq of bool
	tests() ==
	[
		testCausalityVariabilityInitial(),
		isValidFMIModelDescription(example),
		isValidFMIModelDescription(springMassDamper)
	]
	^	testStructuredNames()

	post elems RESULT = {true};
