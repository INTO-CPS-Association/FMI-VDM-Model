/**
 * This file is part of the INTO-CPS toolchain.
 *
 * Copyright (c) 2017-2019, INTO-CPS Association,
 * c/o Professor Peter Gorm Larsen, Department of Engineering
 * Finlandsgade 22, 8200 Aarhus N.
 *
 * All rights reserved.
 *
 * THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR
 * THIS INTO-CPS ASSOCIATION PUBLIC LICENSE VERSION 1.0.
 * ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES
 * RECIPIENT'S ACCEPTANCE OF THE OSMC PUBLIC LICENSE OR THE GPL 
 * VERSION 3, ACCORDING TO RECIPIENTS CHOICE.
 *
 * The INTO-CPS toolchain  and the INTO-CPS Association Public License are
 * obtained from the INTO-CPS Association, either from the above address, from
 * the URLs: http://www.into-cps.org, and in the INTO-CPS toolchain distribution.
 * GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without
 * even the implied warranty of  MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH IN THE
 * BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF
 * THE INTO-CPS ASSOCIATION.
 *
 * See the full INTO-CPS Association Public License conditions for more details.
 */

/**
 * 2.2.1 Definition of an FMU (fmiModelDescription)
 */
functions
	/**
	 * Valid description attributes.
	 */
	isValidModelAttributes: FmiModelDescription +> bool
	isValidModelAttributes(md) ==
		-- @OnFail(1000, "2.2.1 ModelAttribute fmiVersion should be 2.0")
		( md.fmiVersion in set { "2.0" } );

	/**
	 * Invariant definition for FMIModelDescription
	 */
	isValidFMIModelDescription: FmiModelDescription +> bool
	isValidFMIModelDescription(md) ==
		-- First fill in effective values for model variables' missing attributes
		let eModelVariables = effectiveScalarVariables(md) in
		{
			-- @OnFail(1001, "2.2.1 ModelAttributes invalid at line %s", md.location)
			( isValidModelAttributes(md) ),

			-- @OnFail(1002, "2.2.1 ModelExchange invalid at line %s", md.modelExchange.location)
			( isValidModelExchange(md.modelExchange) ),

			-- @OnFail(1003, "2.2.1 CoSimulation invalid at line %s", md.coSimulation.location)
			( isValidCoSimulation(md.coSimulation) ),

			-- @OnFail(1004, "2.2.1 UnitDefinitions invalid"))
			( isValidUnitDefinitions(md.unitDefinitions) ),

			-- @OnFail(1005, "2.2.1 TypeDefinitions invalid")
			( isValidTypeDefinitions(md.typeDefinitions) ),

			-- @OnFail(1006, "2.2.1 LogCategories invalid")
			( isValidLogCategories(md.logCategories) ),

			-- @OnFail(1007, "2.2.1 DefaultExperiment invalid at line %s", md.defaultExperiment.location)
			( isValidDefaultExperiment(md.defaultExperiment) ),

			-- @OnFail(1008, "2.2.1 VendorAnnotations invalid")
			( isValidVendorAnnotations(md.vendorAnnotations) ),

			-- @OnFail(1009, "2.2.1 ScalarVariables invalid")
			( isValidScalarVariables(md.modelVariables) ),			-- NOTE: NOT effective variables!

			-- @OnFail(1010, "2.2.1 Effective ScalarVariables invalid")
			( isValidEffectiveVariables(eModelVariables) ),			-- NOTE: effective variables!

			-- @OnFail(1011, "2.2.1 ScalarVariables typecheck against TypeDefinitions failed")
			( typeCheck(eModelVariables, md.typeDefinitions) ),

			-- @OnFail(1012, "2.2.1 ModelStructure invalid at line %s", md.modelStructure.location)
			( isValidModelStructure(md.modelStructure) ),

			-- @OnFail(1013, "2.2.1 Neither ModelExchange nor CoSimulation specified")
			( md.modelExchange <> nil or md.coSimulation <> nil ),

			(
				md.variableNamingConvention = <structured> =>
					dunion
					{
						{
							-- @OnFail(1014, "2.2.9 Structured name %s invalid at line %s", sv.name, sv.location)
							( isValidStructuredName(sv.name) ),

							-- @OnFail(1015, "2.2.9 Name %s is not Real at line %s", sv.name, sv.location)
							( sv.name(1, ..., 4) = "der(" => is_Real(sv.fmi2ScalarVariable) )
						}

						| sv in seq eModelVariables
					}
					= {true}
			),

			(
				md.typeDefinitions <> nil =>
					{
						/* @OnFail(1016, "2.2.3 TypeDefinition and ScalarVariable names overlap: %s at line %s",
								simpleType.name, simpleType.location) */
						( not exists sv in seq eModelVariables & sv.name = simpleType.name )

						| simpleType in seq md.typeDefinitions
					} = {true}
			),

			(
				md.typeDefinitions <> nil =>
					{
						is_RealType(std.fmi2SimpleType) =>
							std.fmi2SimpleType.unit <> nil =>
								/* @OnFail(1017, "2.2.3 SimpleType %s, Real unit %s not defined in UnitDefinitions at line %s",
									std.name, std.fmi2SimpleType.unit, std.location) */
								( md.unitDefinitions <> nil
								  and exists u in seq md.unitDefinitions & u.name = std.fmi2SimpleType.unit )

						| std in seq md.typeDefinitions
					} = {true}
			),

			(
				{
					sv.canHandleMultipleSetPerTimeInstant <> nil =>
						/* @OnFail(1018, "2.2.7 ScalarVariable %s, canHandleMultipleSetPerTimeInstant invalid at line %s",
							sv.name, sv.location) */
						( md.modelExchange <> nil and sv.causality = <input> )

					| sv in seq eModelVariables
				} = {true}
			),

			(
				{
					is_Real(sv.fmi2ScalarVariable) =>
					{
						/* @OnFail(1019, "2.2.7 ScalarVariable %s, Real unit must be defined for displayUnit %s at line %s",
							sv.name, sv.fmi2ScalarVariable.displayUnit, sv.location) */
						( sv.fmi2ScalarVariable.displayUnit <> nil => sv.fmi2ScalarVariable.unit <> nil ),

						sv.fmi2ScalarVariable.unit <> nil =>
							/* @OnFail(1020, "2.2.7 ScalarVariable %s, Real unit %s not defined in UnitDefinitions at line %s",
								sv.name, sv.fmi2ScalarVariable.unit, sv.location) */
							( md.unitDefinitions <> nil
							  and exists u in seq md.unitDefinitions & u.name = sv.fmi2ScalarVariable.unit )
					}
					= {true}

					| sv in seq eModelVariables
				} = {true}
			),

			(
				{
					let sv = eModelVariables(svi) in
						is_Real(sv.fmi2ScalarVariable) and sv.fmi2ScalarVariable.reinit <> nil =>
						/* @OnFail(1021, "2.2.7 ScalarVariable %s, Real reinit for model exchange continuous time only at line %s",
								sv.name, sv.location) */
						( isContinuousTimeState(svi, eModelVariables) and md.modelExchange <> nil )

					| svi in set inds eModelVariables
				} = {true}
			),

			(
				let outputIndexes = { svi | svi in set inds eModelVariables &
					eModelVariables(svi).causality = <output> }
				in
					if outputIndexes <> {}
					then
						/* @OnFail(1022, "2.2.8 Output variables but no outputs declared at line %s",
							md.modelStructure.location) */
						( md.modelStructure.outputs <> nil )

						and let structIndexes = { u.index | u in seq md.modelStructure.outputs } in
						{
							/* @OnFail(1023, "2.2.8 Outputs section does not match output variables at line %s",
								md.modelStructure.location) */
							( structIndexes = outputIndexes ),

							/* @OnFail(1024, "2.2.8 Output indexes out of range at line %s",
								md.modelStructure.location) */
							( forall i in set structIndexes & i <= len eModelVariables )
						} = {true}
					else
						/* @OnFail(1025, "2.2.8 Outputs should be omitted at line %s",
							md.modelStructure.location) */
						( md.modelStructure.outputs = nil )
			),

			-- ModelStructure derivative indexes must be valid and if the derivative has dependencies, then
			-- it must be continuous. Note that SVs can have derivative set but not be listed here.
			(
				md.modelExchange <> nil
				or (md.coSimulation <> nil and nilBool(md.coSimulation.providesDirectionalDerivative)) =>
					md.modelStructure.derivatives <> nil =>
					{
						/* @OnFail(1026, "2.2.8 Derivative index out of range at line %s", u.location) */
						( u.index <= len eModelVariables )

						and let sv = eModelVariables(u.index) in
						{
							/* @OnFail(1027, "2.2.8 SV not a state derivative at line %s", u.location) */
							( isStateDerivative(sv) ),

							/* @OnFail(1028, "2.2.8 Derivative must be continuous at line %s", u.location) */
							( u.dependencies <> nil => sv.variability = <continuous> )
						}
						= {true}

						| u in seq md.modelStructure.derivatives
					}
					= {true}
			),

			-- InitalUnknowns must include all output (approx/calculated), calculatedParameters and 
			-- all continuous-time states and derivatives that are approx/calculated.
			-- And the list must be in ascending index order
			(
				let ctVars = continuousTimeStates(eModelVariables),
					sdVars = stateDerivatives(eModelVariables),
					initIndexes = { svi | svi in set inds eModelVariables &
						let sv = eModelVariables(svi) in
							(sv.causality = <output>
								and sv.initial in set { <approx>, <calculated> })

							or (sv.causality = <calculatedParameter>)

							or (sv in set ctVars
								and sv.initial in set { <approx>, <calculated> })

							or (sv in set sdVars
								and sv.initial in set { <approx>, <calculated> }) }
				in
					initIndexes <> {} =>
						let ius = md.modelStructure.initialUnknowns in
						{
							-- @OnFail(1029, "2.2.8 InitialUnknowns must include: %s", initIndexes)
							( ius <> nil ),

							-- @OnFail(1030, "2.2.8 InitialUnknowns must not include: %s", { u.index | u in seq ius } \ initIndexes )
							( ius <> nil => { u.index | u in seq ius } subset initIndexes ),

							-- @OnFail(1031, "2.2.8 InitialUnknowns are not sorted: %s", [ u.index | u in seq ius ])
							( ius <> nil => 
									forall i in set inds ius &
										i = len ius or ius(i).index < ius(i+1).index )
						} = {true}
			)
		} = {true};

	/**
	 * Check that all variables' declaredTypes are defined, that the variables' types match
	 * the declared types.
	 */
	typeCheck: seq1 of ScalarVariable * [set1 of SimpleType] +> bool
	typeCheck(variables, typedefs) ==
		{
			let dname = sv.fmi2ScalarVariable.declaredType in
				dname <> nil =>
					let matchingTypes = { td | td in set nilSet[SimpleType](typedefs) & td.name = dname } in
					{
						/* @OnFail(1032, "2.2.3 Typedefs have multiple matching names: %s",
							{ m.name | m in set matchingTypes } ) */
						( matchingTypes <> {} => card matchingTypes = 1 ),

						/* @OnFail(1033, "2.2.3 Declared type %s unknown at line %s",
							sv.fmi2ScalarVariable.declaredType, sv.location ) */
						( card matchingTypes <> 0 ),

						-- The match is has compatible values in the ScalarVariable
						card matchingTypes = 1 => let { simpleType } = matchingTypes in
							cases simpleType.fmi2SimpleType:
								mk_RealType(-, -, -, -, -, min, max, -, -) ->
									/* @OnFail(1034, "2.2.7 ScalarVariable %s min/max exceeds RealType %s at line %s",
										sv.name, sv.fmi2ScalarVariable.declaredType, sv.location) */
									( (min <> nil and sv.fmi2ScalarVariable.min <> nil => min <= sv.fmi2ScalarVariable.min)
										and
									  (max <> nil and sv.fmi2ScalarVariable.max <> nil => max >= sv.fmi2ScalarVariable.max) ),

								mk_IntegerType(-, -, min, max) ->
									/* @OnFail(1035, "2.2.7 ScalarVariable %s min/max exceeds IntegerType %s at line %s",
										sv.name, sv.fmi2ScalarVariable.declaredType, sv.location) */
									( (min <> nil and sv.fmi2ScalarVariable.min <> nil => min <= sv.fmi2ScalarVariable.min)
										and
									  (max <> nil and sv.fmi2ScalarVariable.max <> nil => max >= sv.fmi2ScalarVariable.max) ),

								others -> true
							end,

						-- The match is the same type as the ScalarVariable type and for numerics,
						card matchingTypes = 1 => let { simpleType } = matchingTypes in
							cases simpleType.fmi2SimpleType:
								mk_RealType(-, -, -, -, -, -, -, -, -) ->
									/* @OnFail(1036, "2.2.7 ScalarVariable %s, RealType not referenced by Real variable %s at line %s",
										sv.name, sv.fmi2ScalarVariable.declaredType, sv.location) */
									( is_Real(sv.fmi2ScalarVariable) ),

								mk_IntegerType(-, -, -, -) ->
									/* @OnFail(1037, "2.2.7 ScalarVariable %s, IntegerType not referenced by Integer variable %s at line %s",
										sv.name, sv.fmi2ScalarVariable.declaredType, sv.location) */
									( is_Integer(sv.fmi2ScalarVariable) ),

								mk_BooleanType(-) ->
									/* @OnFail(1038, "2.2.7 ScalarVariable %s, BooleanType not referenced by Boolean variable %s at line %s",
										sv.name, sv.fmi2ScalarVariable.declaredType, sv.location) */
									( is_Boolean(sv.fmi2ScalarVariable) ),

								mk_StringType(-) ->
									/* @OnFail(1039, "2.2.7 ScalarVariable %s, StringType not referenced by String variable %s at line %s",
										sv.name, sv.fmi2ScalarVariable.declaredType, sv.location) */
									( is_String(sv.fmi2ScalarVariable) ),

								mk_EnumerationType(-, -, -) ->
									/* @OnFail(1040, "2.2.7 ScalarVariable %s, EnumerationType not referenced by Enumeration variable %s at line %s",
										sv.name, sv.fmi2ScalarVariable.declaredType, sv.location) */
									( is_Enumeration(sv.fmi2ScalarVariable) )
							end
					} = {true}
			| sv in seq variables
		} = {true};
