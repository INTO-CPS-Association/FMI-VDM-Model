/*********************************************************************************
 *
 *	Copyright (c) 2017-2022, INTO-CPS Association,
 *	c/o Professor Peter Gorm Larsen, Department of Engineering
 *	Finlandsgade 22, 8200 Aarhus N.
 *
 *	MIT Licence:
 *
 *	Permission is hereby granted, free of charge, to any person obtaining a copy of
 *	this software and associated documentation files (the "Software"), to deal in
 *	the Software without restriction, including without limitation the rights to use,
 *	copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 *	Software, and to permit persons to whom the Software is furnished to do so,
 *	subject to the following conditions:
 *
 *	The above copyright notice and this permission notice shall be included in all
 *	copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 *	INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 *	PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *	OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 *	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *	SPDX-License-Identifier: MIT
 *
 *********************************************************************************/

/**
 * 2.2.3 Definition of Types (TypeDefinitions)
 */
types
	Kind = <Real> | <Integer> | <Boolean> | <String>;	-- Note: Enumeration is Integer

functions
	isValidType: SimpleType +> bool
	isValidType(stype) ==
		cases stype.fmi2SimpleType:
			mk_RealType(-, -, unit, dunit, -, min, max, -, -) ->
			{
				-- @OnFail(1100, "2.2.3 SimpleType %s, Real max %s not >= min %s", stype.name, max, min)
				( max <> nil and min <> nil => max >= min ),

				-- @OnFail(1101, "2.2.3 SimpleType %s, Real unit must be defined for displayUnit %s", stype.name, dunit)
				( dunit <> nil => unit <> nil )
			} = {true},

			mk_IntegerType(-, -, min, max) ->
				-- @OnFail(1102, "2.2.3 SimpleType %s, Integer max %s not >= min %s", stype.name, max, min)
				( max <> nil and min <> nil => max >= min ),

			-- Items of an enumeration as a sequence of "name" and "value" pairs. The
			-- values can be any integer number, but must be unique within the same
			-- enumeration (in order that the mapping between "name" and "value" is
			-- bijective). An Enumeration element must have at least one Item.

			mk_EnumerationType(-, -, items) ->
				-- @OnFail(1103, "2.2.3 SimpleType %s, EnumerationType item name/values do not form a bijection", stype.name)
				(
					card { i.name | i in seq items } = len items
					and	card { i.value | i in seq items } = len items
				),

			others -> true		-- String and Boolean
		end;

	isValidTypeDefinitions: [seq1 of SimpleType] +> bool
	isValidTypeDefinitions(defs) ==
		defs <> nil =>
			{
				/* @OnFail(1104, "2.2.3 TypeDefinitions names are not unique: %s",
					{ a.name | a, b in seq defs & a <> b and a.name = b.name }) */
				( card { stype.name | stype in seq defs } = len defs )
			}
			union
			{
				-- @OnFail(1105, "2.2.3 TypeDefinition %s invalid at %s", stype.name, loc2str(stype.location))
				( isValidType(stype) )

				| stype in seq defs
			} = {true};

