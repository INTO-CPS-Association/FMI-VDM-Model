/*********************************************************************************
 *
 *	Copyright (c) 2017-2022, INTO-CPS Association,
 *	c/o Professor Peter Gorm Larsen, Department of Engineering
 *	Finlandsgade 22, 8200 Aarhus N.
 *
 *	MIT Licence:
 *
 *	Permission is hereby granted, free of charge, to any person obtaining a copy of
 *	this software and associated documentation files (the "Software"), to deal in
 *	the Software without restriction, including without limitation the rights to use,
 *	copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 *	Software, and to permit persons to whom the Software is furnished to do so,
 *	subject to the following conditions:
 *
 *	The above copyright notice and this permission notice shall be included in all
 *	copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 *	INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 *	PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *	OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 *	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *	SPDX-License-Identifier: MIT
 *
 *********************************************************************************/

/**
 * 4.3.1 Definition of a CoSimulation section of an FMU.
 */
functions
	/**
	 * Apply defaults to return effective CoSimulation settings.
	 */
	effCoSimulation: CoSimulation +> CoSimulation
	effCoSimulation(cs) ==
		mk_CoSimulation
		(
			cs.location,
			cs.modelIdentifier,
			nilBool(cs.needsExecutionTool),
			nilBool(cs.canHandleVariableCommunicationStepSize),
			nilBool(cs.canInterpolateInputs),
			nilNat(cs.maxOutputDerivativeOrder),
			nilBool(cs.canRunAsynchronuously),
			nilBool(cs.canBeInstantiatedOnlyOncePerProcess),
			nilBool(cs.canNotUseMemoryManagementFunctions),
			nilBool(cs.canGetAndSetFMUstate),
			nilBool(cs.canSerializeFMUstate),
			nilBool(cs.providesDirectionalDerivative),
			nilSeq[File](cs.sourceFiles)
		);

	/**
	 * Check CoSimulation values.
	 */
	isValidCoSimulation: [CoSimulation] +> bool
	isValidCoSimulation(cs) ==
		cs <> nil =>
		{
			cs.sourceFiles <> nil =>
				/* @OnFail(1450, "4.3.1 CoSimulation source file names are not unique: %s",
					let files = cs.sourceFiles in
						{ files(a) | a, b in set inds files &
							a <> b and files(a) = files(b) })

					The file names within the sequence of source files listed for the CoSimulation
					must be unique. This is determined by checking that the set of names is the same
					size as the length of the list of source files.
				 */
				( len cs.sourceFiles = card { name | name in seq cs.sourceFiles } ),

			/* @OnFail(1451, "4.3.1 CoSimulation modelIdentifer %s not valid C variable name at %s",
						cs.modelIdentifier, loc2str(cs.location)) */
			( cs.modelIdentifier <> ""
			  and cs.modelIdentifier(1) in set elems NONDIGITS )
		}
		= {true};
