/**
 * This file is part of the INTO-CPS toolchain.
 *
 * Copyright (c) 2017-2019, INTO-CPS Association,
 * c/o Professor Peter Gorm Larsen, Department of Engineering
 * Finlandsgade 22, 8200 Aarhus N.
 *
 * All rights reserved.
 *
 * THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR
 * THIS INTO-CPS ASSOCIATION PUBLIC LICENSE VERSION 1.0.
 * ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES
 * RECIPIENT'S ACCEPTANCE OF THE OSMC PUBLIC LICENSE OR THE GPL 
 * VERSION 3, ACCORDING TO RECIPIENTS CHOICE.
 *
 * The INTO-CPS toolchain  and the INTO-CPS Association Public License are
 * obtained from the INTO-CPS Association, either from the above address, from
 * the URLs: http://www.into-cps.org, and in the INTO-CPS toolchain distribution.
 * GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without
 * even the implied warranty of  MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH IN THE
 * BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF
 * THE INTO-CPS ASSOCIATION.
 *
 * See the full INTO-CPS Association Public License conditions for more details.
 */
functions
    -- All connections are synchronized meaning the input and output value is identical
    variablesSynchronized: Machine -> bool
    variablesSynchronized(M) ==
        forall srcPort in set dom M.connections &
            let trgPort = M.connections(srcPort) in
            (M.fmus(srcPort.name)).env(srcPort.ref) = (M.fmus(trgPort.name)).env(trgPort.ref);


	/*
	 * Is an Action activated?
	 * It is if the Importer think that its precondition is satisfied
	 */
	isActionEnabled : Importer * Action -> bool
	isActionEnabled(I, A) ==
		cases A:
		mk_Action(<get>, fmu, port) -> preGetI(I, I.scenario.fmus(fmu), port),
		mk_Action(<set>, fmu, port) -> preSetI(I, I.scenario.fmus(fmu), port),
		mk_Action(<step>, fmu, -) -> preStepI(I, I.scenario.fmus(fmu)),
		mk_Action(<setC>, fmu, clock) -> preSetCI(I, I.scenario.fmus(fmu), clock),
		mk_Action(<getC>, fmu, clock) -> preGetCI(I, I.scenario.fmus(fmu), clock),
		others -> false --default Match
	end;

	/*
		The preconditions of the actions from the Importer's perspective
        The Importer can look at the global state of the simulation to ensure synchronization between the FMUs
        But it does also ensure that the precondition of the action is satisfied
	*/
	preSetI: Importer * FMU * Ref -> bool
	preSetI(I, fmu, port)==
		let input = derefInput(fmu, port),
			fmuRef = mk_FMURef(fmu.name, port) in
		(fmu.mode = <EVENT> <=> fmuRef in set (I.activeEquations \ I.calculatedEquations) and input.type = <discrete>)
		and (fmu.mode = <STEP> => input.type = <continous>)
		and preSet(fmu, port)
		and fmuRef in set dom I.valueMap;

	preGetI: Importer * FMU * Ref -> bool
	preGetI(I, fmu, port)==
		let output = derefOutput(fmu, port),
			fmuRef = mk_FMURef(fmu.name, port),
			connectedInput = I.scenario.connections(fmuRef) in
			let input = derefInput(I.scenario.fmus(connectedInput.name), connectedInput.ref) in
		(fmu.mode = <EVENT> <=> fmuRef in set (I.activeEquations \ I.calculatedEquations) and output.type = <discrete>)
		and (fmu.mode = <STEP> => (output.type = <continous> and (input.contract = <delayed> => fmu.stepped)))
		and preGet(fmu, port)
		and connectedInput not in set dom I.valueMap;

	preStepI: Importer * FMU -> bool
	preStepI(I, fmu) ==
		not exists m in set rng I.scenario.fmus 
								& m.name <> fmu.name and m.time < fmu.time
		and
			preStepT(fmu, I.stepSize);

	preGetCI: Importer * FMU * Ref -> bool
	preGetCI(I, fmu, clock) ==
		let output = mk_FMURef(fmu.name, clock) in
			output in set I.relevantOutputClocks
				and preGetC(fmu, clock);
	
	preSetCI: Importer * FMU * Ref -> bool
	preSetCI(I, fmu, clock) ==
		let input = mk_FMURef(fmu.name, clock) in
			input in set dom I.valueMap and
			input in set I.relevantInputClocks and
		let val = I.valueMap(input) in
			preSetC(fmu, clock, val.value)
			and 
			(val.value <=> input in set I.inactiveClocks inter I.readyClocks);


	/*
		The preconditions of the actions from the paper - notice that the actions are only valid when the FMUs are not in the done state
	*/

	preSet: FMU * Ref -> bool
	preSet(fmu, input)==
		exists v in set fmu.inputs & v.ref = input and v.causality = <input>
			and fmu.mode <> <DONE>;
	
	/*
		
	 */
	preGet: FMU * Ref -> bool
	preGet(fmu, ref)==
		let output = derefOutput(fmu, ref) in
		(exists1 v in set fmu.outputs & v.ref = ref and v.causality = <output>)
			and fmu.mode <> <DONE>
			and feedthroughSatisfied(fmu, output);

	preStepT: FMU * real -> bool
	preStepT(fmu, stepSize)==
		forall i in set fmu.inputs &
			 		(i.contract = <reactive> => fmu.env(i.ref).time.r = fmu.time.r + stepSize)
					and (i.contract = <delayed> => fmu.env(i.ref).time = fmu.time)
			and stepSize >= 0.0 and fmu.mode = <STEP>;

	preStepE: FMU -> bool
	preStepE(fmu)==
		fmu.mode = <EVENT>;

	preSetC: FMU * Ref * bool -> bool
	preSetC(fmu, clock, val)==
	 	exists v in set fmu.clocks & v.ref = clock and v.type = <input>
			and val <=> not clock in set fmu.activeClocks -- We can only activate a clock that 
            and fmu.mode = <EVENT>;

	preGetC: FMU * Ref -> bool
	preGetC(fmu, clock)==
	 	exists v in set fmu.clocks & v.ref = clock and v.type = <output>
		 and fmu.mode = <EVENT>; -- We can only get an output clock

	feedthroughSatisfied : FMU * Variable -> bool
	feedthroughSatisfied(fmu, output)==
		let inputs = {input | input in set fmu.inputs & input.ref in set output.dependsOn} in
		forall i in set inputs &
				i.ref in set dom fmu.env
				and (i.contract = <reactive> => fmu.env(i.ref).time >= fmu.time)
				and (i.contract = <delayed> => fmu.env(i.ref).time = fmu.time);

	fmusSynchronized: set of FMU -> bool
	fmusSynchronized(fmus) ==
		 card { fmu.time | fmu in set fmus } = 1;

	fmusSynchronizedAtTime: set of FMU * Time -> bool
	fmusSynchronizedAtTime(fmus, t) ==
		 fmusSynchronized(fmus)
		 	and forall fmu in set fmus & fmu.time = t;

    eventSolved : Importer * set of FMU * set of FMU -> bool
    eventSolved(I, newFmus, oldFmus) ==
            assertFMUMode(newFmus, {<EVENT>})
            and timeAdvanced(newFmus, oldFmus, true)
            and I.activeEquations \ I.calculatedEquations = {} -- Event solved
            and I.relevantInputClocks union I.relevantOutputClocks = {} -- no more clocks to activate
        pre sameSetOfFMUs(newFmus, oldFmus);

    /*
        Asserts that all FMUs are in the same state/mode
     */
    assertFMUMode : set of FMU * set of FMUMode -> bool
    assertFMUMode(fmus, modes) ==
        exists1 mode in set modes &
            forall fmu in set fmus & fmu.mode = mode;


    timeAdvanced: set of FMU * set of FMU * bool -> bool
    timeAdvanced(newFMUs, oldFMUs, discreteTime) ==
        forall m' in set newFMUs &
            exists1 m in set oldFMUs & m.name = m'.name 
            and m.time <= m'.time -- The FMU is advanced in time
            and (discreteTime => (m.time.i + 1 = m'.time.i and m.time.r = m'.time.r))
            and (not discreteTime => (m.time.i = m'.time.i and m.time.r <= m'.time.r))
        pre sameSetOfFMUs(newFMUs, oldFMUs);

	/*
		The precondition of the Co-simulation Step procedure
	*/
    preCoSimulationStep: Machine * Time -> bool
    preCoSimulationStep(scenario, time) ==
        let fmus = rng scenario.fmus in
                assertFMUMode(fmus, {<STEP>})
                and variablesSynchronized(scenario) 
                and fmusSynchronizedAtTime(fmus, time);


	/*
		Nick do I need to define equality for FMUs?
	*/
	fmusNotAffected : set of FMU * set of FMU -> bool
	fmusNotAffected(oldFMUs, newFMUs) == oldFMUs = newFMUs
	pre sameSetOfFMUs(oldFMUs, newFMUs);


	ImporterNotAffected : Importer * Importer -> bool
	ImporterNotAffected(oldImporter, newImporter) == 
		oldImporter.schedule = newImporter.schedule
		and oldImporter.activeClocks = newImporter.activeClocks
		and oldImporter.readyClocks = newImporter.readyClocks
		and oldImporter.inactiveClocks = newImporter.inactiveClocks
		--and oldImporter.fmusWithEvent = newImporter.fmusWithEvent
		and oldImporter.relevantOutputClocks = newImporter.relevantOutputClocks
		and oldImporter.relevantInputClocks = newImporter.relevantInputClocks
		and oldImporter.activeEquations = newImporter.activeEquations
		and oldImporter.calculatedEquations = newImporter.calculatedEquations
		and oldImporter.readyEquations = newImporter.readyEquations
		--and oldImporter.time = newImporter.time
		and oldImporter.endtime = newImporter.endtime
		and oldImporter.stepSize = newImporter.stepSize
		and oldImporter.valueMap = newImporter.valueMap;

	
    /*
        This function ensures that the two sets contain the same FMUs
     */
    sameSetOfFMUs : set of FMU * set of FMU -> bool
    sameSetOfFMUs(fmus1, fmus2)==
    -- The old and new FMUs should contain the same set of FMUs
            card fmus1 = card fmus2
                and {m.name | m in set fmus1} = {m.name | m in set fmus2};
