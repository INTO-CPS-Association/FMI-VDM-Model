/**
 * Workspace for developing rules that are pasted into the NetworkRules.adoc.
 */
types
	NetworkRules = FmiTerminalsAndIcons
	inv nr == allOf
	([
		apply[Terminal](rule_2_2_2_a, nr.terminals),
		rule("rule_2_2_1_a", rule_2_2_1_a(nr.terminals))
	]);

functions
	rule_2_2_1_a: Terminals +> bool
	rule_2_2_1_a(terminals) ==
		forall bus in seq terminals &
			bus.terminalKind = "bus" and bus.terminal <> nil =>
			let busName = bus.name in
				forall frame in seq bus.terminal &
					frame.terminalKind = "frame" and frame.terminal <> nil =>
					let frameName = busName ^ "::" ^ frame.name in
						forall pdu in seq frame.terminal &
							pdu.terminalKind = "pdu" and pdu.terminalMemberVariable <> nil =>
							let pduName = frameName ^ "::" ^ pdu.name ^ "::" in
								forall tmv in seq pdu.terminalMemberVariable &
									-- @OnFail("PDU member variable must be 'signal' at %s",
									-- loc2str(tmv.location))
									( tmv.variableKind = "signal" )
									-- @OnFail("PDU member variable must start with '%s' at %s",
									-- pduName, loc2str(tmv.location))
									and ( tmv.variableName(1, ..., len pduName) = pduName );

	/**
	 * Both frame variables must be listed as <<Terminal Member Variable>> of its corresponding
	 * <<BUSTerminal>>. Generally, frame variables are optional, but they must either both be
	 * missing or present to clearly indicate support for the frame abstraction layer.
	 */
	rule_2_2_2_a: Terminal +> bool
	rule_2_2_2_a(terminal)==
		terminal.terminalKind = "bus" =>
			terminal.terminalMemberVariable = nil or	-- None defined
			let busName = terminal.name,
				frameVariables = { tmv | tmv in seq terminal.terminalMemberVariable &
					tmv.variableKind = "signal"
					and tmv.variableName(1, ..., len busName + 2) = busName ^ "::" }
			in
				-- @OnFail("%NAME: Bus must define all frame variables, or none at %s",
				-- loc2str(terminal.location))
				( card frameVariables in set {0, 4} );

values
	docReferences : ReferenceMap =
	{
		"rule_2_2_1_a" |-> [ "<LS_BUS_STANDARD>#apply_2.2.1a_1" ],
		"rule_2_2_2_a" |-> [ "<LS_BUS_STANDARD>#apply_2.2.2a_1", "<LS_BUS_STANDARD>#apply_2.2.2a_2" ]
	}