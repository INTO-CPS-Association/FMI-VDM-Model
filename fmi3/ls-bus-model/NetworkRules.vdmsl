/*********************************************************************************
 *
 *	Copyright (c) 2017-2022, INTO-CPS Association,
 *	c/o Professor Peter Gorm Larsen, Department of Engineering
 *	Finlandsgade 22, 8200 Aarhus N.
 *
 *	MIT Licence:
 *
 *	Permission is hereby granted, free of charge, to any person obtaining a copy of
 *	this software and associated documentation files (the "Software"), to deal in
 *	the Software without restriction, including without limitation the rights to use,
 *	copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 *	Software, and to permit persons to whom the Software is furnished to do so,
 *	subject to the following conditions:
 *
 *	The above copyright notice and this permission notice shall be included in all
 *	copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 *	INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 *	PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *	OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 *	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *	SPDX-License-Identifier: MIT
 *
 *********************************************************************************/
types
	NetworkRules = NetworkDescription * FmiModelDescription * FmiTerminalsAndIcons
	inv mk_(networkDesc, modelDesc, terminalsAndIcons) == allOf
	([
		rule("networkValidation", networkValidation(networkDesc, modelDesc, terminalsAndIcons))
	]);

functions
	rule_231a: NetworkDescription * FmiTerminalsAndIcons +> bool
	rule_231a(networkDesc, terminalsAndIcons) == allOf
	([
		-- @OnFail("Missing 'bus' Terminal for %s", bus.name)
		( exists b in seq terminalsAndIcons.terminals & b.name = bus.name )

		| bus in seq networkDesc
	]);

	rule_231b: Bus * Terminal +> bool
	rule_231b(busDesc, busTerminal) == allOf
	([
		-- @OnFail("Bus terminal must be terminalKind 'bus' at %s",
		-- loc2str(busTerminal.location))
		( busTerminal.terminalKind = "bus" ),

		-- @OnFail("Bus temrinal must have matchingRule 'bus' at %s")
		-- loc2str(busTerminal.location))
		( busTerminal.matchingRule = "bus" ),

		-- @OnFail("Bus %s does not match network description name %s at %s",
		-- busTerminal.name, busDesc.name, loc2str(busTerminal.location))
		( busTerminal.name = busDesc.name ),

		-- @OnFail("Bus has wrong number of frames at %s",
		-- loc2str(busTerminal.location))
		( busTerminal.terminal <> nil
		  and len busTerminal.terminal = len busDesc.frames )
	]);

	rule_231c: Bus * FmiModelDescription * Terminal +> bool
	rule_231c(busDesc, modelDesc, busTerminal) == allOf
	([
		let variableName = busDesc.name ^ "::" ^ varName in
			-- @OnFail("Missing TerminalMemberVariable for %s", variableName)
			( lookup(modelDesc, variableName) <> nil =>
				exists tmv in seq busTerminal.terminalMemberVariable &
					tmv.variableName = variableName )

		| varName in seq
			[ "FRAMES_in", "FRAMES_out", "FRAMES_in_CLOCK", "FRAMES_out_CLOCK" ]
	]
	^
	[
		-- @OnFail("TerminalStreamMemberVariables must be empty at %s",
		-- loc2str(busTerminal.location))
		( busTerminal.terminalStreamMemberVariable = nil )
	]);

	networkValidation: NetworkDescription * FmiModelDescription * FmiTerminalsAndIcons +> bool
	networkValidation(networkDesc, modelDesc, terminalsAndIcons) == allOf
	([
		rule_231a(networkDesc, terminalsAndIcons)
	]
	^
	[
		let matching = {b | b in seq terminalsAndIcons.terminals &
			b.name = busDesc.name }
		in
			-- @OnFail("Missing or duplicate bus terminal for %s", busDesc.name)
			( card matching = 1 )
				=> let {busTerminal} = matching in
					busValidation(busDesc, modelDesc, busTerminal)

		| busDesc in seq networkDesc
	]);

	busValidation: Bus * FmiModelDescription * Terminal +> bool
	busValidation(busDesc, modelDesc, busTerminal) == allOf
	([
		rule_231b(busDesc, busTerminal),
		rule_231c(busDesc, modelDesc, busTerminal)
	]
	^
	[
		let matching = {f | f in seq busTerminal.terminal & f.name = frameDesc.name } in
			-- @OnFail("Missing or duplicate frame for %s", frameDesc.name)
			( card matching = 1 )
				=> let {frameTerminal} = matching in
					frameValidation(busDesc, frameDesc, modelDesc, frameTerminal)
			
		| frameDesc in seq busDesc.frames
	]);

	frameValidation: Bus * Frame * FmiModelDescription * Terminal +> bool
	frameValidation(busDesc, frameDesc, modelDesc, frameTerminal) == allOf
	([
		-- @OnFail("Missing frame clock TerminalMemberVariable at %s", loc2str(frameTerminal.location))
		( frameTerminal.terminalMemberVariable <> nil
			and exists1 tmv in seq frameTerminal.terminalMemberVariable &
				tmv.variableName = busDesc.name ^ "::" ^ frameDesc.name ^ "_CLOCK" ),

		let clockName = busDesc.name ^ "::" ^ frameDesc.name ^ "_CLOCK",
			var = lookup(modelDesc, clockName) in
			-- @OnFail("Frame clock variable %s is not defined" at %s",
			-- clockName, loc2str(frameTerminal.location))
			(var <> nil)

			-- @OnFail("Variable is not of type Clock: %s", clockName)
			and (is_Clock(var))		
	]
	^
	[
		let matching = {p | p in seq frameTerminal.terminal & p.name = pduDesc.name } in
			-- @OnFail("Missing or duplicate PDU for %s", pduDesc.name)
			( card matching = 1 )
				=> let {pduTerminal} = matching in
					pduValidation(busDesc, frameDesc, pduDesc, modelDesc, pduTerminal)
			
		| pduDesc in seq frameDesc.pdus
	]);

	pduValidation: Bus * Frame * PDU * FmiModelDescription * Terminal +> bool
	pduValidation(busDesc, frameDesc, pduDesc, modelDesc, pduTerminal) == allOf
	([
		let matching = {s | s in seq pduTerminal.terminalMemberVariable &
			s.variableName = busDesc.name ^ "::" ^ frameDesc.name ^ "::" ^ pduDesc.name ^ "::" ^ signalDesc.name}
		in
			-- @OnFail("Missing or duplicate TerminalMemberVariable for %s", signalDesc.name)
			( card matching = 1 )
				=> let {signalVariable} = matching in
					signalValidation(signalDesc, modelDesc, signalVariable)
			
		| signalDesc in seq pduDesc.signals
	]);

	signalValidation: Signal * FmiModelDescription * TerminalMemberVariable +> bool
	signalValidation(signalDesc, modelDesc, signalVariable) == allOf
	([
		-- @OnFail("Signal must be variableKind 'signal' at %s", loc2str(signalVariable.location))
		( signalVariable.variableKind = "signal" ),

		-- @OnFail("Signal memberName should be '%s' at %s", signalDesc.name, loc2str(signalVariable.location))
		( signalVariable.memberName = signalDesc.name ),

		let var = lookup(modelDesc, signalVariable.variableName) in
			-- @OnFail("Signal variable %s is not defined", signalVariable.variableName)
			(var <> nil)
	]);

values
	docReferences : ReferenceMap =
	{
		"rule_231a" |-> [ "<LS_BUS_STANDARD>#apply_231a" ],
		"rule_231b" |-> [ "<LS_BUS_STANDARD>#apply_231b" ],
		"rule_231c" |-> [ "<LS_BUS_STANDARD>#apply_231c" ]
	}