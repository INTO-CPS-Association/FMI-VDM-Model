/*********************************************************************************
 *
 *	Copyright (c) 2017-2022, INTO-CPS Association,
 *	c/o Professor Peter Gorm Larsen, Department of Engineering
 *	Finlandsgade 22, 8200 Aarhus N.
 *
 *	MIT Licence:
 *
 *	Permission is hereby granted, free of charge, to any person obtaining a copy of
 *	this software and associated documentation files (the "Software"), to deal in
 *	the Software without restriction, including without limitation the rights to use,
 *	copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 *	Software, and to permit persons to whom the Software is furnished to do so,
 *	subject to the following conditions:
 *
 *	The above copyright notice and this permission notice shall be included in all
 *	copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 *	INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 *	PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *	OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 *	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *	SPDX-License-Identifier: MIT
 *
 *********************************************************************************/

-- Set this property, as many @OnFails depend on it.
#define vdmj.parser.merge_comments true

types
	NetworkRules = NetworkDescription * FmiModelDescription * FmiTerminalsAndIcons
	inv mk_(networkDesc, modelDesc, terminalsAndIcons) == allOf
	([
		rule("networkValidation", networkValidation(networkDesc, modelDesc, terminalsAndIcons))
	]);

functions
	rule_231a: NetworkDescription * FmiTerminalsAndIcons +> bool
	rule_231a(networkDesc, terminalsAndIcons) == allOf
	([
		-- @OnFail("%NAME: Missing unique 'bus' Terminal for %s", bus.name)
		( exists1 b in seq terminalsAndIcons.terminals & b.name = bus.name )

		| bus in seq networkDesc
	]);

	rule_231b: Bus * Terminal +> bool
	rule_231b(busDesc, busTerminal) == allOf
	([
		-- @OnFail("%NAME: Bus terminal must be terminalKind 'bus' at %s",
		-- loc2str(busTerminal.location))
		( busTerminal.terminalKind = "bus" ),

		-- @OnFail("%NAME: Bus terminal must have matchingRule 'bus' at %s",
		-- loc2str(busTerminal.location))
		( busTerminal.matchingRule = "bus" ),

		-- @OnFail("%NAME: Bus %s does not match network description name %s at %s",
		-- busTerminal.name, busDesc.name, loc2str(busTerminal.location))
		( busTerminal.name = busDesc.name ),

		-- @OnFail("%NAME: Bus has wrong number of frames at %s",
		-- loc2str(busTerminal.location))
		( busTerminal.terminal <> nil
		  and len busTerminal.terminal = len busDesc.frames )
	]);

	rule_231c: Bus * FmiModelDescription * Terminal +> bool
	rule_231c(busDesc, modelDesc, busTerminal) == allOf
	([
		let variableName = busDesc.name ^ "::" ^ varName,
			clockName = variableName ^ "_CLOCK",
			variable = lookup(modelDesc, variableName),
			clockvar = lookup(modelDesc, clockName)
		in
			allOf
			([
				-- @OnFail("%NAME: Missing TerminalMemberVariable for %s", variableName)
				( exists tmv in seq busTerminal.terminalMemberVariable &
						tmv.variableName = variableName ),

				-- @OnFail("%NAME: Missing TerminalMemberVariable for %s", clockName)
				( exists tmv in seq busTerminal.terminalMemberVariable &
						tmv.variableName = clockName ),

				-- @OnFail("%NAME: Frame variable must be fmi3Binary for %s", variableName)
				( is_Binary(variable) ),

				-- @OnFail("%NAME: Frame variable must be triggered Clock for %s", clockName)
				( is_Clock(clockvar) and clockvar.intervalVariability = <triggered> )
			])

		| varName in seq [ "FRAMES_in", "FRAMES_out" ]
	]
	^
	[
		-- @OnFail("%NAME: TerminalMemberVariables of %s must all be variableKind 'signal'",
		-- busTerminal.name)
		( forall tmv in seq busTerminal.terminalMemberVariable &
				tmv.variableKind = "signal" ),

		-- @OnFail("%NAME: TerminalStreamMemberVariables must be empty at %s",
		-- loc2str(busTerminal.location))
		( busTerminal.terminalStreamMemberVariable = nil ),

		-- @OnFail("%NAME: Missing annotation for bus %s", busDesc.name)
		( busTerminal.annotations <> nil )

		-- @OnFail("%NAME: Bus %s annotation does not match network at %s",
		-- busDesc.name, loc2str(busTerminal.location))
		and ( busTerminal.annotations(1).type = busDesc.nodes )
	]);

	rule_232a: Bus * Terminal +> bool
	rule_232a(busDesc, busTerminal) == allOf
	([
		-- @OnFail("%NAME: Missing unique 'frame' Terminal for %s", frame.name)
		( exists1 f in seq busTerminal.terminal & f.name = frame.name )

		| frame in seq busDesc.frames
	]);
 
	rule_232b: Frame * Terminal +> bool
	rule_232b(frameDesc, frameTerminal) == allOf
	([
		-- @OnFail("%NAME: Frame terminal must be terminalKind 'frame' at %s",
		-- loc2str(frameTerminal.location))
		( frameTerminal.terminalKind = "frame" ),

		-- @OnFail("%NAME: Frame temrinal must have matchingRule 'bus' at %s",
		-- loc2str(frameTerminal.location))
		( frameTerminal.matchingRule = "bus" ),

		-- @OnFail("%NAME: Frame %s does not match network description name %s at %s",
		-- frameTerminal.name, frameDesc.name, loc2str(frameTerminal.location))
		( frameTerminal.name = frameDesc.name )
	]);

	rule_232c: Bus * Frame * FmiModelDescription * Terminal +> bool
	rule_232c(busDesc, frameDesc, modelDesc, frameTerminal) == allOf
	([
		let clockName = busDesc.name ^ "::" ^ frameDesc.name ^ "_CLOCK" in allOf
		([
			let var = lookup(modelDesc, clockName) in
				-- @OnFail("%NAME: Missing ModelVariable for %s", clockName)
				( var <> nil )

				-- @OnFail("%NAME: Variable is not of type Clock: %s", clockName)
				and ( is_Clock(var) )	-- Causality checked in rule_234a

				-- @OnFail("%NAME: Clock %s must be <triggered>", clockName)
				and ( var.intervalVariability = <triggered> ),

			-- @OnFail("%NAME: Missing TerminalMemberVariable for %s", clockName)
			( exists tmv in seq frameTerminal.terminalMemberVariable &
					tmv.variableName = clockName )
		]),

		-- @OnFail("%NAME: TerminalStreamMemberVariables must be empty at %s",
		-- loc2str(frameTerminal.location))
		( frameTerminal.terminalStreamMemberVariable = nil ),

		-- @OnFail("%NAME: Frame has wrong number of PDUs at %s",
		-- loc2str(frameTerminal.location))
		( frameTerminal.terminal <> nil
		  and len frameTerminal.terminal = len frameDesc.pdus )
	]);

	rule_233a: Frame * Terminal +> bool
	rule_233a(frameDesc, frameTerminal) == allOf
	([
		-- @OnFail("%NAME: Missing unique 'pdu' Terminal for %s", pdu.name)
		( exists1 p in seq frameTerminal.terminal & p.name = pdu.name )

		| pdu in seq frameDesc.pdus
	]);

	rule_233b: PDU * Terminal +> bool
	rule_233b(pduDesc, pduTerminal) == allOf
	([
		-- @OnFail("%NAME: PDU terminal must be terminalKind 'frame' at %s",
		-- loc2str(pduTerminal.location))
		( pduTerminal.terminalKind = "pdu" ),

		-- @OnFail("%NAME: PDU temrinal must have matchingRule 'bus' at %s",
		-- loc2str(pduTerminal.location))
		( pduTerminal.matchingRule = "bus" ),

		-- @OnFail("%NAME: PDU %s does not match network description name %s at %s",
		-- pduTerminal.name, pduDesc.name, loc2str(pduTerminal.location))
		( pduTerminal.name = pduDesc.name )
	]);

	rule_233c: Terminal +> bool
	rule_233c(pduTerminal) == allOf
	([
		-- @OnFail("%NAME: TerminalStreamMemberVariables must be empty at %s",
		-- loc2str(pduTerminal.location))
		( pduTerminal.terminalStreamMemberVariable = nil ),

		-- @OnFail("%NAME: PDU can have no Terminals at %s", loc2str(pduTerminal.location))
		( pduTerminal.terminal = nil )
	]);

	rule_234a: Bus * Frame * PDU * FmiModelDescription * Terminal +> bool
	rule_234a(busDesc, frameDesc, pduDesc, modelDesc, pduTerminal) == allOf
	([
		-- @OnFail("%NAME: PDU has wrong number of signals at %s",
		-- loc2str(pduTerminal.location))
		( pduTerminal.terminalMemberVariable <> nil
		  and len pduTerminal.terminalMemberVariable = len pduDesc.signals ),

		-- Verify that the frame clock has the same causality as all the signals
		let clockName = busDesc.name ^ "::" ^ frameDesc.name ^ "_CLOCK",
			frameClock = lookup(modelDesc, clockName)
		in
			frameClock <> nil =>  -- Error reported in 2.3.2c
				let clockCausality =
					if frameClock.causality <> nil
					then frameClock.causality
					else <local>  -- default causality
				in allOf
				([
					-- @OnFail("%NAME: Clock causality must be input or output at %s",
					-- loc2str(frameClock.location))
					( clockCausality in set {<input>, <output>} )
				]
				^
				[
					let signalVariable = lookup(modelDesc, signalTerminal.variableName) in
						signalVariable <> nil =>	-- error reported in rule_234b
							let signalCausality =
								if signalVariable.causality <> nil
								then signalVariable.causality
								else <local>
					in
						-- @OnFail("%NAME: Signal causality should be %s at %s",
						-- clockCausality, loc2str(signalTerminal.location))
						( signalCausality = clockCausality )

						-- @OnFail("%NAME: Signal causality must be input or output at %s",
						-- loc2str(signalVariable.location))
						and ( signalCausality in set {<input>, <output>} )

					| signalTerminal in seq pduTerminal.terminalMemberVariable
				])
	]);

	rule_234b: Signal * FmiModelDescription * TerminalMemberVariable +> bool
	rule_234b(signalDesc, modelDesc, signalVariable) == allOf
	([
		-- @OnFail("%NAME: Signal must be variableKind 'signal' at %s",
		-- loc2str(signalVariable.location))
		( signalVariable.variableKind = "signal" ),

		-- @OnFail("%NAME: Signal memberName should be '%s' at %s",
		-- signalDesc.name, loc2str(signalVariable.location))
		( signalVariable.memberName = signalDesc.name ),

		let var = lookup(modelDesc, signalVariable.variableName) in allOf
		([
			-- @OnFail("%NAME: Signal variable %s is not defined", signalVariable.variableName)
			(var <> nil),

			-- @OnFail("%NAME: Signal unit must be %s at %s",
			-- signalDesc.unit, loc2str(signalVariable.location))
			( var <> nil => signalDesc.unit <> nil => var.unit = signalDesc.unit ),

			-- @OnFail("%NAME: Variable is not clocked at %s", loc2str(signalVariable.location))
			( var.clocks <> nil )
		])
	]);


	networkValidation: NetworkDescription * FmiModelDescription * FmiTerminalsAndIcons +> bool
	networkValidation(networkDesc, modelDesc, terminalsAndIcons) == allOf
	([
		rule_231a(networkDesc, terminalsAndIcons)
	]
	^
	[
		allOf
		([
			busValidation(busDesc, modelDesc, busTerminal)
			| busTerminal in seq terminalsAndIcons.terminals & busTerminal.name = busDesc.name
		])

		| busDesc in seq networkDesc
	]);

	busValidation: Bus * FmiModelDescription * Terminal +> bool
	busValidation(busDesc, modelDesc, busTerminal) == allOf
	([
		rule_231b(busDesc, busTerminal),
		rule_231c(busDesc, modelDesc, busTerminal),
		rule_232a(busDesc, busTerminal)
	]
	^
	[
		allOf
		([
			frameValidation(busDesc, frameDesc, modelDesc, frameTerminal)
			| frameTerminal in seq busTerminal.terminal & frameTerminal.name = frameDesc.name
		])
			
		| frameDesc in seq busDesc.frames
	]);

	frameValidation: Bus * Frame * FmiModelDescription * Terminal +> bool
	frameValidation(busDesc, frameDesc, modelDesc, frameTerminal) == allOf
	([
		rule_232b(frameDesc, frameTerminal),
		rule_232c(busDesc, frameDesc, modelDesc, frameTerminal),
		rule_233a(frameDesc, frameTerminal)
	]
	^
	[
		allOf
		([
			pduValidation(busDesc, frameDesc, pduDesc, modelDesc, pduTerminal)
			| pduTerminal in seq frameTerminal.terminal & pduTerminal.name = pduDesc.name
		])

		| pduDesc in seq frameDesc.pdus
	]);

	pduValidation: Bus * Frame * PDU * FmiModelDescription * Terminal +> bool
	pduValidation(busDesc, frameDesc, pduDesc, modelDesc, pduTerminal) == allOf
	([
		rule_233b(pduDesc, pduTerminal),
		rule_233c(pduTerminal),
		rule_234a(busDesc, frameDesc, pduDesc, modelDesc, pduTerminal)
	]
	^
	[
		allOf
		([
			signalValidation(signalDesc, modelDesc, signalVariable)

 			| signalVariable in seq pduTerminal.terminalMemberVariable &
				signalVariable.variableName =
					busDesc.name ^ "::" ^
					frameDesc.name ^ "::" ^
					pduDesc.name ^ "::" ^
					signalDesc.name
		])
			
		| signalDesc in seq pduDesc.signals
	]);

	signalValidation: Signal * FmiModelDescription * TerminalMemberVariable +> bool
	signalValidation(signalDesc, modelDesc, signalVariable) == allOf
	([
		rule_234b(signalDesc, modelDesc, signalVariable)
	]);

values
	docReferences : ReferenceMap =
	{
		"rule_231a" |-> [ "<LS_BUS_STANDARD>#apply_231a" ],
		"rule_231b" |-> [ "<LS_BUS_STANDARD>#apply_231b" ],
		"rule_231c" |-> [ "<LS_BUS_STANDARD>#apply_231c" ],
		"rule_232a" |-> [ "<LS_BUS_STANDARD>#apply_232a" ],
		"rule_232b" |-> [ "<LS_BUS_STANDARD>#apply_232b" ],
		"rule_232c" |-> [ "<LS_BUS_STANDARD>#apply_232c" ],
		"rule_233a" |-> [ "<LS_BUS_STANDARD>#apply_233a" ],
		"rule_233b" |-> [ "<LS_BUS_STANDARD>#apply_233b" ],
		"rule_233c" |-> [ "<LS_BUS_STANDARD>#apply_233c" ],
		"rule_234a" |-> [ "<LS_BUS_STANDARD>#apply_233c" ],
		"rule_234b" |-> [ "<LS_BUS_STANDARD>#apply_233c" ]
	}