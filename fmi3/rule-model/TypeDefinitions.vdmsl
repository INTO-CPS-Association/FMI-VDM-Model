/*********************************************************************************
 *
 *	Copyright (c) 2017-2022, INTO-CPS Association,
 *	c/o Professor Peter Gorm Larsen, Department of Engineering
 *	Finlandsgade 22, 8200 Aarhus N.
 *
 *	MIT Licence:
 *
 *	Permission is hereby granted, free of charge, to any person obtaining a copy of
 *	this software and associated documentation files (the "Software"), to deal in
 *	the Software without restriction, including without limitation the rights to use,
 *	copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 *	Software, and to permit persons to whom the Software is furnished to do so,
 *	subject to the following conditions:
 *
 *	The above copyright notice and this permission notice shall be included in all
 *	copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 *	INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 *	PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *	OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 *	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *	SPDX-License-Identifier: MIT
 *
 *********************************************************************************/
types
	TypeDefinitions' = [TypeDefinitions]
	inv tdefs == allOf
	([
		apply[fmi3TypeDefinition](inv_fmi3TypeDefinition', tdefs),

		rule("validTypeDefinitionNames", validTypeDefinitionNames(tdefs))
	]);

	fmi3TypeDefinition' = fmi3TypeDefinition
	inv tdef ==
		if     is_Float64Type(tdef) then inv_Float64Type'(tdef)
		elseif is_Float32Type(tdef)	then inv_Float32Type'(tdef)

		elseif is_Int64Type(tdef)	then is_Int64Type'(tdef)
		elseif is_Int32Type(tdef)	then is_Int32Type'(tdef)
		elseif is_Int16Type(tdef)	then is_Int16Type'(tdef)
		elseif is_UInt8Type(tdef)	then is_Int8Type'(tdef)

		elseif is_UInt64Type(tdef)	then is_UInt64Type'(tdef)
		elseif is_UInt32Type(tdef)	then is_UInt32Type'(tdef)
		elseif is_UInt16Type(tdef)	then is_UInt16Type'(tdef)
		elseif is_UInt8Type(tdef)	then is_UInt8Type'(tdef)

		elseif is_BooleanType(tdef)	then inv_BooleanType'(tdef)
		elseif is_StringType(tdef)	then inv_StringType'(tdef)
		elseif is_BinaryType(tdef)	then inv_BinaryType'(tdef)
		elseif is_EnumerationType(tdef)	then inv_EnumerationType'(tdef)
		elseif is_ClockType(tdef)	then inv_ClockType'(tdef)

		else undefined;

	Float64Type' = Float64Type
	inv tdef == allOf
	([
		inv_Annotations'(tdef.annotations),

		rule("validMinMax", validMinMax(tdef, <Float64>)),
		rule("validDisplayUnit", validDisplayUnit(tdef))
	]);

	Float32Type' = Float32Type
	inv tdef == allOf
	([
		inv_Annotations'(tdef.annotations),

		rule("validMinMax", validMinMax(tdef, <Float32>)),
		rule("validDisplayUnit", validDisplayUnit(tdef))
	]);

	Int64Type' = Int64Type
	inv tdef == allOf
	([
		inv_Annotations'(tdef.annotations),

		rule("validMinMax", validMinMax(tdef, <Int64>)),
		rule("validDisplayUnit", validDisplayUnit(tdef))
	]);

	Int32Type' = Int32Type
	inv tdef == allOf
	([
		inv_Annotations'(tdef.annotations),

		rule("validMinMax", validMinMax(tdef, <Int32>)),
		rule("validDisplayUnit", validDisplayUnit(tdef))
	]);

	Int16Type' = Int16Type
	inv tdef == allOf
	([
		inv_Annotations'(tdef.annotations),

		rule("validMinMax", validMinMax(tdef, <Int16>)),
		rule("validDisplayUnit", validDisplayUnit(tdef))
	]);

	Int8Type' = Int8Type
	inv tdef == allOf
	([
		inv_Annotations'(tdef.annotations),

		rule("validMinMax", validMinMax(tdef, <Int8>)),
		rule("validDisplayUnit", validDisplayUnit(tdef))
	]);

	UInt64Type' = UInt64Type
	inv tdef == allOf
	([
		inv_Annotations'(tdef.annotations),

		rule("validMinMax", validMinMax(tdef, <UInt64>)),
		rule("validDisplayUnit", validDisplayUnit(tdef))
	]);

	UInt32Type' = UInt32Type
	inv tdef == allOf
	([
		inv_Annotations'(tdef.annotations),

		rule("validMinMax", validMinMax(tdef, <UInt32>)),
		rule("validDisplayUnit", validDisplayUnit(tdef))
	]);

	UInt16Type' = UInt16Type
	inv tdef == allOf
	([
		inv_Annotations'(tdef.annotations),

		rule("validMinMax", validMinMax(tdef, <UInt16>)),
		rule("validDisplayUnit", validDisplayUnit(tdef))
	]);

	UInt8Type' = UInt8Type
	inv tdef == allOf
	([
		inv_Annotations'(tdef.annotations),

		rule("validMinMax", validMinMax(tdef, <UInt8>)),
		rule("validDisplayUnit", validDisplayUnit(tdef))
	]);

	BooleanType' = BooleanType
	inv tdef == allOf
	([
		inv_Annotations'(tdef.annotations)
	]);

	StringType' = StringType
	inv tdef == allOf
	([
		inv_Annotations'(tdef.annotations)
	]);

	BinaryType' = BinaryType
	inv tdef == allOf
	([
		inv_Annotations'(tdef.annotations)
	]);

	EnumerationType' = EnumerationType
	inv tdef == allOf
	([
		inv_Annotations'(tdef.annotations),

		rule("validMinMax", validMinMax(tdef, <Enumeration>)),
		rule("validEnumerationBijection", validEnumerationBijection(tdef))
	]);

	ClockType' = ClockType
	inv tdef == allOf
	([
		inv_Annotations'(tdef.annotations),

		rule("validClockType", validClockType(tdef))
	]);
		

functions
	validTypeDefinitionNames: [TypeDefinitions] +> bool
	validTypeDefinitionNames(tdefs) ==
		-- @OnFail("validTypeDefinitionNames: TypeDefinition names must be unique")
		( tdefs <> nil =>
			let names = [ td.name | td in seq tdefs ] in
				len names = card elems names );

	validMinMax: fmi3TypeDefinition * Kind +> bool
	validMinMax(tdef, kind) ==
		let min = tdef.min, max = tdef.max, mk_(kmin, kmax) = minMaxKind(kind) in allOf
		([
			max <> nil =>
				-- @OnFail("validMinMax: Type %s, max %s is not a valid value of this type", tdef.name, max)
				( max <= kmax and max >= kmin ),

			min <> nil =>
				-- @OnFail("validMinMax: Type %s, min %s is not a valid value of this type", tdef.name, min)
				( min <= kmax and min >= kmin ),

			max <> nil and min <> nil =>
				-- @OnFail("validMinMax: Type %s, max %s not >= min %s", tdef.name, max, min)
				( max >= min )
		]);

	validDisplayUnit: fmi3TypeDefinition +> bool
	validDisplayUnit(tdef) ==
		-- @OnFail("validDisplayUnit: Type %s, unit must be defined for displayUnit %s", tdef.name, tdef.displayUnit)
		( tdef.displayUnit <> nil => tdef.unit <> nil );

	validEnumerationBijection: EnumerationType +> bool
	validEnumerationBijection(tdef) ==
		-- @OnFail("validEnumerationBijection: Type %s, Enumeration item name/values do not form a bijection", tdef.name)
		(
			card { i.name | i in seq tdef.item } = len tdef.item
			and	card { i.value | i in seq tdef.item } = len tdef.item
		);

	validClockType: ClockType +> bool
	validClockType(tdef) ==
		let periodic = tdef.intervalVariability in set {<constant>, <fixed>, <tunable>} in allOf
		([
			--@OnFail("validClockType: resolution can only be used with periodic clocks")
			( tdef.resolution <> nil => periodic ),

			--@OnFail("validClockType: Periodic clock with supportsFraction and intervalCounter must define resolution")
			( periodic and tdef.supportsFraction = true and tdef.intervalCounter <> nil => tdef.resolution <> nil  ),

			--@OnFail("validClockType: intervalCounter must be >0")
			( tdef.intervalCounter <> nil => tdef.intervalCounter > 0 ),

			--@OnFail("validClockType: Cannot use intervalCounter unless periodic and supportsFraction")
			( tdef.intervalCounter <> nil => tdef.supportsFraction = true and periodic ),

			--@OnFail("validClockType: shiftCounter requires an intervalCounter")
			( tdef.shiftCounter <> nil => tdef.intervalCounter <> nil )
		]);
