/*********************************************************************************
 *
 *	Copyright (c) 2017-2022, INTO-CPS Association,
 *	c/o Professor Peter Gorm Larsen, Department of Engineering
 *	Finlandsgade 22, 8200 Aarhus N.
 *
 *	MIT Licence:
 *
 *	Permission is hereby granted, free of charge, to any person obtaining a copy of
 *	this software and associated documentation files (the "Software"), to deal in
 *	the Software without restriction, including without limitation the rights to use,
 *	copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 *	Software, and to permit persons to whom the Software is furnished to do so,
 *	subject to the following conditions:
 *
 *	The above copyright notice and this permission notice shall be included in all
 *	copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 *	INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 *	PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *	OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 *	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *	SPDX-License-Identifier: MIT
 *
 *********************************************************************************/
types
	TypeDefinitions' = [TypeDefinitions]
	inv tdefs == allOf
	([
		apply[fmi3TypeDefinition](inv_fmi3TypeDefinition', tdefs),

		rule("validTypeDefinitionNames", validTypeDefinitionNames(tdefs))
	]);

	fmi3TypeDefinition' = fmi3TypeDefinition
	inv tdef ==
		if     is_Float64Type(tdef) then inv_Float64Type'(tdef)
		elseif is_Float32Type(tdef)	then inv_Float32Type'(tdef)
		-- etc...
		else undefined;

	Float64Type' = Float64Type
	inv tdef == allOf
	([
		inv_Annotations'(tdef.annotations),

		rule("validMinMax", validMinMax(tdef, <Float64>)),
		rule("validTypeUnits", validTypeUnits(tdef))
	]);

	Float32Type' = Float32Type
	inv tdef == allOf
	([
		inv_Annotations'(tdef.annotations),

		rule("validMinMax", validMinMax(tdef, <Float32>)),
		rule("validTypeUnits", validTypeUnits(tdef))
	]);

functions
	validTypeDefinitionNames: [TypeDefinitions] +> bool
	validTypeDefinitionNames(tdefs) ==
		-- @OnFail("validTypeDefinitionNames: TypeDefinition names must be unique")
		( tdefs <> nil =>
			let names = [ td.name | td in seq tdefs ] in
				len names = card elems names );

	validMinMax: fmi3TypeDefinition * Kind +> bool
	validMinMax(tdef, kind) ==
		let min = tdef.min, max = tdef.max, mk_(kmin, kmax) = minMaxKind(kind) in allOf
		([
			max <> nil =>
				-- @OnFail("validMinMax: Type %s, max %s is not a valid value of this type", tdef.name, max)
				( max <= kmax and max >= kmin ),

			min <> nil =>
				-- @OnFail("validMinMax: Type %s, min %s is not a valid value of this type", tdef.name, min)
				( min <= kmax and min >= kmin ),

			max <> nil and min <> nil =>
				-- @OnFail("validMinMax: Type %s, max %s not >= min %s", tdef.name, max, min)
				( max >= min )
		]);

	validTypeUnits: fmi3TypeDefinition +> bool
	validTypeUnits(tdef) ==
		-- @OnFail("validTypeUnits: Type %s, unit must be defined for displayUnit %s", tdef.name, tdef.displayUnit)
		( tdef.displayUnit <> nil => tdef.unit <> nil );
