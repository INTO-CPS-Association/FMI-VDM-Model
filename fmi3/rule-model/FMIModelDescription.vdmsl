/*********************************************************************************
 *
 *	Copyright (c) 2017-2022, INTO-CPS Association,
 *	c/o Professor Peter Gorm Larsen, Department of Engineering
 *	Finlandsgade 22, 8200 Aarhus N.
 *
 *	MIT Licence:
 *
 *	Permission is hereby granted, free of charge, to any person obtaining a copy of
 *	this software and associated documentation files (the "Software"), to deal in
 *	the Software without restriction, including without limitation the rights to use,
 *	copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 *	Software, and to permit persons to whom the Software is furnished to do so,
 *	subject to the following conditions:
 *
 *	The above copyright notice and this permission notice shall be included in all
 *	copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 *	INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 *	PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *	OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 *	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *	SPDX-License-Identifier: MIT
 *
 *********************************************************************************/
types
	/**
	 * The invariant type for the top level FmiModelDescription.
	 */
	FmiModelDescription' = FmiModelDescription
	inv fmd == allOf
	([
		inv_ModelExchange'(fmd.modelExchange),
		inv_CoSimulation'(fmd.coSimulation),
		inv_ScheduledExecution'(fmd.scheduledExecution),
		inv_UnitDefinitions'(fmd.unitDefinitions),
		inv_TypeDefinitions'(fmd.typeDefinitions),
		inv_LogCategories'(fmd.logCategories),
--		inv_DefaultExperiment'(fmd.defaultExperiment),
--		inv_ModelVariables'(fmd.modelVariables),
--		inv_ModelStructure'(fmd.modelStructure),
		inv_Annotations'(fmd.annotations),

		rule("validGenerationDateAndTime", validGenerationDateAndTime(fmd)),
		rule("validModelTypes",	validModelTypes(fmd)),
		rule("validTypeUnits", validTypeUnits(fmd))
	]);

functions
	/**
	 * Check that at least one FMU type has been included.
	 */
	validModelTypes: FmiModelDescription +> bool
	validModelTypes(fmd) ==
		-- @OnFail("validModelTypes: At least one of ModelExchange, CoSimulation or ScheduledExecution must be set")
		( fmd.modelExchange <> nil or fmd.coSimulation <> nil or fmd.scheduledExecution <> nil );

	/**
	 * Check the format of the optional generationDateAndTime field.
	 */
	validGenerationDateAndTime: FmiModelDescription +> bool
	validGenerationDateAndTime(fmd) ==
		let dt = fmd.generationDateAndTime, digits = elems DIGITS in
			-- @OnFail("validGenerationDateAndTime: generationDateAndTime should be YYYY-MM-DDThh:mm:ssZ at %s", loc2str(fmd.location))
			(
				dt <> nil =>
					len dt = 20
					and elems dt(1,...,4) subset digits
					and dt(5) = '-'
					and elems dt(6,...,7) subset digits
					and dt(8) = '-'
					and elems dt(9,...,10) subset digits
					and dt(11) = 'T'
					and elems dt(12,...,13) subset digits
					and dt(14) = ':'
					and elems dt(15,...,16) subset digits
					and dt(17) = ':'
					and elems dt(18,...,19) subset digits
					and dt(20) = 'Z'
			);
	
	validTypeUnits: FmiModelDescription +> bool
	validTypeUnits(fmd) ==
		fmd.typeDefinitions <> nil => allOf
		([
			tdef.unit <> nil =>
				/* @OnFail("validTypeUnits: Type %s, unit %s not defined in UnitDefinitions at %s",
					tdef.name, tdef.unit, loc2str(tdef.location)) */
				( fmd.unitDefinitions <> nil
					and exists u in seq fmd.unitDefinitions & u.name = tdef.unit )

			| tdef in seq fmd.typeDefinitions
		]);
