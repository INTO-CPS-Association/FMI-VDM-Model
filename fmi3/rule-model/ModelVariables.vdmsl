/*********************************************************************************
 *
 *	Copyright (c) 2017-2022, INTO-CPS Association,
 *	c/o Professor Peter Gorm Larsen, Department of Engineering
 *	Finlandsgade 22, 8200 Aarhus N.
 *
 *	MIT Licence:
 *
 *	Permission is hereby granted, free of charge, to any person obtaining a copy of
 *	this software and associated documentation files (the "Software"), to deal in
 *	the Software without restriction, including without limitation the rights to use,
 *	copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 *	Software, and to permit persons to whom the Software is furnished to do so,
 *	subject to the following conditions:
 *
 *	The above copyright notice and this permission notice shall be included in all
 *	copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 *	INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 *	PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *	OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 *	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *	SPDX-License-Identifier: MIT
 *
 *********************************************************************************/
types
	ModelVariables' = ModelVariables
	inv evs == allOf
	([
		apply[fmi3Variable](inv_fmi3Variable', evs),

		rule("validValueReferences", validValueReferences(evs)),
		rule("validAliasNames", validAliasNames(evs)),
		rule("validIndependentVariable", validIndependentVariable(evs)),
		rule("validPreviousVariables", validPreviousVariables(evs)),
		rule("validVariableDimensions", validVariableDimensions(evs)),
		rule("validAliasDisplayUnits", validAliasDisplayUnits(evs))
	]);

	fmi3Variable' = fmi3Variable	-- The union of all kinds
	inv ev ==
		cases kindOf(ev):
			<Float64>	-> inv_Float64'(ev),
			<Float32>	-> inv_Float32'(ev),

			<Int64>		-> inv_Int64'(ev),
			<Int32>		-> inv_Int32'(ev),
			<Int16>		-> inv_Int16'(ev),
			<Int8>		-> inv_Int8'(ev),

			<UInt64>	-> inv_UInt64'(ev),
			<UInt32>	-> inv_UInt32'(ev),
			<UInt16>	-> inv_UInt16'(ev),
			<UInt8>		-> inv_UInt8'(ev),

			<Boolean>	-> inv_Boolean'(ev),
			<String>	-> inv_String'(ev),
			<Binary>	-> inv_Binary'(ev),
			<Enumeration>	-> inv_Enumeration'(ev),
			<Clock>		-> inv_Clock'(ev),

			others		-> undefined
		end;

	/**
	 * The "prime" type invarants are tests for the variables, after the
	 * derivation of their effective values.
	 */
	Float64' = Float64
	inv ev == allOf
	([
		inv_Annotations'(ev.annotations),
		apply[Dimension](inv_Dimension', ev.dimension)
	]);

	Float32' = Float32
	inv ev == allOf
	([
		inv_Annotations'(ev.annotations),
		apply[Dimension](inv_Dimension', ev.dimension)
	]);

	Int64' = Int64
	inv ev == allOf
	([
		inv_Annotations'(ev.annotations),
		apply[Dimension](inv_Dimension', ev.dimension)
	]);

	Int32' = Int32
	inv ev == allOf
	([
		inv_Annotations'(ev.annotations),
		apply[Dimension](inv_Dimension', ev.dimension)
	]);

	Int16' = Int16
	inv ev == allOf
	([
		inv_Annotations'(ev.annotations),
		apply[Dimension](inv_Dimension', ev.dimension)
	]);

	Int8' = Int8
	inv ev == allOf
	([
		inv_Annotations'(ev.annotations),
		apply[Dimension](inv_Dimension', ev.dimension)
	]);

	UInt64' = UInt64
	inv ev == allOf
	([
		inv_Annotations'(ev.annotations),
		apply[Dimension](inv_Dimension', ev.dimension)
	]);

	UInt32' = UInt32
	inv ev == allOf
	([
		inv_Annotations'(ev.annotations),
		apply[Dimension](inv_Dimension', ev.dimension)
	]);

	UInt16' = UInt16
	inv ev == allOf
	([
		inv_Annotations'(ev.annotations),
		apply[Dimension](inv_Dimension', ev.dimension)
	]);

	UInt8' = UInt8
	inv ev == allOf
	([
		inv_Annotations'(ev.annotations),
		apply[Dimension](inv_Dimension', ev.dimension)
	]);

	Boolean' = Boolean
	inv ev == allOf
	([
		inv_Annotations'(ev.annotations),
		apply[Dimension](inv_Dimension', ev.dimension)
	]);

	String' = String
	inv ev == allOf
	([
		inv_Annotations'(ev.annotations),
		apply[Dimension](inv_Dimension', ev.dimension)
	]);

	Binary' = Binary
	inv ev == allOf
	([
		inv_Annotations'(ev.annotations),
		apply[Dimension](inv_Dimension', ev.dimension)
	]);

	Enumeration' = Enumeration
	inv ev == allOf
	([
		inv_Annotations'(ev.annotations),
		apply[Dimension](inv_Dimension', ev.dimension)
	]);

	Clock' = Clock
	inv ev == allOf
	([
		inv_Annotations'(ev.annotations)
	]);

	Dimension' = Dimension
	inv d == allOf
	([
		rule("validStartAndVRef", validStartAndVRef(d))
	]);
