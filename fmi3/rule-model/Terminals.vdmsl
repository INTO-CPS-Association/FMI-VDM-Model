/*********************************************************************************
 *
 *	Copyright (c) 2017-2022, INTO-CPS Association,
 *	c/o Professor Peter Gorm Larsen, Department of Engineering
 *	Finlandsgade 22, 8200 Aarhus N.
 *
 *	MIT Licence:
 *
 *	Permission is hereby granted, free of charge, to any person obtaining a copy of
 *	this software and associated documentation files (the "Software"), to deal in
 *	the Software without restriction, including without limitation the rights to use,
 *	copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 *	Software, and to permit persons to whom the Software is furnished to do so,
 *	subject to the following conditions:
 *
 *	The above copyright notice and this permission notice shall be included in all
 *	copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 *	INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 *	PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *	OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 *	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *	SPDX-License-Identifier: MIT
 *
 *********************************************************************************/
types
	FmiTerminalsAndIcons' = FmiTerminalsAndIcons
	inv fti == allOf
	([
		inv_GraphicalRepresentation'(fti.graphicalRepresentation),
		inv_Terminals'(fti.terminals),
		inv_Annotations'(fti.annotations)
	]);

	GraphicalRepresentation' = GraphicalRepresentation
	inv gr == allOf
	([
    	inv_CoordinateSystem'(gr.coordinateSystem),
    	inv_Icon'(gr.icon),
    	inv_Annotations'(gr.annotations)
	]);

	CoordinateSystem' = [CoordinateSystem]
	inv cs == cs <> nil => allOf
	([
		rule("validCoordinateSystem", validCoordinateSystem(cs))
	]);

	Icon' = [Icon]
	inv icon == icon <> nil => allOf
	([
		rule("validIcon", validIcon(icon))
	]);

	Terminals' = [Terminals]
	inv ts == ts <> nil => allOf
	([
		apply[Terminal](inv_Terminal', ts)
	]);

	Terminal' = Terminal
	inv t == allOf
	([
		inv_Terminals'(t.terminal),		-- RECURSIVE!!
		inv_Annotations'(t.annotations),

		rule("validTerminalMemberVariables", validTerminalMemberVariables(t.location, t.terminalMemberVariable)),
		rule("validTerminalGraphicalRepresentation", validTerminalGraphicalRepresentation(t.terminalGraphicalRepresentation)),
		rule("validTerminalStreamMemberVariables", validTerminalStreamMemberVariables(t.terminalStreamMemberVariable))
	]);

functions
	validCoordinateSystem: CoordinateSystem +> bool
	validCoordinateSystem(cs) ==
		-- @OnFail("validCoordinateSystem: Area is not bottom left to top right at %s", loc2str(cs.location))
		( isTLtoBR(cs.x1, cs.x2, cs.y1, cs.y2) );

	validIcon: Icon +> bool
	validIcon(icon) ==
		-- @OnFail("validIcon: Area is not bottom left to top right at %s", loc2str(icon.location))
		( isTLtoBR(icon.x1, icon.x2, icon.y1, icon.y2) );

	validTerminalMemberVariables: Location * [seq of (TerminalMemberVariable)] +> bool
	validTerminalMemberVariables(location, tmvs) ==
		tmvs <> nil =>
			-- @OnFail("validTerminalMemberVariables: Terminal member variables not unique at %s", loc2str(location))
			( card { v.variableName | v in seq tmvs } = len tmvs );

	validTerminalStreamMemberVariables: [seq of (TerminalStreamMemberVariable)] +> bool
	validTerminalStreamMemberVariables(tsmvs) ==
		tsmvs <> nil =>
			true;	-- rules here?

	validTerminalGraphicalRepresentation: [TerminalGraphicalRepresentation] +> bool
	validTerminalGraphicalRepresentation(tgr) ==
		tgr <> nil => allOf
		([
			-- @OnFail("validTerminalGraphicalRepresentation: Terminal area is not bottom left to top right at %s", loc2str(tgr.location))
			( tgr.x1 < tgr.x2 and tgr.y1 < tgr.y2 ),

			-- @OnFail("validTerminalGraphicalRepresentation: Colour attributes must be octets (<=255) at %s", loc2str(tgr.location))
			( tgr.defaultConnectionColor <> nil =>
				forall c in seq tgr.defaultConnectionColor & c <= 255 ),

			-- @OnFail("validTerminalGraphicalRepresentation: defaultConnectionStrokeSize must be >0 at %s", loc2str(tgr.location))
			( tgr.defaultConnectionStrokeSize <> nil =>
				tgr.defaultConnectionStrokeSize > 0 )
		]);
