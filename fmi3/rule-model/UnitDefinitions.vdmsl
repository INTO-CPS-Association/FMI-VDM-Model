/*********************************************************************************
 *
 *	Copyright (c) 2017-2022, INTO-CPS Association,
 *	c/o Professor Peter Gorm Larsen, Department of Engineering
 *	Finlandsgade 22, 8200 Aarhus N.
 *
 *	MIT Licence:
 *
 *	Permission is hereby granted, free of charge, to any person obtaining a copy of
 *	this software and associated documentation files (the "Software"), to deal in
 *	the Software without restriction, including without limitation the rights to use,
 *	copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 *	Software, and to permit persons to whom the Software is furnished to do so,
 *	subject to the following conditions:
 *
 *	The above copyright notice and this permission notice shall be included in all
 *	copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 *	INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 *	PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *	OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 *	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *	SPDX-License-Identifier: MIT
 *
 *********************************************************************************/
types
	UnitDefinitions' = [UnitDefinitions]
	inv units == units <> nil => allOf
	([
		apply[Unit](inv_Unit', units),

		rule("validUnitNames", validUnitNames(units))
	]);

	Unit' = Unit
	inv unit == allOf
	([
		apply[DisplayUnit](inv_DisplayUnit', unit.displayUnit),
		inv_Annotations'(unit.annotations),

		rule("validDisplayUnitNames", validDisplayUnitNames(unit))
	]);

	DisplayUnit' = DisplayUnit
	inv dunit == allOf
	([
		inv_Annotations'(dunit.annotations),

		rule("validInverseAndOffset", validInverseAndOffset(dunit))
	]);


functions
	validUnitNames: UnitDefinitions +> bool
	validUnitNames(units) ==
		-- @OnFail("validUnitNames: Unit names must be unique")
		( let names = [ u.name | u in seq units ] in
			len names = card elems names );

	validDisplayUnitNames: Unit +> bool
	validDisplayUnitNames(unit) ==
		-- @OnFail("validDisplayUnitNames: DisplayUnit names must be unique within %s at %s", unit.name, loc2str(unit.location))
		( unit.displayUnit <> nil =>
			let names = [ u.name | u in seq unit.displayUnit ] in
				len names = card elems names );

	validInverseAndOffset: DisplayUnit +> bool
	validInverseAndOffset(dunit) ==
		-- @OnFail("validInverseAndOffset: inverse = true is only allowed if offset = 0 at %s", loc2str(dunit.location))
		( dunit.$inverse = true => dunit.offset = 0 )