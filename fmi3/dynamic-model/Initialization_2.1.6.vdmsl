/*********************************************************************************
 *
 *	Copyright (c) 2017-2022, INTO-CPS Association,
 *	c/o Professor Peter Gorm Larsen, Department of Engineering
 *	Finlandsgade 22, 8200 Aarhus N.
 *
 *	MIT Licence:
 *
 *	Permission is hereby granted, free of charge, to any person obtaining a copy of
 *	this software and associated documentation files (the "Software"), to deal in
 *	the Software without restriction, including without limitation the rights to use,
 *	copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 *	Software, and to permit persons to whom the Software is furnished to do so,
 *	subject to the following conditions:
 *
 *	The above copyright notice and this permission notice shall be included in all
 *	copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 *	INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 *	PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *	OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 *	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *	SPDX-License-Identifier: MIT
 *
 *********************************************************************************/

/**
 * 2.1.6 Configuration, Initialization, Termination, and Resetting an FMU
 */
functions
	/**
	 * Implementation and API for fmi3EnterConfigurationMode.
	 */
	fmi3EnterConfigurationMode_Impl: fmi3Instance +> fmi3Status * fmi3Instance
	fmi3EnterConfigurationMode_Impl(c) ==
		mk_(<fmi3OK>, mu(c,
			fmuState |->
				if c.fmuState = <INSTANTIATED>
				then <CONFIGURATION_MODE>
				else <RECONFIGURATION_MODE>))
	pre
		mk_(c.fmuKind, c.fmuState) in set STATES_fmi3EnterConfigurationMode
		and exists sv in seq c.eModelVariables &
			sv.causality = <structuralParameter> and
			(c.fmuState = <RECONFIGURATION_MODE> => sv.variability = <tunable>)
	post
		RESULT.#2.fmuState in set {<CONFIGURATION_MODE>, <RECONFIGURATION_MODE>};

	fmi3EnterConfigurationMode: fmi3Instance +> fmi3Status * [fmi3Instance]
	fmi3EnterConfigurationMode(c) ==
		if mk_(c.fmuKind, c.fmuState) not in set STATES_fmi3EnterConfigurationMode
		then logAPIError(c, "Cannot call fmi3EnterConfigurationMode in this state", mk_(<fmi3Error>, nil))

		elseif not exists sv in seq c.eModelVariables &
			sv.causality = <structuralParameter> and
			(c.fmuState = <RECONFIGURATION_MODE> => sv.variability = <tunable>)
		then logAPIError(c, "Cannot call fmi3EnterConfigurationMode with structural parameters defined", mk_(<fmi3Error>, nil))

		else fmi3EnterConfigurationMode_Impl(c)
	 post
	 	RESULT.#1 <> <fmi3OK> <=> RESULT.#2 = nil;


	/**
	 * Implementation and API for fmi3ExitConfigurationMode.
	 */
	fmi3ExitConfigurationMode_Impl: fmi3Instance +> fmi3Status * fmi3Instance
	fmi3ExitConfigurationMode_Impl(c) ==
		mk_(<fmi3OK>, mu(c,
			fmuState |->
				if c.fmuState = <CONFIGURATION_MODE>
				then <INSTANTIATED>
				else
					cases c.fmuKind:
						<ModelExchange>			-> <EVENT_MODE>,
						<CoSimulation>			-> <STEP_MODE>,
						<ScheduledExecution>	-> <CLOCK_ACTIVATION_MODE>
					end))
	pre
		mk_(c.fmuKind, c.fmuState) in set STATES_fmi3ExitConfigurationMode
	post
		mk_(c.fmuKind, RESULT.#2.fmuState) in set STATES_fmi3EnterConfigurationMode;	-- ie. could call Enter again

	fmi3ExitConfigurationMode: fmi3Instance +> fmi3Status * [fmi3Instance]
	fmi3ExitConfigurationMode(c) ==
		if mk_(c.fmuKind, c.fmuState) not in set STATES_fmi3ExitConfigurationMode
		then logAPIError(c, "Cannot call fmi3ExitConfigurationMode in this state", mk_(<fmi3Error>, nil))
		else fmi3ExitConfigurationMode_Impl(c)
	 post
	 	RESULT.#1 <> <fmi3OK> <=> RESULT.#2 = nil;


	/**
	 * Implementation and API for fmi3EnterInitializationMode.
	 */
	fmi3EnterInitializationMode_Impl: fmi3Instance * [fmi3Float] * fmi3Float * [fmi3Float] +> fmi3Status * fmi3Instance
	fmi3EnterInitializationMode_Impl(c, tolerance, startTime, stopTime) ==
		mk_(<fmi3OK>, mu(c,
			fmuState	|-> <INITIALIZATION_MODE>,
			tolerance	|-> tolerance,
			startTime	|-> startTime,
			stopTime	|-> stopTime,
			currentTime	|-> startTime))		-- (Re)start experiment
	pre
		mk_(c.fmuKind, c.fmuState) in set STATES_fmi3EnterInitializationMode
	post
		RESULT.#2.fmuState = <INITIALIZATION_MODE>;

	fmi3EnterInitializationMode(
		c					: fmi3Instance,
		toleranceDefined	: fmi3Boolean,
		tolerance			: [fmi3Float],
		startTime			: fmi3Float,
		stopTimeDefined		: fmi3Boolean,
		stopTime			: [fmi3Float]) result : fmi3Status * [fmi3Instance]
	==
		if mk_(c.fmuKind, c.fmuState) not in set STATES_fmi3EnterInitializationMode
		then logAPIError(c, "Cannot call fmi3EnterInitializationMode in this state", mk_(<fmi3Error>, nil))

		elseif toleranceDefined and tolerance = nil
		then logAPIError(c, "tolerance must be defined if toleranceDefined", mk_(<fmi3Error>, nil))

		elseif stopTimeDefined and stopTime = nil
		then logAPIError(c, "stopTime must be defined if stopTimeDefined", mk_(<fmi3Error>, nil))

		else fmi3EnterInitializationMode_Impl(c, tolerance, startTime, stopTime)
	 post
	 	result.#1 <> <fmi3OK> <=> result.#2 = nil;


	/**
	 * Implementation and API for fmi3ExitInitializationMode.
	 */
	fmi3ExitInitializationMode_Impl: fmi3Instance +> fmi3Status * [fmi3Instance]
	fmi3ExitInitializationMode_Impl(c) ==
		let mk_(s, c2) = /* if c.dirty then c.calculateValues(c) else */ mk_(<fmi3OK>, c) in
			if s <> <fmi3OK>
			then mk_(s, nil)
			else mk_(<fmi3OK>, mu(c2,
				fmuState |->
					cases c.fmuKind:
						<ModelExchange>			-> <EVENT_MODE>,
						<CoSimulation>			-> <STEP_MODE>,
						<ScheduledExecution>	-> <CLOCK_ACTIVATION_MODE>
					end))

	pre
		mk_(c.fmuKind, c.fmuState) in set STATES_fmi3ExitInitializationMode
	post
		RESULT.#2.fmuState in set {<EVENT_MODE>, <STEP_MODE>, <CLOCK_ACTIVATION_MODE>};

	fmi3ExitInitializationMode: fmi3Instance +> fmi3Status * [fmi3Instance]
	fmi3ExitInitializationMode(c) ==
		if mk_(c.fmuKind, c.fmuState) not in set STATES_fmi3ExitInitializationMode
		then logAPIError(c, "Cannot call fmi3ExitInitializationMode in this state", mk_(<fmi3Error>, nil))
		else fmi3ExitInitializationMode_Impl(c)
	 post
	 	RESULT.#1 <> <fmi3OK> <=> RESULT.#2 = nil;


	/**
	 * Implementation and API for fmi3Terminate.
	 */
	fmi3Terminate_Impl: fmi3Instance +> fmi3Status * fmi3Instance
	fmi3Terminate_Impl(c) ==
		mk_(<fmi3OK>, mu(c, fmuState |-> <TERMINATED>))
	pre
		mk_(c.fmuKind, c.fmuState) in set STATES_fmi3Terminate
	post
		RESULT.#2.fmuState = <TERMINATED>;

	fmi3Terminate: fmi3Instance +> fmi3Status * [fmi3Instance]
	fmi3Terminate(c) ==
		if mk_(c.fmuKind, c.fmuState) not in set STATES_fmi3Terminate
		then logAPIError(c, "Cannot call fmi3Terminate in this state", mk_(<fmi3Error>, nil))
		else fmi3Terminate_Impl(c)
	 post
	 	RESULT.#1 <> <fmi3OK> <=> RESULT.#2 = nil;


	/**
	 * Implementation and API for fmi3Reset.
	 */
	fmi3Reset_Impl: fmi3Instance +> fmi3Status * fmi3Instance
	fmi3Reset_Impl(c) ==
		mk_(<fmi3OK>, mu(c,
			variables		|-> getStartValues(c.aliasVars, c.eModelVariables),
			derivatives		|-> getSolverValues(c.instanceEnvironment),
			eventIndicators	|-> getEventIndicatorValues(c.xmlModel),
			dirty			|-> true,
			fmuState		|-> <INSTANTIATED>))
	pre
		mk_(c.fmuKind, c.fmuState) in set STATES_fmi3Reset
	post
		RESULT.#2.fmuState = <INSTANTIATED>;

	fmi3Reset: fmi3Instance +> fmi3Status * [fmi3Instance]
	fmi3Reset(c) ==
		if mk_(c.fmuKind, c.fmuState) not in set STATES_fmi3Reset
		then logAPIError(c, "Cannot call fmi3Reset in this state", mk_(<fmi3Error>, nil))
		else fmi3Reset_Impl(c)
	 post
	 	RESULT.#1 <> <fmi3OK> <=> RESULT.#2 = nil;


