/*********************************************************************************
 *
 *	Copyright (c) 2017-2022, INTO-CPS Association,
 *	c/o Professor Peter Gorm Larsen, Department of Engineering
 *	Finlandsgade 22, 8200 Aarhus N.
 *
 *	MIT Licence:
 *
 *	Permission is hereby granted, free of charge, to any person obtaining a copy of
 *	this software and associated documentation files (the "Software"), to deal in
 *	the Software without restriction, including without limitation the rights to use,
 *	copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 *	Software, and to permit persons to whom the Software is furnished to do so,
 *	subject to the following conditions:
 *
 *	The above copyright notice and this permission notice shall be included in all
 *	copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 *	INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 *	PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *	OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 *	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *	SPDX-License-Identifier: MIT
 *
 *********************************************************************************/

/**
 * 3.2.1 Providing Independent Variables and Re-initialization of Caching
 */
functions
	/**
	 * Implementation and API for fmi3SetTime.
	 */
	fmi3SetTime_Impl: fmi3Instance * fmi3Float +> fmi3Status * fmi3Instance
	fmi3SetTime_Impl(c, time) ==
		mk_(<fmi3OK>, mu(c,
			currentTime |-> time))
	pre
		mk_(c.fmuKind, c.fmuState) in set STATES_fmi3SetTime;

	fmi3SetTime: fmi3Instance * fmi3Float +> fmi3Status * [fmi3Instance]
	fmi3SetTime(c, time) ==
		if mk_(c.fmuKind, c.fmuState) not in set STATES_fmi3SetTime
		then logAPIError(c, "Cannot call fmi3SetTime in this state", mk_(<fmi3Error>, nil))
		else fmi3SetTime_Impl(c, time)
	 post
	 	RESULT.#1 <> <fmi3OK> <=> RESULT.#2 = nil;


	/**
	 * Implementation and API for fmi3GetContinuousStates.
	 */
	fmi3SetContinuousStates_Impl: fmi3Instance * seq of fmi3Float * nat +> fmi3Status * fmi3Instance
	fmi3SetContinuousStates_Impl(c, x, nx) ==
		let updates = merge
		{
			let mk_(first, last) = valueRange(c, c.continuousTimeStates, i)
				in { c.continuousTimeStates(i) |-> x(first, ..., last) }
			| i in set inds c.continuousTimeStates
		}
		in
			mk_(<fmi3OK>, mu(c,
				variables |-> c.variables ++ updates,
				dirty     |-> true))
	pre
		mk_(c.fmuKind, c.fmuState) in set STATES_fmi3GetContinuousStates
		and nx = len c.continuousTimeStates
		and nx = len x;

	fmi3SetContinuousStates: fmi3Instance * seq of fmi3Float * nat +> fmi3Status * [fmi3Instance]
	fmi3SetContinuousStates(c, x, nx) ==
		if mk_(c.fmuKind, c.fmuState) not in set STATES_fmi3SetContinuousStates
		then logAPIError(c, "Cannot call fmi3SetContinuousStates in this state", mk_(<fmi3Error>, nil))

		elseif nx <> len x
		then logAPIError(c, "Wrong number of derivates passed", mk_(<fmi3Error>, nil))

		elseif nx <> len c.continuousTimeStates
		then logAPIError(c, "Wrong number of derivates being set", mk_(<fmi3Error>, nil))

	 	else fmi3SetContinuousStates_Impl(c, x, nx)
	 post
	 	RESULT.#1 = <fmi3OK> <=> RESULT.#2 <> nil;


