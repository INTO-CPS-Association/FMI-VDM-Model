/*********************************************************************************
 *
 *	Copyright (c) 2017-2022, INTO-CPS Association,
 *	c/o Professor Peter Gorm Larsen, Department of Engineering
 *	Finlandsgade 22, 8200 Aarhus N.
 *
 *	MIT Licence:
 *
 *	Permission is hereby granted, free of charge, to any person obtaining a copy of
 *	this software and associated documentation files (the "Software"), to deal in
 *	the Software without restriction, including without limitation the rights to use,
 *	copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 *	Software, and to permit persons to whom the Software is furnished to do so,
 *	subject to the following conditions:
 *
 *	The above copyright notice and this permission notice shall be included in all
 *	copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 *	INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 *	PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *	OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 *	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *	SPDX-License-Identifier: MIT
 *
 *********************************************************************************/

/**
 * 2.1.12. Getting Number of Event Indicators
 * 2.1.13. Getting Number of States
 * 2.1.14. Getting Number of Variable Dependencies and Variable Dependencies
 */
functions
	/**
	 * Implementation and API for fmi3GetNumberOfEventIndicators.
	 */
	fmi3GetNumberOfEventIndicators_Impl: fmi3Instance -> fmi3Status * nat
	fmi3GetNumberOfEventIndicators_Impl(c) ==
		mk_(<fmi3OK>, len c.eventIndicators)
	pre
		mk_(c.fmuKind, c.fmuState) in set STATES_fmi3GetNumberOfEventIndicators
	post
		RESULT.#1 = <fmi3OK>;

	fmi3GetNumberOfEventIndicators: fmi3Instance -> fmi3Status * [nat]
	fmi3GetNumberOfEventIndicators(c) ==
		if mk_(c.fmuKind, c.fmuState) not in set STATES_fmi3GetNumberOfEventIndicators
		then logAPIError(c, "Cannot call fmi3GetNumberOfEventIndicators in this state", mk_(<fmi3Error>, nil))
		else fmi3GetNumberOfEventIndicators_Impl(c)
	 post
	 	RESULT.#1 <> <fmi3OK> <=> RESULT.#2 = nil;


	/**
	 * Implementation and API for fmi3GetNumberOfContinuousStates.
	 */
	fmi3GetNumberOfContinuousStates_Impl: fmi3Instance -> fmi3Status * nat
	fmi3GetNumberOfContinuousStates_Impl(c) ==
		mk_(<fmi3OK>, len c.continuousTimeStates)
	pre
		mk_(c.fmuKind, c.fmuState) in set STATES_fmi3GetNumberOfContinuousStates
	post
		RESULT.#1 = <fmi3OK>;

	fmi3GetNumberOfContinuousStates: fmi3Instance -> fmi3Status * [nat]
	fmi3GetNumberOfContinuousStates(c) ==
		if mk_(c.fmuKind, c.fmuState) not in set STATES_fmi3GetNumberOfContinuousStates
		then logAPIError(c, "Cannot call fmi3GetNumberOfContinuousStates in this state", mk_(<fmi3Error>, nil))
		else fmi3GetNumberOfContinuousStates_Impl(c)
	 post
	 	RESULT.#1 <> <fmi3OK> <=> RESULT.#2 = nil;


	/**
	 * Implementation and API for fmi3GetNumberOfVariableDependencies.
	 */
	fmi3GetNumberOfVariableDependencies_Impl: fmi3Instance * fmi3ValueReference -> fmi3Status * nat
	fmi3GetNumberOfVariableDependencies_Impl(c, valueReference) ==
		mk_(<fmi3OK>, len c.dependencies(valueReference))
	pre
		mk_(c.fmuKind, c.fmuState) in set STATES_fmi3GetNumberOfVariableDependencies
		and (c.fmuKind = <CoSimulation> and nilBool(c.xmlModel.coSimulation.providesPerElementDependencies)
			or c.fmuKind = <ModelExchange> and nilBool(c.xmlModel.modelExchange.providesPerElementDependencies)
			or c.fmuKind = <ScheduledExecution> and nilBool(c.xmlModel.scheduledExecution.providesPerElementDependencies))
		and valueReference in set dom c.dependencies
	post
		RESULT.#1 = <fmi3OK>;

	fmi3GetNumberOfVariableDependencies: fmi3Instance * fmi3ValueReference -> fmi3Status * [nat]
	fmi3GetNumberOfVariableDependencies(c, valueReference) ==
		if mk_(c.fmuKind, c.fmuState) not in set STATES_fmi3GetNumberOfVariableDependencies
		then logAPIError(c, "Cannot call fmi3GetNumberOfVariableDependencies in this state", mk_(<fmi3Error>, nil))

		elseif c.fmuKind = <CoSimulation> and not nilBool(c.xmlModel.coSimulation.providesPerElementDependencies)
		then logAPIError(c, "FMU does not provide per element dependencies", mk_(<fmi3Error>, nil))

		elseif c.fmuKind = <ModelExchange> and not nilBool(c.xmlModel.modelExchange.providesPerElementDependencies)
		then logAPIError(c, "FMU does not provide per element dependencies", mk_(<fmi3Error>, nil))

		elseif c.fmuKind = <ScheduledExecution> and not nilBool(c.xmlModel.scheduledExecution.providesPerElementDependencies)
		then logAPIError(c, "FMU does not provide per element dependencies", mk_(<fmi3Error>, nil))

		elseif valueReference not in set dom c.dependencies
		then logAPIError(c, "Unknown valueReference", mk_(<fmi3Error>, nil))

		else fmi3GetNumberOfVariableDependencies_Impl(c, valueReference)
	 post
	 	RESULT.#1 <> <fmi3OK> <=> RESULT.#2 = nil;

