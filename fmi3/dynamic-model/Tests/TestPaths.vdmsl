/*********************************************************************************
 *
 *	Copyright (c) 2017-2022, INTO-CPS Association,
 *	c/o Professor Peter Gorm Larsen, Department of Engineering
 *	Finlandsgade 22, 8200 Aarhus N.
 *
 *	MIT Licence:
 *
 *	Permission is hereby granted, free of charge, to any person obtaining a copy of
 *	this software and associated documentation files (the "Software"), to deal in
 *	the Software without restriction, including without limitation the rights to use,
 *	copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 *	Software, and to permit persons to whom the Software is furnished to do so,
 *	subject to the following conditions:
 *
 *	The above copyright notice and this permission notice shall be included in all
 *	copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 *	INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 *	PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *	OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 *	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *	SPDX-License-Identifier: MIT
 *
 *********************************************************************************/

/**
 * Test the basic successful call paths for each FMU type.
 */
operations
	testModelExchangePaths: () ==> bool
	testModelExchangePaths() ==
	(
		dcl c : [fmi3Instance] := testInstantiateModelExchange("ME", "{8c4e810f-3df3-4a00-8276-176fa3c9f9e0}");
		if c = nil then return false;

		let mk_(s, c2) = fmi3EnterConfigurationMode(c) in
			if s <> <fmi3OK> then return false
			else c := c2;

		let mk_(s, c2) = fmi3ExitConfigurationMode(c) in
			if s <> <fmi3OK> then return false
			else c := c2;

		let mk_(s, c2) = fmi3EnterInitializationMode(c, false, nil, 0, false, nil) in
			if s <> <fmi3OK> then return false
			else c := c2;

		let mk_(s, c2) = fmi3ExitInitializationMode(c) in
			if s <> <fmi3OK> then return false
			else c := c2;

		let mk_(s, c2) = fmi3EnterConfigurationMode(c) in
			if s <> <fmi3OK> then return false
			else c := c2;

		let mk_(s, c2) = fmi3ExitConfigurationMode(c) in
			if s <> <fmi3OK> then return false
			else c := c2;

		assert(c.fmuState = <EVENT_MODE>);

		let mk_(s, c2) = fmi3EnterContinuousTimeMode(c) in
			if s <> <fmi3OK> then return false
			else c := c2;

		assert(c.fmuState = <CONTINUOUS_TIME_MODE>);

		let mk_(s, c2) = fmi3EnterEventMode(c, false, false, [], 0, false) in
			if s <> <fmi3OK> then return false
			else c := c2;

		assert(c.fmuState = <EVENT_MODE>);

		let mk_(s, c2) = fmi3SetTime(c, 99999) in
			if s <> <fmi3OK> then return false
			else c := c2;

		let mk_(s, v) = fmi3GetInt64(c, [99], 1, 1) in
			if s <> <fmi3OK> then return false
			else assert(v = [123]);

		let mk_(s, c2) = fmi3SetInt64(c, [99], 1, [12345]) in
			if s <> <fmi3OK> then return false
			else c := c2;

		let mk_(s, v) = fmi3GetInt64(c, [99], 1, 1) in
			if s <> <fmi3OK> then return false
			else assert(v = [12345]);


		let mk_(s, fmustate) = fmi3GetFMUState(c) in
			if s <> <fmi3OK> then return false
			else let mk_(s2, size) = fmi3SerializedFMUStateSize(c, fmustate) in
				if s2 <> <fmi3OK> then return false
				else let mk_(s3, serialized) = fmi3SerializeFMUState(c, fmustate, size) in
					if s3 <> <fmi3OK> then return false
					else let mk_(s4, fmustate2) = fmi3DeSerializeFMUState(c, serialized, size) in
						if s4 <> <fmi3OK> then return false
						else let mk_(s5, c2) = fmi3SetFMUState(c, fmustate2) in
							if s5 <> <fmi3OK> then return false
							else c := c2;

		let mk_(s, size) = fmi3GetNumberOfVariableDependencies(c, 1) in
			if s <> <fmi3OK> then return false
			else assert(size = 1);

		let mk_(s, mk_(A, B, C, D)) = fmi3GetVariableDependencies(c, 1, 1) in
			if s <> <fmi3OK> then return false
			else assert(A = [1] and B = [0] and C = [0] and D = [<Dependent>]);

		let mk_(s, size) = fmi3GetNumberOfEventIndicators(c) in
			if s <> <fmi3OK> then return false
			else assert(size = 1);

		let mk_(s1, size) = fmi3GetNumberOfContinuousStates(c),
			mk_(s2, nominals) = fmi3GetNominalsOfContinuousStates(c, size)
		in
			if s1 <> <fmi3OK> or s2 <> <fmi3OK> then return false
			else assert(size = 2 and nominals = [1, 1]);

		let mk_(s, c2) = fmi3Reset(c) in
			if s <> <fmi3OK> then return false
			else c := c2;

		let mk_(s, c2) = fmi3Reset(c) in
			if s <> <fmi3OK> then return false
			else c := c2;

		let mk_(s, c2) = fmi3Terminate(c) in
			if s <> <fmi3OK> then return false
			else c := c2;

		return (fmi3FreeInstance(c) = <VOID>);
	);

	testCoSimulationPaths: () ==> bool
	testCoSimulationPaths() ==
	(
		dcl c : [fmi3Instance] := testInstantiateCoSimulation([], false);
		if c = nil then return false;

		let mk_(s, c2) = fmi3EnterConfigurationMode(c) in
			if s <> <fmi3OK> then return false
			else c := c2;

		let mk_(s, c2) = fmi3ExitConfigurationMode(c) in
			if s <> <fmi3OK> then return false
			else c := c2;

		let mk_(s, c2) = fmi3EnterInitializationMode(c, false, nil, 0, false, nil) in
			if s <> <fmi3OK> then return false
			else c := c2;

		let mk_(s, c2) = fmi3ExitInitializationMode(c) in
			if s <> <fmi3OK> then return false
			else c := c2;

		let mk_(s, c2) = fmi3EnterConfigurationMode(c) in
			if s <> <fmi3OK> then return false
			else c := c2;

		let mk_(s, c2) = fmi3ExitConfigurationMode(c) in
			if s <> <fmi3OK> then return false
			else c := c2;

		assert(c.fmuState = <STEP_MODE>);

		let mk_(s, v) = fmi3GetFloat64(c, [99], 1, 1) in
			if s <> <fmi3OK> then return false
			else assert(v = [123]);

		let mk_(s, c2) = fmi3SetFloat64(c, [99], 1, [12345]) in
			if s <> <fmi3OK> then return false
			else c := c2;

		let mk_(s, v) = fmi3GetFloat64(c, [99], 1, 1) in
			if s <> <fmi3OK> then return false
			else assert(v = [12345]);


		let mk_(s, fmustate) = fmi3GetFMUState(c) in
			if s <> <fmi3OK> then return false
			else let mk_(s2, size) = fmi3SerializedFMUStateSize(c, fmustate) in
				if s2 <> <fmi3OK> then return false
				else let mk_(s3, serialized) = fmi3SerializeFMUState(c, fmustate, size) in
					if s3 <> <fmi3OK> then return false
					else let mk_(s4, fmustate2) = fmi3DeSerializeFMUState(c, serialized, size) in
						if s4 <> <fmi3OK> then return false
						else let mk_(s5, c2) = fmi3SetFMUState(c, fmustate2) in
							if s5 <> <fmi3OK> then return false
							else c := c2;

		let mk_(s, ds, n) = fmi3GetDirectionalDerivative(c, [0], 1, [0], 1) in
			if s <> <fmi3OK> then return false
			else assert(ds = [1.0] and n = 1);

		let mk_(s, ds, n) = fmi3GetAdjointDerivative(c, [0], 1, [0], 1) in
			if s <> <fmi3OK> then return false
			else assert(ds = [1.0] and n = 1);

		let mk_(s, c2) = fmi3Reset(c) in
			if s <> <fmi3OK> then return false
			else c := c2;

		let mk_(s, c2) = fmi3Terminate(c) in
			if s <> <fmi3OK> then return false
			else c := c2;

		return (fmi3FreeInstance(c) = <VOID>);
	);

	testCoSimulationPaths2: () ==> bool
	testCoSimulationPaths2() ==
	(
		dcl c : [fmi3Instance] := testInstantiateCoSimulation([], true);	-- eventModeRequired!
		if c = nil then return false;

		let mk_(s, c2) = fmi3EnterConfigurationMode(c) in
			if s <> <fmi3OK> then return false
			else c := c2;

		let mk_(s, c2) = fmi3ExitConfigurationMode(c) in
			if s <> <fmi3OK> then return false
			else c := c2;

		let mk_(s, c2) = fmi3EnterInitializationMode(c, false, nil, 0, false, nil) in
			if s <> <fmi3OK> then return false
			else c := c2;

		let mk_(s, c2) = fmi3ExitInitializationMode(c) in
			if s <> <fmi3OK> then return false
			else c := c2;

		let mk_(s, c2) = fmi3EnterConfigurationMode(c) in
			if s <> <fmi3OK> then return false
			else c := c2;

		let mk_(s, c2) = fmi3ExitConfigurationMode(c) in
			if s <> <fmi3OK> then return false
			else c := c2;

		assert(c.fmuState = <STEP_MODE>);

		let mk_(s, c2) = fmi3EnterEventMode(c, false, false, [], 0, false) in
			if s <> <fmi3OK> then return false
			else c := c2;

		assert(c.fmuState = <EVENT_MODE>);

		let mk_(s, c2) = fmi3EnterStepMode(c) in
			if s <> <fmi3OK> then return false
			else c := c2;

		let mk_(s, v) = fmi3GetFloat64(c, [99], 1, 1) in
			if s <> <fmi3OK> then return false
			else assert(v = [123]);

		let mk_(s, c2) = fmi3SetFloat64(c, [99], 1, [12345]) in
			if s <> <fmi3OK> then return false
			else c := c2;

		let mk_(s, v) = fmi3GetFloat64(c, [99], 1, 1) in
			if s <> <fmi3OK> then return false
			else assert(v = [12345]);


		let mk_(s, fmustate) = fmi3GetFMUState(c) in
			if s <> <fmi3OK> then return false
			else let mk_(s2, size) = fmi3SerializedFMUStateSize(c, fmustate) in
				if s2 <> <fmi3OK> then return false
				else let mk_(s3, serialized) = fmi3SerializeFMUState(c, fmustate, size) in
					if s3 <> <fmi3OK> then return false
					else let mk_(s4, fmustate2) = fmi3DeSerializeFMUState(c, serialized, size) in
						if s4 <> <fmi3OK> then return false
						else let mk_(s5, c2) = fmi3SetFMUState(c, fmustate2) in
							if s5 <> <fmi3OK> then return false
							else c := c2;


		let mk_(s, c2) = fmi3Reset(c) in
			if s <> <fmi3OK> then return false
			else c := c2;

		let mk_(s, c2) = fmi3Terminate(c) in
			if s <> <fmi3OK> then return false
			else c := c2;

		return (fmi3FreeInstance(c) = <VOID>);
	);

	testScheduledExecutionPaths: () ==> bool
	testScheduledExecutionPaths() ==
	(
		dcl c : [fmi3Instance] := testInstantiateScheduledExecution([]);
		if c = nil then return false;

		let mk_(s, c2) = fmi3EnterConfigurationMode(c) in
			if s <> <fmi3OK> then return false
			else c := c2;

		let mk_(s, c2) = fmi3ExitConfigurationMode(c) in
			if s <> <fmi3OK> then return false
			else c := c2;

		let mk_(s, c2) = fmi3EnterInitializationMode(c, false, nil, 0, false, nil) in
			if s <> <fmi3OK> then return false
			else c := c2;

		let mk_(s, c2) = fmi3ExitInitializationMode(c) in
			if s <> <fmi3OK> then return false
			else c := c2;

		let mk_(s, c2) = fmi3EnterConfigurationMode(c) in
			if s <> <fmi3OK> then return false
			else c := c2;

		let mk_(s, c2) = fmi3ExitConfigurationMode(c) in
			if s <> <fmi3OK> then return false
			else c := c2;

		assert(c.fmuState = <CLOCK_ACTIVATION_MODE>);

		let mk_(s, v) = fmi3GetInt64(c, [0], 1, 1) in
			if s <> <fmi3OK> then return false
			else assert(v = [123]);

		let mk_(s, c2) = fmi3SetInt64(c, [0], 1, [12345]) in
			if s <> <fmi3OK> then return false
			else c := c2;

		let mk_(s, v) = fmi3GetInt64(c, [0], 1, 1) in
			if s <> <fmi3OK> then return false
			else assert(v = [12345]);


		let mk_(s, fmustate) = fmi3GetFMUState(c) in
			if s <> <fmi3OK> then return false
			else let mk_(s2, size) = fmi3SerializedFMUStateSize(c, fmustate) in
				if s2 <> <fmi3OK> then return false
				else let mk_(s3, serialized) = fmi3SerializeFMUState(c, fmustate, size) in
					if s3 <> <fmi3OK> then return false
					else let mk_(s4, fmustate2) = fmi3DeSerializeFMUState(c, serialized, size) in
						if s4 <> <fmi3OK> then return false
						else let mk_(s5, c2) = fmi3SetFMUState(c, fmustate2) in
							if s5 <> <fmi3OK> then return false
							else c := c2;


		let mk_(s, c2) = fmi3Reset(c) in
			if s <> <fmi3OK> then return false
			else c := c2;

		let mk_(s, c2) = fmi3Terminate(c) in
			if s <> <fmi3OK> then return false
			else c := c2;

		return (fmi3FreeInstance(c) = <VOID>);
	);

	assert: bool ==> ()
	assert(b) ==
		if b then skip else error;

	/**
	 * Run all tests.
	 */
	testPaths: () ==> seq of bool
	testPaths() == return
	[
		testModelExchangePaths(),
		testCoSimulationPaths(),
		testCoSimulationPaths2(),
		testScheduledExecutionPaths()
	]
	post elems RESULT = {true};
