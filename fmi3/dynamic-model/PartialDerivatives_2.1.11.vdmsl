/*********************************************************************************
 *
 *	Copyright (c) 2017-2022, INTO-CPS Association,
 *	c/o Professor Peter Gorm Larsen, Department of Engineering
 *	Finlandsgade 22, 8200 Aarhus N.
 *
 *	MIT Licence:
 *
 *	Permission is hereby granted, free of charge, to any person obtaining a copy of
 *	this software and associated documentation files (the "Software"), to deal in
 *	the Software without restriction, including without limitation the rights to use,
 *	copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 *	Software, and to permit persons to whom the Software is furnished to do so,
 *	subject to the following conditions:
 *
 *	The above copyright notice and this permission notice shall be included in all
 *	copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 *	INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 *	PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *	OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 *	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *	SPDX-License-Identifier: MIT
 *
 *********************************************************************************/

/**
 * 2.1.11 Getting Partial Derivatives
 */
functions
	/**
	 * Implementation and API for fmi3GetDirectionalDerivative.
	 */
	fmi3GetDirectionalDerivative_Impl(
		c			: fmi3Instance ,
		unknowns	: seq1 of fmi3ValueReference,
		nUnknowns	: nat1,
		knowns		: seq1 of fmi3ValueReference,
		nKnowns		: nat1) result : fmi3Status * [seq1 of fmi3Float] * [nat1]
	==
		let mk_(s, derivatives, n) = mk_(<fmi3OK>, [1.0], 1) in		-- TODO calculate function?
			mk_(s, derivatives, n)
	pre
		mk_(c.fmuKind, c.fmuState) in set STATES_fmi3GetDirectionalDerivative
		and (c.fmuKind = <CoSimulation> and nilBool(c.xmlModel.coSimulation.providesDirectionalDerivatives)
			or c.fmuKind = <ModelExchange> and nilBool(c.xmlModel.modelExchange.providesDirectionalDerivatives))
		and nUnknowns = len unknowns
		and nKnowns = len knowns
	post
		result.#1 = <fmi3OK> => len result.#2 = result.#3;

	fmi3GetDirectionalDerivative(
		c			: fmi3Instance ,
		unknowns	: seq1 of fmi3ValueReference,
		nUnknowns	: nat1,
		knowns		: seq1 of fmi3ValueReference,
		nKnowns		: nat1) result : fmi3Status * [seq1 of fmi3Float] * [nat1]
	==
		if mk_(c.fmuKind, c.fmuState) not in set STATES_fmi3GetDirectionalDerivative
		then logAPIError(c, "Cannot call fmi3GetDirectionalDerivative in this state", mk_(<fmi3Error>, nil, nil))

		elseif c.fmuKind = <CoSimulation> and not nilBool(c.xmlModel.coSimulation.providesDirectionalDerivatives)
		then logAPIError(c, "Model does not support directional derivatives", mk_(<fmi3Error>, nil, nil))

		elseif c.fmuKind = <ModelExchange> and not nilBool(c.xmlModel.modelExchange.providesDirectionalDerivatives)
		then logAPIError(c, "Model does not support directional derivatives", mk_(<fmi3Error>, nil, nil))

		elseif nUnknowns <> len unknowns or nKnowns <> len knowns
		then logAPIError(c, "Array length mismatch", mk_(<fmi3Error>, nil, nil))

		else fmi3GetDirectionalDerivative_Impl(c, unknowns, nUnknowns, knowns, nKnowns)
	 post
	 	result.#1 <> <fmi3OK> <=> result.#2 = nil and result.#3 = nil;

	/**
	 * Implementation and API for fmi3GetAdjointDerivative.
	 */
	fmi3GetAdjointDerivative_Impl(
		c			: fmi3Instance ,
		unknowns	: seq1 of fmi3ValueReference,
		nUnknowns	: nat1,
		knowns		: seq1 of fmi3ValueReference,
		nKnowns		: nat1) result : fmi3Status * [seq1 of fmi3Float] * [nat1]
	==
		let mk_(s, derivatives, n) = mk_(<fmi3OK>, [1.0], 1) in		-- TODO calculate function?
			mk_(s, derivatives, n)
	pre
		mk_(c.fmuKind, c.fmuState) in set STATES_fmi3GetAdjointDerivative
		and (c.fmuKind = <CoSimulation> and nilBool(c.xmlModel.coSimulation.providesAdjointDerivatives)
			or c.fmuKind = <ModelExchange> and nilBool(c.xmlModel.modelExchange.providesAdjointDerivatives))
		and nUnknowns = len unknowns
		and nKnowns = len knowns
	post
		result.#1 = <fmi3OK> => len result.#2 = result.#3;

	fmi3GetAdjointDerivative(
		c			: fmi3Instance ,
		unknowns	: seq1 of fmi3ValueReference,
		nUnknowns	: nat1,
		knowns		: seq1 of fmi3ValueReference,
		nKnowns		: nat1) result : fmi3Status * [seq1 of fmi3Float] * [nat1]
	==
		if mk_(c.fmuKind, c.fmuState) not in set STATES_fmi3GetAdjointDerivative
		then logAPIError(c, "Cannot call fmi3GetAdjointDerivative in this state", mk_(<fmi3Error>, nil, nil))

		elseif c.fmuKind = <CoSimulation> and not nilBool(c.xmlModel.coSimulation.providesAdjointDerivatives)
		then logAPIError(c, "Model does not support adjoint derivatives", mk_(<fmi3Error>, nil, nil))

		elseif c.fmuKind = <ModelExchange> and not nilBool(c.xmlModel.modelExchange.providesAdjointDerivatives)
		then logAPIError(c, "Model does not support adjoint derivatives", mk_(<fmi3Error>, nil, nil))

		elseif nUnknowns <> len unknowns or nKnowns <> len knowns
		then logAPIError(c, "Array length mismatch", mk_(<fmi3Error>, nil, nil))

		else fmi3GetAdjointDerivative_Impl(c, unknowns, nUnknowns, knowns, nKnowns)
	 post
	 	result.#1 <> <fmi3OK> <=> result.#2 = nil and result.#3 = nil;
