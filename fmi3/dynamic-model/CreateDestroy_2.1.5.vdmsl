/*********************************************************************************
 *
 *	Copyright (c) 2017-2022, INTO-CPS Association,
 *	c/o Professor Peter Gorm Larsen, Department of Engineering
 *	Finlandsgade 22, 8200 Aarhus N.
 *
 *	MIT Licence:
 *
 *	Permission is hereby granted, free of charge, to any person obtaining a copy of
 *	this software and associated documentation files (the "Software"), to deal in
 *	the Software without restriction, including without limitation the rights to use,
 *	copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 *	Software, and to permit persons to whom the Software is furnished to do so,
 *	subject to the following conditions:
 *
 *	The above copyright notice and this permission notice shall be included in all
 *	copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 *	INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 *	PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *	OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 *	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *	SPDX-License-Identifier: MIT
 *
 *********************************************************************************/

/**
 * 2.1.5 Creation, Destruction and Logging of FMU Instances
 */
functions
	/**
	 * Implementation of basic fmi3Instantiate. See API methods below for different modes.
	 */
	fmi3Instantiate_Impl(
		allowed				: States,
		instanceName		: fmi3String,
		instantiationToken	: fmi3String,
		fmuKind				: fmi3FMUKind,
		coSimConfig			: [fmi3CoSimulationConfiguration],
		instanceEnvironment	: fmi3InstanceEnvironment,
		logMessage			: fmi3CallbackLogMessage) result : fmi3Instance
	==
		let xmlModel = instanceEnvironment.xmlModel,
			eModelVariables = effectiveScalarVariables(xmlModel),
			aliasVars = getAliasRefMap(eModelVariables)
		in
			mk_fmi3Instance
			(
				-- The instance name
				instanceName,

				-- The FMU type
				fmuKind,

				-- The initial state
				<INSTANTIATED>,

				-- The callbacks and environment passed
				logMessage,
				instanceEnvironment,
				coSimConfig,

				-- The XML model
				xmlModel,

				-- The effective scalar variables, after all defaults and inherited values set
				eModelVariables,

				-- The continuous time state references
				[ v.valueReference |
					v in seq getContinuousTimeStates(eModelVariables) ],

				-- The state derivative references
				{ v.valueReference |
					v in set stateDerivatives(eModelVariables) },

				-- The initial unknown references, which may be an empty set
				{ u.valueReference |
					u in seq nilSeq[InitialUnknown](xmlModel.modelStructure.initialUnknown) },

				-- The solver derivative references
				[ sd | sd in seq instanceEnvironment.solverData.derivatives ],

				-- The map of valueReferences to sets of effective Variables
				aliasVars,

				-- The state map indexed by valueReference, created from the effective SVs
				-- Initially either the start value given, or the default start value for the type.
				getStartValues(aliasVars, eModelVariables),

				-- The map of valueReferences to per-element dependencies
				getDependencies(eModelVariables),

				-- The solver data vector, addressed by SolverData's vref
				getSolverValues(instanceEnvironment),

				-- The eventIndicators
				getEventIndicatorValues(xmlModel),

				-- Initially dirty, because "start" values above need a calculate call
				true,

				-- IsNewEventIteration, used in ME only
				false,

				-- EventInfo for ME and CS?
				mk_fmi3EventInfo(
					nil,	-- nextEventTime
					false,	-- newDiscreteStatesNeeded
					false,	-- terminateSimulation
					false,	-- nominalsOfContinuousStatesChanged
					false,	-- valuesOfContinuousStatesChanged
					false	-- nextEventTimeDefined
				),

				-- Intermediate access allowed - initially false
				false,		-- intermediateAccessGetAllowed
				false,		-- intermediateAccessSetAllowed

				-- tolerance
				if xmlModel.defaultExperiment <> nil
				then nilReal(xmlModel.defaultExperiment.tolerance)
				else nil,

				-- start time
				if xmlModel.defaultExperiment <> nil
				then nilReal(xmlModel.defaultExperiment.startTime)
				else nil,

				-- stop time
				if xmlModel.defaultExperiment <> nil
				then nilReal(xmlModel.defaultExperiment.stopTime)
				else nil,

				-- current time, set by fmi3EnterInitializationMode
				nil
			)

	pre
		mk_(nil, <START>) in set allowed
		and instanceName <> ""
		and instantiationToken = instanceEnvironment.xmlModel.instantiationToken
	post
		result.fmuState = <INSTANTIATED>
		and result.fmuKind = fmuKind
		and result.coSimulationConfiguration = coSimConfig;


	/**
	 * The fmi3InstantiateModelExchange API. This performs sufficient checks to pass the precondition on the
	 * implementation function, returning nil if any checks fail.
	 */
	fmi3InstantiateModelExchange(
		instanceName		: fmi3String,
		instantiationToken	: fmi3String,
		-					: fmi3String,	-- resourceLocation not modelled
		-					: fmi3Boolean,	-- visible not modelled
		loggingOn			: fmi3Boolean,
		instanceEnvironment	: fmi3InstanceEnvironment,
		logMessage			: fmi3CallbackLogMessage) result : [fmi3Instance]
	==
		if mk_(nil, <START>) not in set STATES_fmi3InstantiateModelExchange
		then logInst(instanceEnvironment, instanceName,
				"fmi3InstantiateModelExchange cannot be called in this state", nil)

		elseif instanceName = ""
		then logInst(instanceEnvironment, instanceName,
				"fmi3InstantiateModelExchange instanceName cannot be empty", nil)

		elseif instantiationToken <> instanceEnvironment.xmlModel.instantiationToken
		then logInst(instanceEnvironment, instanceName,
				"fmi3InstantiateModelExchange instantiationToken does not match XML configuration", nil)

		elseif instanceEnvironment.xmlModel.modelExchange = nil
		then logInst(instanceEnvironment, instanceName,
				"fmi3InstantiateModelExchange must define ModelExchange XML configuration", nil)

		else
			let instance = fmi3Instantiate_Impl(STATES_fmi3InstantiateModelExchange, instanceName,
				instantiationToken, <ModelExchange>, nil, instanceEnvironment, logMessage) in
			let mk_(-, result) = fmi3SetDebugLogging(instance, loggingOn, 0, []) in
				result;

	/**
	 * The fmi3InstantiateCoSimulation API. This performs sufficient checks to pass the precondition on the
	 * implementation function, returning nil if any checks fail.
	 */
	fmi3InstantiateCoSimulation(
		instanceName							: fmi3String,
		instantiationToken						: fmi3String,
		-										: fmi3String,	-- resourceLocation not modelled
		-										: fmi3Boolean,	-- visible not modelled
		loggingOn								: fmi3Boolean,
		eventModeRequired						: fmi3Boolean,
		requiredIntermediateVariables			: seq of fmi3ValueReference,
		nRequiredIntermediateVariables			: nat,
		instanceEnvironment						: fmi3InstanceEnvironment,
		logMessage								: fmi3CallbackLogMessage,
		intermediateUpdate						: [fmi3CallbackIntermediateUpdate]) result : [fmi3Instance]
	==
		if mk_(nil, <START>) not in set STATES_fmi3InstantiateCoSimulation
		then logInst(instanceEnvironment, instanceName,
				"fmi3fmi3InstantiateCoSimulation cannot be called in this state", nil)

		elseif instanceName = ""
		then logInst(instanceEnvironment, instanceName,
				"fmi3fmi3InstantiateCoSimulation instanceName cannot be empty", nil)

		elseif instantiationToken <> instanceEnvironment.xmlModel.instantiationToken
		then logInst(instanceEnvironment, instanceName,
				"fmi3fmi3InstantiateCoSimulation instantiationToken does not match XML configuration", nil)

		elseif instanceEnvironment.xmlModel.coSimulation = nil
		then logInst(instanceEnvironment, instanceName,
				"fmi3fmi3InstantiateCoSimulation must define BasicCoSimulation XML configuration", nil)

		elseif len requiredIntermediateVariables <> nRequiredIntermediateVariables
		then logInst(instanceEnvironment, instanceName,
				"fmi3fmi3InstantiateCoSimulation requiredIntermediateVariables length mismatch", nil)

		elseif nRequiredIntermediateVariables > 0 and intermediateUpdate = nil
		then logInst(instanceEnvironment, instanceName,
				"fmi3fmi3InstantiateCoSimulation must provide intermediateUpdate", nil)

		elseif exists vr in seq requiredIntermediateVariables &
			 let v = lookup(instanceEnvironment.xmlModel.modelVariables, vr) in
			 	v = nil or not v.intermediateUpdate
		then logInst(instanceEnvironment, instanceName,
				"fmi3fmi3InstantiateCoSimulation variables are not all intermediateUpdate", nil)

		else
			let coSimConfig = mk_fmi3CoSimulationConfiguration(
				eventModeRequired,
				requiredIntermediateVariables,
				<fmi3ModeBasicCoSimulation>,
				intermediateUpdate,
				nil,
				nil)
			in
				let instance = fmi3Instantiate_Impl(STATES_fmi3InstantiateCoSimulation, instanceName,
					instantiationToken, <CoSimulation>, coSimConfig, instanceEnvironment, logMessage) in
				let mk_(-, result) = fmi3SetDebugLogging(instance, loggingOn, 0, []) in
					result;

	/**
	 * The fmi3InstantiateScheduledExecution API. This performs sufficient checks to pass the precondition on the
	 * implementation function, returning nil if any checks fail.
	 */
	fmi3InstantiateScheduledExecution(
		instanceName							: fmi3String,
		instantiationToken						: fmi3String,
		-										: fmi3String,	-- resourceLocation not modelled
		-										: fmi3Boolean,	-- visible not modelled
		loggingOn								: fmi3Boolean,
		requiredIntermediateVariables			: seq of fmi3ValueReference,
		nRequiredIntermediateVariables			: nat,
		instanceEnvironment						: fmi3InstanceEnvironment,
		logMessage								: fmi3CallbackLogMessage,
		intermediateUpdate						: [fmi3CallbackIntermediateUpdate],
		lockPreemption							: fmi3CallbackLockPreemption,
		unlockPreemption						: fmi3CallbackUnlockPreemption) result : [fmi3Instance]
	==
		if mk_(nil, <START>) not in set STATES_fmi3InstantiateScheduledExecution
		then logInst(instanceEnvironment, instanceName,
				"fmi3InstantiateScheduledExecution cannot be called in this state", nil)

		elseif instanceName = ""
		then logInst(instanceEnvironment, instanceName,
				"fmi3InstantiateScheduledExecution instanceName cannot be empty", nil)

		elseif instantiationToken <> instanceEnvironment.xmlModel.instantiationToken
		then logInst(instanceEnvironment, instanceName,
				"fmi3InstantiateScheduledExecution instantiationToken does not match XML configuration", nil)

		elseif instanceEnvironment.xmlModel.scheduledExecution = nil
		then logInst(instanceEnvironment, instanceName,
				"fmi3InstantiateScheduledExecution must define ScheduledExecution XML configuration", nil)

		elseif len requiredIntermediateVariables <> nRequiredIntermediateVariables
		then logInst(instanceEnvironment, instanceName,
				"fmi3InstantiateScheduledExecution requiredIntermediateVariables length mismatch", nil)

		elseif nRequiredIntermediateVariables > 0 and intermediateUpdate = nil
		then logInst(instanceEnvironment, instanceName,
				"fmi3InstantiateScheduledExecution must provide intermediateUpdate", nil)

		elseif exists vr in seq requiredIntermediateVariables &
			 let v = lookup(instanceEnvironment.xmlModel.modelVariables, vr) in
			 	v = nil or not v.intermediateUpdate
		then logInst(instanceEnvironment, instanceName,
				"fmi3InstantiateScheduledExecution variables are not all intermediateUpdate", nil)

		else
			let schExConfig = mk_fmi3CoSimulationConfiguration(
				false,
				requiredIntermediateVariables,
				<fmi3ModeScheduledExecution>,
				intermediateUpdate,
				lockPreemption,
				unlockPreemption)
			in
				let instance = fmi3Instantiate_Impl(STATES_fmi3InstantiateScheduledExecution, instanceName,
					instantiationToken, <ScheduledExecution>, schExConfig, instanceEnvironment, logMessage) in
				let mk_(-, result) = fmi3SetDebugLogging(instance, loggingOn, 0, []) in
					result;


	/**
	 * Helper to log fmi3Instantiate* errors. These cannot use the callback logger because the
	 * fmi3Instance that defines the enabled categories has not yet been created. It implicitly
	 * uses the raw implementation - ie. it is guaranteed to log.
	 */
	logInst: fmi3InstanceEnvironment * fmi3String * fmi3String * ? +> ?
	logInst(ienv, instanceName, message, result) ==
		let - = fmi3Logger_Impl(ienv, instanceName, <fmi3Error>, "logAll", message)
		in result;

	/**
	 * Calculate the initial map of SV values, given their "start" attributes.
	 * Called by fmi3Instantiate and fmi3Reset.
	 */
	getStartValues: map fmi3ValueReference to set of Variable * seq1 of Variable +> map fmi3ValueReference to seq1 of fmi3Value
	getStartValues(aliasVars, eModelVariables) ==
	{
		vref |->
			let sv in set aliasVars(vref) in	-- Choose any alias from the set
				if sv.start <> nil				-- All aliases have the same start
				then
					if is_Binary(sv)
					then [ hex2bin(h) | h in seq sv.start ]
					else sv.start
				else
					let defValue =	-- Set default scalar value for variable type
						if isReal(sv) then 0.0
						else if isInteger(sv) then 0
						else if is_Boolean(sv) then false
						else if is_String(sv) then ""
						else if is_Binary(sv) then []
						else if is_Enumeration(sv) then 0
						else if is_Clock(sv) then false
						else undefined
					in
						[defValue | - in set {1, ..., dimensionProduct(eModelVariables, sv.dimension) }]

		| vref in set dom aliasVars
	};

	/**
	 * Calculate the map of per-element dependencies.
	 */
	getDependencies: seq1 of Variable +> map fmi3ValueReference to seq of ElementDependency
	getDependencies(eModelVariables) ==
	{
		sv.valueReference |->
			let size = dimensionProduct(eModelVariables, sv.dimension) in
				if size = 0		-- we don't know
				then []			-- TODO!
				else [ getOneDependency(sv, i) | i in set {1, ..., size} ]

		| sv in seq eModelVariables
	};
	
	/**
	 * Calculate the per-element dependencies for element i of a compound variable.
	 */
	getOneDependency: Variable * nat1 +> ElementDependency
	getOneDependency(-, i) ==
		mk_ElementDependency(i, 0, 0, <Dependent>);	-- TODO maybe via calculate function?

	/**
	 * Calculate the initial solver values, given the solver configuration data.
	 * Called by fmi3Instantiate and fmi3Reset.
	 */
	getSolverValues: fmi3InstanceEnvironment +> seq of fmi3Float
	getSolverValues(instanceEnvironment) ==
		[ 0.0 | - in seq instanceEnvironment.solverData.derivatives ];

	/**
	 * Calculate the initial event indicator values, given the FMU configuration data.
	 * Called by fmi3Instantiate and fmi3Reset.
	 */
	getEventIndicatorValues: FmiModelDescription +> seq of fmi3Float
	getEventIndicatorValues(xmlModel) ==
		[ 0.0 | - in set {1, ..., len nilSeq[EventIndicator](xmlModel.modelStructure.eventIndicator) } ];

	/**
	 * Get CT state Variables.
	 */
	getContinuousTimeStates: seq1 of Variable -> seq of Variable
	getContinuousTimeStates(eModelVariables) ==
	[
		eModelVariables(i) | i in set inds eModelVariables & isContinuousTimeState(i, eModelVariables)
	];


	/**
	 * Get the alias refmap, from valueReferences to sets of SVs.
	 *
	 * THIS IS LIFTED FROM FMI2 and NEEDS FIXING BECAUSE ALIASES ARE DIFFERENT!!
	 */
	getAliasRefMap: seq1 of Variable -> map fmi3ValueReference to set of Variable
	getAliasRefMap(svs) ==
		let vrefs = { svi |-> svs(svi).valueReference | svi in set inds svs } in
		{
			vrefs(svi) |-> { svs(v) | v in set inds svs & vrefs(v) = vrefs(svi) }
			| svi in set inds svs
		};

	/**
	 * Implementation of fmi3FreeInstance. See API method below.
	 */
	fmi3FreeInstance_Impl: fmi3Instance +> <VOID>
	fmi3FreeInstance_Impl(c) ==
		<VOID>
	pre
		mk_(c.fmuKind, c.fmuState) in set STATES_fmi3FreeInstance;

	/**
	 * The fmi3FreeInstance API. This performs sufficient checks to pass the precondition on the
	 * implementation function, returning <VOID> if any checks fail.
	 */
	fmi3FreeInstance: [fmi3Instance] +> <VOID>
	fmi3FreeInstance(c) ==
		if c <> nil and mk_(c.fmuKind, c.fmuState) not in set STATES_fmi3FreeInstance
		then logAPIError(c, "Cannot call fmi3FreeInstance in this state", <VOID>)

		elseif c = nil
		then <VOID>	-- The function ignores a "null" argument

		else fmi3FreeInstance_Impl(c);


	/**
	 * Implementation of fmi3SetDebugLogging. See API method below.
	 */
	fmi3SetDebugLogging_Impl: fmi3Instance * fmi3Boolean * nat * seq of fmi3String +> fmi3Status * fmi3Instance
	fmi3SetDebugLogging_Impl(c, loggingOn, nCategories, categories) ==
		mk_(<fmi3OK>,
			mu(c, instanceEnvironment |->
				mu(c.instanceEnvironment, logCategories |->
					if loggingOn
					then
						if nCategories = 0	-- Enable everything in XML
						then if c.xmlModel.logCategories <> nil
							then { cat.name | cat in seq c.xmlModel.logCategories }
							else nil
						else elems categories
					else nil)))
	pre
		mk_(c.fmuKind, c.fmuState) in set STATES_fmi3SetDebugLogging
		and nCategories = len categories
		and card elems categories = nCategories
		and (nCategories > 0 =>
			let logcats = c.xmlModel.logCategories in
				logcats <> nil
				and forall cname in seq categories &
					exists lc in seq logcats &
						lc.name = cname)
	post
		RESULT.#2.instanceEnvironment.logCategories =
			if loggingOn
			then if nCategories = 0
				then if c.xmlModel.logCategories <> nil
					then { cat.name | cat in seq c.xmlModel.logCategories }
					else nil
				else elems categories
			else nil;

	/**
	 * The fmi3FreeInstance API. This performs sufficient checks to pass the precondition on the
	 * implementation function, returning <fmi3Error> if any checks fail.
	 */
	fmi3SetDebugLogging: fmi3Instance * fmi3Boolean * nat * seq of fmi3String +> fmi3Status * [fmi3Instance]
	fmi3SetDebugLogging(c, loggingOn, nCategories, categories) ==
		if mk_(c.fmuKind, c.fmuState) not in set STATES_fmi3SetDebugLogging
		then logAPIError(c, "Cannot call fmi3SetDebugLogging in this state", mk_(<fmi3Error>, nil))

		elseif nCategories <> len categories or card elems categories <> nCategories
		then logAPIError(c, "nCategories does not match categories length", mk_(<fmi3Error>, nil))

		else let logcats = c.xmlModel.logCategories in
			if logcats = nil and nCategories > 0
			then logAPIError(c, "No log categories defined in XML configuration", mk_(<fmi3Error>, nil))

			elseif exists cname in seq categories & not exists lc in seq logcats & lc.name = cname
			then logAPIError(c, "Some log categories not found in XML configuration", mk_(<fmi3Error>, nil))

			else fmi3SetDebugLogging_Impl(c, loggingOn, nCategories, categories)
	post
		RESULT.#1 <> <fmi3OK> => RESULT.#2 = nil;
