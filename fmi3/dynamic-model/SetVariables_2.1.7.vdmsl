/**
 * This file is part of the INTO-CPS toolchain.
 *
 * Copyright (c) 2017-2019, INTO-CPS Association,
 * c/o Professor Peter Gorm Larsen, Department of Engineering
 * Finlandsgade 22, 8200 Aarhus N.
 *
 * All rights reserved.
 *
 * THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR
 * THIS INTO-CPS ASSOCIATION PUBLIC LICENSE VERSION 1.0.
 * ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES
 * RECIPIENT'S ACCEPTANCE OF THE OSMC PUBLIC LICENSE OR THE GPL 
 * VERSION 3, ACCORDING TO RECIPIENTS CHOICE.
 *
 * The INTO-CPS toolchain  and the INTO-CPS Association Public License are
 * obtained from the INTO-CPS Association, either from the above address, from
 * the URLs: http://www.into-cps.org, and in the INTO-CPS toolchain distribution.
 * GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without
 * even the implied warranty of  MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH IN THE
 * BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF
 * THE INTO-CPS ASSOCIATION.
 *
 * See the full INTO-CPS Association Public License conditions for more details.
 */

/**
 * 2.1.7 Getting and Setting Variable Values
 */
functions
	/**
	 * The general contracts for calling fmi3SetXXX functions in a given state.
	 */
	generalSetPrecondition: fmi3Instance * seq of fmi3ValueReference +> bool
	generalSetPrecondition(c, vrs) ==
		cases c.fmuKind:
			<ModelExchange> ->
				cases c.fmuState:
					<INSTANTIATED>				-> note4(c, vrs),
					<CONFIGURATION_MODE>		-> note5(c, vrs),
					<INITIALIZATION_MODE>		-> note3(c, vrs),
					<EVENT_MODE>				-> true,
					<CONTINUOUS_TIME_MODE>		-> true,
					<RECONFIGURATION_MODE>		-> note6(c, vrs),
					<TERMINATED>				-> true,
					<ERROR>						-> true,

					others -> undefined
				end,

			<CoSimulation>	->
				cases c.fmuState:
					<INSTANTIATED>				-> note7(c, vrs),
					<CONFIGURATION_MODE>		-> note11(c, vrs),
					<INITIALIZATION_MODE>		-> note8(c, vrs),
					<STEP_MODE>					-> note9(c, vrs),
					<RECONFIGURATION_MODE>		-> note10s(c, vrs),
					<INTERMEDIATE_UPDATE_MODE>	-> true,
					<TERMINATED>				-> true,

					others -> undefined
				end,

			<ScheduledExecution> ->
				cases c.fmuState:
					<INSTANTIATED>				-> true,
					<CONFIGURATION_MODE>		-> true,
					<INITIALIZATION_MODE>		-> true,
					<CLOCK_ACTIVATION_MODE>		-> true,
					<RECONFIGURATION_MODE>		-> note13s(c, vrs),
					<INTERMEDIATE_UPDATE_MODE>	-> note14(c, vrs),
					<TERMINATED>				-> true,

					others -> undefined
				end,

			others -> undefined
		end;

	/**
	 * Return the start/end (incl.) from a list of values for the ith valueReference.
	 * This accounts for multi-dimensional values. So a single valued variable might
	 * return mk_(3, 3) and a 2x2 array might be mk_(1, 4).
	 */
	valueRange: fmi3Instance * seq1 of fmi3ValueReference * nat1 +> nat1 * nat1
	valueRange(c, vrs, i) ==
		let start = sum([ len c.variables(vr) | vr in seq vrs(1, ..., i - 1) ]) in
			mk_(start + 1, start + len c.variables(vrs(i)))
	pre
		i <= len vrs
	post
		RESULT.#1 <= RESULT.#2;


	/**
	 * A general set of API argument checks for fmi3SetXXX. These are not literally used as a VDM
	 * "pre" because the API function must return an <fmi3Error> response.
	 */
	setterArgChecks: fmi3Instance * States * Kind * seq of fmi3ValueReference * nat * seq1 of ? +> bool
	setterArgChecks(c, allowed, kind, vrs, nvr, value) ==
		if mk_(c.fmuKind, c.fmuState) not in set allowed
		then logAPIError(c, "Cannot call set function in this state", false)

		elseif len vrs <> nvr
		then logAPIError(c, "vrs and nvr do not match", false)

		elseif exists vr in seq vrs & lookup(c.eModelVariables, vr) = nil
		then logAPIError(c, "Value references are not all valid", false)

		elseif len value <> totalValues(c, vrs)
		then logAPIError(c, "vrs and value do not match", false)

		elseif not generalSetPrecondition(c, vrs)
		then logAPIError(c, "Set preconditions failed", false)

		else forall vr in seq vrs &
			let sv = lookup(c.eModelVariables, vr) in
				if sv.base.causality = <independent>
				then logAPIError(c, "Cannot set value of independent variable", false)

				elseif sv.base.variability = <constant>
				then logAPIError(c, "Cannot set value of constant variable", false)

				elseif sv.kind <> kind
				then logAPIError(c, "Variables not of the correct kind", false)

				else true;

	setterMinMaxChecks: fmi3Instance * Kind * seq of fmi3ValueReference * seq1 of fmi3Float +> bool
	setterMinMaxChecks(c, kind, vrs, value) ==
		if is_(kind, FloatKind)
		then
			if exists i in set inds vrs &
				let sv = lookup(c.eModelVariables, vrs(i)),
					min = sv.floatAtts.min,
					max = sv.floatAtts.max
				in
					(min <> nil and value(i) < min)	or (max <> nil and value(i) > max)
			then logAPIError(c, "Values not all within min/max for variables", false)
			else true
		elseif is_(kind, IntegerKind)
		then
			if exists i in set inds vrs &
				let sv = lookup(c.eModelVariables, vrs(i)),
					min = sv.intAtts.min,
					max = sv.intAtts.max
				in
					(min <> nil and value(i) < min)	or (max <> nil and value(i) > max)
			then logAPIError(c, "Values not all within min/max for variables", false)
			else true
		else true;

	/**
	 * Preconditions for the fmi3SetXXX_Impl functions. This is the "pre" complement to the above.
	 */
	setterArgPreconditions: fmi3Instance * States * Kind * seq1 of fmi3ValueReference * nat1 * seq1 of ? +> bool
	setterArgPreconditions(c, allowed, kind, vrs, nvr, value) ==
		mk_(c.fmuKind, c.fmuState) in set allowed
		and len vrs = nvr
		and ( forall vr in seq vrs &
			    let sv = lookup(c.eModelVariables, vr) in
				   sv <> nil
				   and sv.base.causality <> <independent>
				   and sv.kind = kind )
		and len value = totalValues(c, vrs)
		and generalSetPrecondition(c, vrs);

	setterMinMaxPreconditions: fmi3Instance * Kind * seq of fmi3ValueReference * seq1 of fmi3Float +> bool
	setterMinMaxPreconditions(c, kind, vrs, value) ==
		forall vr in seq vrs &
			let sv = lookup(c.eModelVariables, vr) in
				sv <> nil
				and sv.base.causality <> <independent>
				and let mk_(min, max) = minMaxKind(kind) in
						forall v in seq value & min <= v and v <= max;

	/**
	 * Implementation and API for fmi3SetFloatXX.
	 */
	fmi3SetFloat_Impl: fmi3Instance * States * FloatKind * seq1 of fmi3ValueReference * nat1 * seq1 of fmi3Float +> fmi3Status * fmi3Instance
	fmi3SetFloat_Impl(c, allowed, kind, vrs, nvr, value) ==
		let updates = merge
		{
			let mk_(first, last) = valueRange(c, vrs, i) in { vrs(i) |-> value(first, ..., last) }
			| i in set inds vrs
		}
		in
			mk_(<fmi3OK>, mu(c,
				variables |-> c.variables ++ updates,
				dirty     |-> true))
	pre
		setterArgPreconditions(c, allowed, kind, vrs, nvr, value)
		and setterMinMaxPreconditions(c, kind, vrs, value);

	fmi3SetFloat: fmi3Instance * States * FloatKind * seq1 of fmi3ValueReference * nat1 * seq1 of fmi3Float +> fmi3Status * [fmi3Instance]
	fmi3SetFloat(c, allowed, kind, vrs, nvr, value) ==
		if setterArgChecks(c, allowed, kind, vrs, nvr, value) and setterMinMaxChecks(c, kind, vrs, value)
		then fmi3SetFloat_Impl(c, allowed, kind, vrs, nvr, value)
		else mk_(<fmi3Error>, nil)
	post
	 	RESULT.#1 = <fmi3OK> <=> RESULT.#2 <> nil;

	fmi3SetFloat64: fmi3Instance * seq1 of fmi3ValueReference * nat1 * seq1 of fmi3Float +> fmi3Status * [fmi3Instance]
	fmi3SetFloat64(c, vrs, nvr, value) ==
		fmi3SetFloat(c, STATES_fmi3SetFloat64, <Float64>, vrs, nvr, value);

	fmi3SetFloat32: fmi3Instance * seq1 of fmi3ValueReference * nat1 * seq1 of fmi3Float +> fmi3Status * [fmi3Instance]
	fmi3SetFloat32(c, vrs, nvr, value) ==
		fmi3SetFloat(c, STATES_fmi3SetFloat32, <Float32>, vrs, nvr, value);


	/**
	 * Implementation and API for fmi3Set(U)IntXX.
	 */
	fmi3SetInteger_Impl: fmi3Instance * States * IntegerKind * seq of fmi3ValueReference * nat1 * seq1 of fmi3Integer +> fmi3Status * fmi3Instance
	fmi3SetInteger_Impl(c, allowed, kind, vrs, nvr, value) ==
		let updates = merge
		{
			let mk_(first, last) = valueRange(c, vrs, i) in { vrs(i) |-> value(first, ..., last) }
			| i in set inds vrs
		}
		in
			mk_(<fmi3OK>, mu(c,
				variables |-> c.variables ++ updates,
				dirty     |-> true))
	pre
		setterArgPreconditions(c, allowed, kind, vrs, nvr, value)
		and setterMinMaxPreconditions(c, kind, vrs, value);

	fmi3SetInteger: fmi3Instance * States * IntegerKind * seq of fmi3ValueReference * nat1 * seq1 of fmi3Integer +> fmi3Status * [fmi3Instance]
	fmi3SetInteger(c, allowed, kind, vrs, nvr, value) ==
		if setterArgChecks(c, allowed, kind, vrs, nvr, value) and setterMinMaxChecks(c, kind, vrs, value)
		then fmi3SetInteger_Impl(c, allowed, kind, vrs, nvr, value)
		else mk_(<fmi3Error>, nil)
	post
	 	RESULT.#1 = <fmi3OK> <=> RESULT.#2 <> nil;

	fmi3SetInt64: fmi3Instance * seq of fmi3ValueReference * nat1 * seq1 of fmi3Integer +> fmi3Status * [fmi3Instance]
	fmi3SetInt64(c, vrs, nvr, value) ==
		fmi3SetInteger(c, STATES_fmi3SetInt64, <Int64>, vrs, nvr, value);

	fmi3SetInt32: fmi3Instance * seq of fmi3ValueReference * nat1 * seq1 of fmi3Integer +> fmi3Status * [fmi3Instance]
	fmi3SetInt32(c, vrs, nvr, value) ==
		fmi3SetInteger(c, STATES_fmi3SetInt32, <Int32>, vrs, nvr, value);

	fmi3SetInt16: fmi3Instance * seq of fmi3ValueReference * nat1 * seq1 of fmi3Integer +> fmi3Status * [fmi3Instance]
	fmi3SetInt16(c, vrs, nvr, value) ==
		fmi3SetInteger(c, STATES_fmi3SetInt16, <Int16>, vrs, nvr, value);

	fmi3SetInt8: fmi3Instance * seq of fmi3ValueReference * nat1 * seq1 of fmi3Integer +> fmi3Status * [fmi3Instance]
	fmi3SetInt8(c, vrs, nvr, value) ==
		fmi3SetInteger(c, STATES_fmi3SetInt8, <Int8>, vrs, nvr, value);

	fmi3SetUInt64: fmi3Instance * seq of fmi3ValueReference * nat1 * seq1 of fmi3Integer +> fmi3Status * [fmi3Instance]
	fmi3SetUInt64(c, vrs, nvr, value) ==
		fmi3SetInteger(c, STATES_fmi3SetUInt64, <UInt64>, vrs, nvr, value);

	fmi3SetUInt32: fmi3Instance * seq of fmi3ValueReference * nat1 * seq1 of fmi3Integer +> fmi3Status * [fmi3Instance]
	fmi3SetUInt32(c, vrs, nvr, value) ==
		fmi3SetInteger(c, STATES_fmi3SetUInt32, <UInt32>, vrs, nvr, value);

	fmi3SetUInt16: fmi3Instance * seq of fmi3ValueReference * nat1 * seq1 of fmi3Integer +> fmi3Status * [fmi3Instance]
	fmi3SetUInt16(c, vrs, nvr, value) ==
		fmi3SetInteger(c, STATES_fmi3SetUInt16, <UInt16>, vrs, nvr, value);

	fmi3SetUInt8: fmi3Instance * seq of fmi3ValueReference * nat1 * seq1 of fmi3Integer +> fmi3Status * [fmi3Instance]
	fmi3SetUInt8(c, vrs, nvr, value) ==
		fmi3SetInteger(c, STATES_fmi3SetUInt8, <UInt8>, vrs, nvr, value);

	/**
	 * Implementation and API for fmi3SetBoolean.
	 */
	fmi3SetBoolean_Impl: fmi3Instance * States * seq of fmi3ValueReference * nat1 * seq1 of fmi3Boolean +> fmi3Status * fmi3Instance
	fmi3SetBoolean_Impl(c, allowed, vrs, nvr, value) ==
		let updates = merge
		{
			let mk_(first, last) = valueRange(c, vrs, i) in { vrs(i) |-> value(first, ..., last) }
			| i in set inds vrs
		}
		in
			mk_(<fmi3OK>, mu(c,
				variables |-> c.variables ++ updates,
				dirty     |-> true))
	pre
		setterArgPreconditions(c, allowed, <BooleanKind>, vrs, nvr, value);

	fmi3SetBoolean: fmi3Instance * seq of fmi3ValueReference * nat1 * seq1 of fmi3Boolean +> fmi3Status * [fmi3Instance]
	fmi3SetBoolean(c, vrs, nvr, value) ==
		if setterArgChecks(c, STATES_fmi3SetBoolean, <BooleanKind>, vrs, nvr, value)
		then fmi3SetBoolean_Impl(c, STATES_fmi3SetBoolean, vrs, nvr, value)
		else mk_(<fmi3Error>, nil)
	post
	 	RESULT.#1 = <fmi3OK> <=> RESULT.#2 <> nil;


	/**
	 * Implementation and API for fmi3SetString.
	 */
	fmi3SetString_Impl: fmi3Instance * States * seq of fmi3ValueReference * nat1 * seq1 of fmi3String +> fmi3Status * fmi3Instance
	fmi3SetString_Impl(c, allowed, vrs, nvr, value) ==
		let updates = merge
		{
			let mk_(first, last) = valueRange(c, vrs, i) in { vrs(i) |-> value(first, ..., last) }
			| i in set inds vrs
		}
		in
			mk_(<fmi3OK>, mu(c,
				variables |-> c.variables ++ updates,
				dirty     |-> true))
	pre
		setterArgPreconditions(c, allowed, <StringKind>, vrs, nvr, value);

	fmi3SetString: fmi3Instance * seq of fmi3ValueReference * nat1 * seq1 of fmi3String +> fmi3Status * [fmi3Instance]
	fmi3SetString(c, vrs, nvr, value) ==
		if setterArgChecks(c, STATES_fmi3SetString, <StringKind>, vrs, nvr, value)
		then fmi3SetString_Impl(c, STATES_fmi3SetString, vrs, nvr, value)
		else mk_(<fmi3Error>, nil)
	post
	 	RESULT.#1 = <fmi3OK> <=> RESULT.#2 <> nil;

	/**
	 * Implementation and API for fmi3SetBinary.
	 */
	fmi3SetBinary_Impl: fmi3Instance * States * seq of fmi3ValueReference * nat1 * seq1 of fmi3Binary +> fmi3Status * fmi3Instance
	fmi3SetBinary_Impl(c, allowed, vrs, nvr, value) ==
		let updates = merge
		{
			let mk_(first, last) = valueRange(c, vrs, i) in { vrs(i) |-> value(first, ..., last) }
			| i in set inds vrs
		}
		in
			mk_(<fmi3OK>, mu(c,
				variables |-> c.variables ++ updates,
				dirty     |-> true))
	pre
		setterArgPreconditions(c, allowed, <BinaryKind>, vrs, nvr, value);

	fmi3SetBinary: fmi3Instance * seq of fmi3ValueReference * nat1 * seq1 of fmi3Binary +> fmi3Status * [fmi3Instance]
	fmi3SetBinary(c, vrs, nvr, value) ==
		if setterArgChecks(c, STATES_fmi3SetBinary, <BinaryKind>, vrs, nvr, value)
		then fmi3SetBinary_Impl(c, STATES_fmi3SetBinary, vrs, nvr, value)
		else mk_(<fmi3Error>, nil)
	post
	 	RESULT.#1 = <fmi3OK> <=> RESULT.#2 <> nil;
