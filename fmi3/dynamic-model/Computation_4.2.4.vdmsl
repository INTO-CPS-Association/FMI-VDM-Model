/*********************************************************************************
 *
 *	Copyright (c) 2017-2022, INTO-CPS Association,
 *	c/o Professor Peter Gorm Larsen, Department of Engineering
 *	Finlandsgade 22, 8200 Aarhus N.
 *
 *	MIT Licence:
 *
 *	Permission is hereby granted, free of charge, to any person obtaining a copy of
 *	this software and associated documentation files (the "Software"), to deal in
 *	the Software without restriction, including without limitation the rights to use,
 *	copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 *	Software, and to permit persons to whom the Software is furnished to do so,
 *	subject to the following conditions:
 *
 *	The above copyright notice and this permission notice shall be included in all
 *	copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 *	INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 *	PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *	OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 *	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *	SPDX-License-Identifier: MIT
 *
 *********************************************************************************/

/**
 * 4.2.4 Computation in Co-Simulation Interface Types
 * 5.2.2 Computation in Scheduled Execution
 */
functions
	/**
	 * Implementation of fmi3DoStep. See API method below.
	 */
	fmi3DoStep_Impl: fmi3Instance * fmi3Float * fmi3Float * fmi3Boolean +> fmi3Status * [fmi3Boolean] * [fmi3Boolean] * [fmi3Float] * [fmi3Instance]
	fmi3DoStep_Impl(c, currentCommunicationPoint, communicationStepSize, -/*noSetFMUStatePriorToCurrentPoint*/) ==
		let mk_(s, c2) =  c.instanceEnvironment.calculateDoStep(c,  currentCommunicationPoint, communicationStepSize) in
			if s <> <fmi3OK>
			then mk_(s, nil, nil, nil, nil)
			else mk_(s, nil, nil, nil, c2)		-- TODO!
	pre
		mk_(c.fmuKind, c.fmuState) in set STATES_fmi3DoStep
		and communicationStepSize > 0.0
		and currentCommunicationPoint >= 0.0
	post
		RESULT.#1 = <fmi3OK> =>
			epsilon(RESULT.#5.currentTime, currentCommunicationPoint + communicationStepSize);


	/**
	 * The fmi3DoStep API. This performs sufficient checks to pass the precondition on the
	 * implementation function, returning an fmi3Status if any checks fail.
	 */
	fmi3DoStep: fmi3Instance * fmi3Float * fmi3Float * fmi3Boolean +> fmi3Status * [fmi3Boolean] * [fmi3Boolean] * [fmi3Float] * [fmi3Instance]
	fmi3DoStep(c, currentCommunicationPoint, communicationStepSize, noSetFMUStatePriorToCurrentPoint) ==
		if mk_(c.fmuKind, c.fmuState) not in set STATES_fmi3DoStep
		then logAPIError(c, "Cannot call fmi3DoStep in this state",	mk_(<fmi3Error>, nil, nil, nil, nil))

		elseif communicationStepSize <= 0.0
		then logAPIError(c, "Communication step size must be >0", mk_(<fmi3Error>, nil, nil, nil, nil))

		elseif currentCommunicationPoint < 0.0
		then logAPIError(c, "Curret communication point must be >=0", mk_(<fmi3Error>, nil, nil, nil, nil))

		else fmi3DoStep_Impl(c, currentCommunicationPoint, communicationStepSize, noSetFMUStatePriorToCurrentPoint)
	 post
	 	RESULT.#1 <> <fmi3OK> <=> RESULT.#2 = nil;

	/**
	 * Implementation of fmi3ActivateModelPartition. See API method below.
	 */
	fmi3ActivateModelPartition_Impl(
		c					: fmi3Instance,
		clockReference		: fmi3ValueReference,
		clockElementIndex	: nat1,
		activationTime		: fmi3Float) result : fmi3Status
	==
		is not yet specified;

	fmi3ActivateModelPartition(
		c					: fmi3Instance,
		clockReference		: fmi3ValueReference,
		clockElementIndex	: nat1,
		activationTime		: fmi3Float) result : fmi3Status
	==
		if mk_(c.fmuKind, c.fmuState) not in set STATES_fmi3ActivateModelPartition
		then logAPIError(c, "Cannot call fmi3ActivateModelPartition in this state",	<fmi3Error>)

		else let clock = lookup(c.eModelVariables, clockReference) in
			if clock = nil
			then logAPIError(c, "ValueReference not found", <fmi3Error>)

			elseif not is_(clock, Clock)
			then logAPIError(c, "ValueReference is not a clock", <fmi3Error>)

			else fmi3ActivateModelPartition_Impl(c, clockReference, clockElementIndex, activationTime);

