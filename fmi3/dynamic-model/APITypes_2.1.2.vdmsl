/*********************************************************************************
 *
 *	Copyright (c) 2017-2022, INTO-CPS Association,
 *	c/o Professor Peter Gorm Larsen, Department of Engineering
 *	Finlandsgade 22, 8200 Aarhus N.
 *
 *	MIT Licence:
 *
 *	Permission is hereby granted, free of charge, to any person obtaining a copy of
 *	this software and associated documentation files (the "Software"), to deal in
 *	the Software without restriction, including without limitation the rights to use,
 *	copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 *	Software, and to permit persons to whom the Software is furnished to do so,
 *	subject to the following conditions:
 *
 *	The above copyright notice and this permission notice shall be included in all
 *	copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 *	INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 *	PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *	OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 *	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *	SPDX-License-Identifier: MIT
 *
 *********************************************************************************/

/**
 * 2.1.2 Platform Dependent Definitions
 * 2.1.3 Status Returned by Functions
 */
types
	-- Raw types for data
	fmi3Float			= real;
	fmi3Integer			= int;			-- Enumerations are also Integers
	fmi3Boolean			= bool;
	fmi3Char			= char;
	fmi3String			= seq of fmi3Char;
	fmi3Clock			= int;
	fmi3Binary			= seq of fmi3Byte;
	fmi3Byte			= nat inv b == b < 256;

	-- Possible values for a Variable
	fmi3Value			= fmi3Float | fmi3Integer | fmi3Boolean | fmi3String | fmi3Clock | fmi3Binary;

	fmi3Status =
		<fmi3OK> |
		<fmi3Warning> |
		<fmi3Discard> |
		<fmi3Error> |
		<fmi3Fatal>;

	-- States for the various state machines

	fmi3ModelExchangeState =
		<INSTANTIATED> |
		<CONFIGURATION_MODE> |
		<INITIALIZATION_MODE> |
		<EVENT_MODE> |
		<CONTINUOUS_TIME_MODE> |
		<RECONFIGURATION_MODE> |
		<TERMINATED>;

	fmi3BasicCoSimulationState =
		<INSTANTIATED> |
		<CONFIGURATION_MODE> |
		<INITIALIZATION_MODE> |
		<STEP_MODE> |
		<RECONFIGURATION_MODE> |
		<INTERMEDIATE_UPDATE_MODE> |
		<TERMINATED>;

	fmi3ScheduledExecutionState =
		<INSTANTIATED> |
		<CONFIGURATION_MODE> |
		<INITIALIZATION_MODE> |
		<CLOCK_ACTIVATION_MODE> |
		<RECONFIGURATION_MODE> |
		<INTERMEDIATE_UPDATE_MODE> |
		<TERMINATED>;

	-- The collection of all states, for convenience
	fmi3State =
		<START> |
		fmi3ModelExchangeState |
		fmi3BasicCoSimulationState |
		fmi3ScheduledExecutionState |
		<ERROR> |
		<FATAL> |
		<END>;

	fmi3EventInfo ::
		nextEventTime						: [fmi3Float]
		newDiscreteStatesNeeded				: fmi3Boolean
		terminateSimulation					: fmi3Boolean
		nominalsOfContinuousStatesChanged	: fmi3Boolean
		valuesOfContinuousStatesChanged		: fmi3Boolean
		nextEventTimeDefined				: fmi3Boolean
	inv
		info == info.nextEventTimeDefined <=> info.nextEventTime <> nil;


	fmi3FMUKind = <CoSimulation> | <ModelExchange> | <ScheduledExecution>;

	fmi3CoSimulationMode =
	    <fmi3ModeBasicCoSimulation> |
	    <fmi3ModeScheduledExecution>;

	fmi3CoSimulationConfiguration ::
		eventModeRequired						: fmi3Boolean
		requiredIntermediateVariables			: seq of fmi3ValueReference
	    coSimulationMode						: fmi3CoSimulationMode
		intermediateUpdate						: [fmi3CallbackIntermediateUpdate]
		lockPreemption							: [fmi3CallbackLockPreemption]
		unlockPreemption						: [fmi3CallbackUnlockPreemption]
	inv
		conf ==
			( conf.requiredIntermediateVariables <> [] => conf.intermediateUpdate <> nil )
			and
			( conf.lockPreemption <> nil <=> conf.unlockPreemption <> nil );

	fmi3CallbackLogMessage =
		fmi3InstanceEnvironment *	-- instanceEnvironment
		fmi3String *					-- instanceName
		fmi3Status *					-- status
		fmi3String *					-- category
		fmi3String					-- message
		-> <VOID>;

	fmi3CallbackIntermediateUpdate =
		fmi3InstanceEnvironment *	-- instanceEnvironment,
		fmi3Float *					-- intermediateUpdateTime,
		fmi3Boolean *				-- eventOccurred,
		fmi3Boolean * 				-- clocksTicked,
		fmi3Boolean *				-- intermediateVariableSetAllowed,
		fmi3Boolean *				-- intermediateVariableGetAllowed,
		fmi3Boolean *				-- intermediateStepFinished,
		fmi3Boolean					-- canReturnEarly
		-> fmi3Status;

    fmi3CallbackLockPreemption		= () -> <VOID>;
    fmi3CallbackUnlockPreemption	= () -> <VOID>;

	fmi3DependencyKind =			-- See fmi3GetVariableDependencies
		<Constant>	|	-- = 1,
    	<Fixed>		|	-- = 2,
    	<Tunable>	|	-- = 3,
    	<Discrete>	|	-- = 4,
    	<Dependent>;	-- = 5

values
	fmi3True			: fmi3Boolean = true;
	fmi3False			: fmi3Boolean = false;

	fmi3ClockActive		: fmi3Clock	= 1;	-- See parameters of fmi3GetClock and fmi3SetClock
	fmi3ClockInactive	: fmi3Clock	= 0;
