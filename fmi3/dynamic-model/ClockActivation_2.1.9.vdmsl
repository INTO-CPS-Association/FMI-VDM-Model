/*********************************************************************************
 *
 *	Copyright (c) 2017-2022, INTO-CPS Association,
 *	c/o Professor Peter Gorm Larsen, Department of Engineering
 *	Finlandsgade 22, 8200 Aarhus N.
 *
 *	MIT Licence:
 *
 *	Permission is hereby granted, free of charge, to any person obtaining a copy of
 *	this software and associated documentation files (the "Software"), to deal in
 *	the Software without restriction, including without limitation the rights to use,
 *	copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 *	Software, and to permit persons to whom the Software is furnished to do so,
 *	subject to the following conditions:
 *
 *	The above copyright notice and this permission notice shall be included in all
 *	copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 *	INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 *	PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *	OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 *	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *	SPDX-License-Identifier: MIT
 *
 *********************************************************************************/

/**
 * 2.1.9 FMI Application Programming Interface for Setting/Getting Clock Activation State
 */
functions

	/**
	 * Implementation and API for fmi3GetClock.
	 */
	fmi3GetClock_Impl: fmi3Instance * States * seq of fmi3ValueReference * nat * nat +> fmi3Status * [seq of fmi3Clock]
	fmi3GetClock_Impl(c, allowed, vrs, nvr, nval) ==
		let mk_(s, c2) = /* if c.dirty then c.calculateValues(c) else */ mk_(<fmi3OK>, c) in
			if s <> <fmi3OK>
			then mk_(s, nil)
			else mk_(<fmi3OK>, conc [ c2.variables(vr) | vr in seq vrs ])
	pre
		getterPreconditions(c, allowed, <Clock>, vrs, nvr, nval)
	post
		RESULT.#1 = <fmi3OK> => len RESULT.#2 = nval;

	fmi3GetClock: fmi3Instance * seq of fmi3ValueReference * nat * nat +> fmi3Status * [seq of fmi3Clock]
	fmi3GetClock(c, vrs, nvr, nval) ==
		if getterArgChecks(c, STATES_fmi3GetClock, <Clock>, vrs, nvr, nval)
		then fmi3GetClock_Impl(c, STATES_fmi3GetClock, vrs, nvr, nval)
		else mk_(<fmi3Error>, nil)
	post
	 	RESULT.#1 = <fmi3OK> <=> RESULT.#2 <> nil;


	/**
	 * Implementation and API for fmi3SetClock.
	 */
	fmi3SetClock_Impl: fmi3Instance * States * seq of fmi3ValueReference * nat1 * seq1 of fmi3Clock +> fmi3Status * fmi3Instance
	fmi3SetClock_Impl(c, allowed, vrs, nvr, value) ==
		let updates = merge
		{
			let mk_(first, last) = valueRange(c, vrs, i) in { vrs(i) |-> value(first, ..., last) }
			| i in set inds vrs
		}
		in
			mk_(<fmi3OK>, mu(c,
				variables |-> c.variables ++ updates,
				dirty     |-> true))
	pre
		setterArgPreconditions(c, allowed, <Clock>, vrs, nvr, value);

	fmi3SetClock: fmi3Instance * seq of fmi3ValueReference * nat1 * seq1 of fmi3Clock +> fmi3Status * [fmi3Instance]
	fmi3SetClock(c, vrs, nvr, value) ==
		if setterArgChecks(c, STATES_fmi3SetClock, <Clock>, vrs, nvr, value)
		then fmi3SetClock_Impl(c, STATES_fmi3SetClock, vrs, nvr, value)
		else mk_(<fmi3Error>, nil)
	post
	 	RESULT.#1 = <fmi3OK> <=> RESULT.#2 <> nil;


	/**
	 * Implementation and API for fmi3GetIntervalDecimal.
	 */
	fmi3GetIntervalDecimal_Impl(
		c					: fmi3Instance,
		valueReferences		: seq1 of fmi3ValueReference,
		nValueReferences	: nat1,
		interval			: seq1 of fmi3Float,
		nValues				: nat1) result : fmi3Status
	==
		is not yet specified	-- TODO
	pre
		nValueReferences = len valueReferences
		and ( forall vr in seq valueReferences &
		    let sv = lookup(c.eModelVariables, vr) in
			  sv <> nil and is_(sv, Clock) )
		and nValues = totalValues(c, valueReferences);

	fmi3GetIntervalDecimal(
		c					: fmi3Instance,
		valueReferences		: seq1 of fmi3ValueReference,
		nValueReferences	: nat1,
		interval			: seq1 of fmi3Float,
		nValues				: nat1) result : fmi3Status
	==
		is not yet specified;	-- TODO


	/**
	 * Implementation and API for fmi3GetIntervalFraction.
	 */
	fmi3GetIntervalFraction_Impl(
		c					: fmi3Instance,
		valueReferences		: seq1 of fmi3ValueReference,
		nValueReferences	: nat1,
		intervalCounter		: seq1 of fmi3Integer,
		resolution			: seq1 of fmi3Integer,
		nValues				: nat1) result : fmi3Status
	==
		is not yet specified	-- TODO
	pre
		nValues = len intervalCounter
		and nValues = len resolution
		and (forall i in seq intervalCounter & i >= 0)
		and (forall r in seq resolution & r >= 0)
		and (forall vr in seq valueReferences &
		    let sv = lookup(c.eModelVariables, vr) in
			  sv <> nil and is_(sv, Clock) )
		and nValues = totalValues(c, valueReferences);

	fmi3GetIntervalFraction(
		c					: fmi3Instance,
		valueReferences		: seq1 of fmi3ValueReference,
		nValueReferences	: nat1,
		intervalCounter		: seq1 of fmi3Integer,
		resolution			: seq1 of fmi3Integer,
		nValues				: nat1) result : fmi3Status
	==
		is not yet specified;	-- TODO


	/**
	 * Implementation and API for fmi3SetIntervalDecimal.
	 */
	fmi3SetIntervalDecimal_Impl(
	 	c					: fmi3Instance,
		valueReferences		: seq1 of fmi3ValueReference,
		nValueReferences	: nat1,
		interval			: seq1 of fmi3Float,
		nValues				: nat1) result : fmi3Status
	==
		is not yet specified	-- TODO
	pre
		(forall vr in seq valueReferences &
		    let sv = lookup(c.eModelVariables, vr) in
			  sv <> nil and is_(sv, Clock) )
		and nValues = totalValues(c, valueReferences);

	fmi3SetIntervalDecimal(
	 	c					: fmi3Instance,
		valueReferences		: seq1 of fmi3ValueReference,
		nValueReferences	: nat1,
		interval			: seq1 of fmi3Float,
		nValues				: nat1) result : fmi3Status
	==
		is not yet specified;	-- TODO


	/**
	 * Implementation and API for fmi3SetIntervalFraction.
	 */
	fmi3SetIntervalFraction_Impl(
		c					: fmi3Instance,
		valueReferences		: seq1 of fmi3ValueReference,
		nValueReferences	: nat1,
		intervalCounter		: seq1 of fmi3Integer,
		resolution			: seq1 of fmi3Integer,
		nValues				: nat1) result : fmi3Status
	==
		is not yet specified	-- TODO
	pre
		nValues = len intervalCounter
		and nValues = len resolution
		and (forall i in seq intervalCounter & i >= 0)
		and (forall r in seq resolution & r >= 0)
		and (forall vr in seq valueReferences &
		    let sv = lookup(c.eModelVariables, vr) in
			  sv <> nil and is_(sv, Clock) )
		and nValues = totalValues(c, valueReferences);

	fmi3SetIntervalFraction(
		c					: fmi3Instance,
		valueReferences		: seq1 of fmi3ValueReference,
		nValueReferences	: nat1,
		intervalCounter		: seq1 of fmi3Integer,
		resolution			: seq1 of fmi3Integer,
		nValues				: nat1) result : fmi3Status
	==
		is not yet specified;	-- TODO
