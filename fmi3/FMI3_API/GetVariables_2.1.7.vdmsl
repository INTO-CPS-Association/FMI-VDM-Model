/**
 * This file is part of the INTO-CPS toolchain.
 *
 * Copyright (c) 2017-2019, INTO-CPS Association,
 * c/o Professor Peter Gorm Larsen, Department of Engineering
 * Finlandsgade 22, 8200 Aarhus N.
 *
 * All rights reserved.
 *
 * THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR
 * THIS INTO-CPS ASSOCIATION PUBLIC LICENSE VERSION 1.0.
 * ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES
 * RECIPIENT'S ACCEPTANCE OF THE OSMC PUBLIC LICENSE OR THE GPL 
 * VERSION 3, ACCORDING TO RECIPIENTS CHOICE.
 *
 * The INTO-CPS toolchain  and the INTO-CPS Association Public License are
 * obtained from the INTO-CPS Association, either from the above address, from
 * the URLs: http://www.into-cps.org, and in the INTO-CPS toolchain distribution.
 * GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without
 * even the implied warranty of  MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH IN THE
 * BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF
 * THE INTO-CPS ASSOCIATION.
 *
 * See the full INTO-CPS Association Public License conditions for more details.
 */

/**
 * 2.1.7 Getting and Setting Variable Values
 */
functions
	/**
	 * The general contracts for calling fmi3GetXXX functions in a given state.
	 */
	generalGetPrecondition: fmi3Instance * seq of fmi3ValueReference +> bool
	generalGetPrecondition(c, vrs) ==
		cases c.fmuKind:
			<ModelExchange> ->
				cases c.fmuState:
					<INSTANTIATED>				-> false,
					<CONFIGURATION_MODE>		-> false,
					<INITIALIZATION_MODE>		-> note1(c, vrs),
					<EVENT_MODE>				-> true,
					<CONTINUOUS_TIME_MODE>		-> note2(c, vrs),
					<RECONFIGURATION_MODE>		-> false,
					<TERMINATED>				-> true,
					<ERROR>						-> true,

					others -> undefined
				end,

			<CoSimulation>	->
				cases c.fmuState:
					<INSTANTIATED>				-> true,
					<CONFIGURATION_MODE>		-> true,
					<INITIALIZATION_MODE>		-> note12(c, vrs),
					<STEP_MODE>					-> true,
					<RECONFIGURATION_MODE>		-> false,
					<INTERMEDIATE_UPDATE_MODE>	-> note10g(c, vrs),
					<TERMINATED>				-> true,

					others -> undefined
				end,

			<ScheduledExecution> ->
				cases c.fmuState:
					<INSTANTIATED>				-> true,
					<CONFIGURATION_MODE>		-> true,
					<INITIALIZATION_MODE>		-> true,
					<CLOCK_ACTIVATION_MODE>		-> true,
					<RECONFIGURATION_MODE>		-> false,
					<INTERMEDIATE_UPDATE_MODE>	-> note13g(c, vrs),
					<TERMINATED>				-> true,

					others -> undefined
				end,

			others -> undefined
		end;

	/**
	 * Calculate the total number of values (possibly array cells) for a sequence of vrefs
	 */
	totalValues: fmi3Instance * seq1 of fmi3ValueReference +> nat
	totalValues(c, vrs) ==
		sum([ len c.variables(vr) | vr in seq vrs ]);

	/**
	 * A general set of API argument checks for fmi3GetXXX. These are not literally used as a VDM
	 * "pre" because the API function must return an <fmi3Error> response.
	 */
	getterArgChecks: fmi3Instance * States * Kind * seq of fmi3ValueReference * nat * nat +> bool
	getterArgChecks(c, allowed, kind, vrs, nvr, nval) ==
		if mk_(c.fmuKind, c.fmuState) not in set allowed
		then logAPIError(c, "Cannot call get function in this state", false)

		elseif len vrs <> nvr
		then logAPIError(c, "vrs and nvr do not match", false)

		elseif exists vr in seq vrs &
			let sv = lookup(c.eModelVariables, vr) in sv = nil or sv.kind <> kind
		then logAPIError(c, "Value references are not all defined for kind", false)

		elseif not generalGetPrecondition(c, vrs)
		then logAPIError(c, "Get preconditions failed", false)

		elseif nval <> totalValues(c, vrs)
		then logAPIError(c, "nValues does not match total valueReference dimensions", false)

		else true;

	/**
	 * Preconditions for the fmi3GetXXX_Impl functions. This is the "pre" complement to the above.
	 */
	getterPreconditions: fmi3Instance * States * Kind * seq of fmi3ValueReference * nat * nat +> bool
	getterPreconditions(c, allowed, kind, vrs, nvr, nval) ==
		mk_(c.fmuKind, c.fmuState) in set allowed
		and len vrs = nvr
		and ( forall vr in seq vrs &
			    let sv = lookup(c.eModelVariables, vr) in
				  sv <> nil and sv.kind = kind )
		and generalGetPrecondition(c, vrs)
		and nval = totalValues(c, vrs);


	/**
	 * Implementation and API for fmi3GetFloatXX.
	 */
	fmi3GetReal_Impl: fmi3Instance * States * FloatKind * seq of fmi3ValueReference * nat * nat +> fmi3Status * [seq of fmi3Float]
	fmi3GetReal_Impl(c, allowed, kind, vrs, nvr, nval) ==
		let mk_(s, c2) = if c.dirty then c.instanceEnvironment.calculateValues(c) else mk_(<fmi3OK>, c) in
			if s <> <fmi3OK>
			then mk_(s, nil)
			else mk_(<fmi3OK>, conc [ c2.variables(vr) | vr in seq vrs ])
	pre
		getterPreconditions(c, allowed, kind, vrs, nvr, nval)
	post
		RESULT.#1 = <fmi3OK> => len RESULT.#2 = nval
			and let mk_(min, max) = minMaxKind(kind) in
				forall v in seq RESULT.#2 & min <= v and v <= max;

	fmi3GetReal: fmi3Instance * States * FloatKind * seq of fmi3ValueReference * nat * nat +> fmi3Status * [seq of fmi3Float]
	fmi3GetReal(c, allowed, kind, vrs, nvr, nval) ==
		if getterArgChecks(c, allowed, kind, vrs, nvr, nval)
		then fmi3GetReal_Impl(c, allowed, kind, vrs, nvr, nval)
		else mk_(<fmi3Error>, nil)
	post
	 	RESULT.#1 = <fmi3OK> <=> RESULT.#2 <> nil;

	fmi3GetFloat64: fmi3Instance * seq of fmi3ValueReference * nat * nat +> fmi3Status * [seq of fmi3Float]
	fmi3GetFloat64(c, vrs, nvr, nval) ==
		fmi3GetReal(c, STATES_fmi3GetFloat64, <Float64>, vrs, nvr, nval);

	fmi3GetFloat32: fmi3Instance * seq of fmi3ValueReference * nat * nat +> fmi3Status * [seq of fmi3Float]
	fmi3GetFloat32(c, vrs, nvr, nval) ==
		fmi3GetReal(c, STATES_fmi3GetFloat32, <Float32>, vrs, nvr, nval);


	/**
	 * Implementation and API for fmi3Get(U)IntXX.
	 */
	fmi3GetInteger_Impl: fmi3Instance * States * IntegerKind * seq of fmi3ValueReference * nat * nat +> fmi3Status * [seq of fmi3Integer]
	fmi3GetInteger_Impl(c, allowed, kind, vrs, nvr, nval) ==
		let mk_(s, c2) = if c.dirty then c.instanceEnvironment.calculateValues(c) else mk_(<fmi3OK>, c) in
			if s <> <fmi3OK>
			then mk_(s, nil)
			else mk_(<fmi3OK>, conc [ c2.variables(vr) | vr in seq vrs ])
	pre
		getterPreconditions(c, allowed, kind, vrs, nvr, nval)
	post
		RESULT.#1 = <fmi3OK> => len RESULT.#2 = nval
	 		and let mk_(min, max) = minMaxKind(kind) in
				forall v in seq RESULT.#2 & min <= v and v <= max;

	fmi3GetInteger: fmi3Instance * States * IntegerKind * seq of fmi3ValueReference * nat * nat +> fmi3Status * [seq of fmi3Integer]
	fmi3GetInteger(c, allowed, kind, vrs, nvr, nval) ==
		if getterArgChecks(c, allowed, kind, vrs, nvr, nval)
		then fmi3GetInteger_Impl(c, allowed, kind, vrs, nvr, nval)
		else mk_(<fmi3Error>, nil)
	post
	 	RESULT.#1 = <fmi3OK> <=> RESULT.#2 <> nil;

	fmi3GetInt64: fmi3Instance * seq of fmi3ValueReference * nat * nat +> fmi3Status * [seq of fmi3Integer]
	fmi3GetInt64(c, vrs, nvr, nval) ==
		fmi3GetInteger(c, STATES_fmi3GetInt64, <Int64>, vrs, nvr, nval);

	fmi3GetInt32: fmi3Instance * seq of fmi3ValueReference * nat * nat +> fmi3Status * [seq of fmi3Integer]
	fmi3GetInt32(c, vrs, nvr, nval) ==
		fmi3GetInteger(c, STATES_fmi3GetInt32, <Int32>, vrs, nvr, nval);

	fmi3GetInt16: fmi3Instance * seq of fmi3ValueReference * nat * nat +> fmi3Status * [seq of fmi3Integer]
	fmi3GetInt16(c, vrs, nvr, nval) ==
		fmi3GetInteger(c, STATES_fmi3GetInt16, <Int16>, vrs, nvr, nval);

	fmi3GetInt8: fmi3Instance * seq of fmi3ValueReference * nat * nat +> fmi3Status * [seq of fmi3Integer]
	fmi3GetInt8(c, vrs, nvr, nval) ==
		fmi3GetInteger(c, STATES_fmi3GetInt8, <Int8>, vrs, nvr, nval);

	fmi3GetUInt64: fmi3Instance * seq of fmi3ValueReference * nat * nat +> fmi3Status * [seq of fmi3Integer]
	fmi3GetUInt64(c, vrs, nvr, nval) ==
		fmi3GetInteger(c, STATES_fmi3GetUInt64, <UInt64>, vrs, nvr, nval);

	fmi3GetUInt32: fmi3Instance * seq of fmi3ValueReference * nat * nat +> fmi3Status * [seq of fmi3Integer]
	fmi3GetUInt32(c, vrs, nvr, nval) ==
		fmi3GetInteger(c, STATES_fmi3GetUInt32, <UInt32>, vrs, nvr, nval);

	fmi3GetUInt16: fmi3Instance * seq of fmi3ValueReference * nat * nat +> fmi3Status * [seq of fmi3Integer]
	fmi3GetUInt16(c, vrs, nvr, nval) ==
		fmi3GetInteger(c, STATES_fmi3GetUInt16, <UInt16>, vrs, nvr, nval);

	fmi3GetUInt8: fmi3Instance * seq of fmi3ValueReference * nat * nat +> fmi3Status * [seq of fmi3Integer]
	fmi3GetUInt8(c, vrs, nvr, nval) ==
		fmi3GetInteger(c, STATES_fmi3GetUInt8, <UInt8>, vrs, nvr, nval);

	/**
	 * Implementation and API for fmi3GetBoolean.
	 */
	fmi3GetBoolean_Impl: fmi3Instance * States * seq of fmi3ValueReference * nat * nat +> fmi3Status * [seq of fmi3Boolean]
	fmi3GetBoolean_Impl(c, allowed, vrs, nvr, nval) ==
		let mk_(s, c2) = if c.dirty then c.instanceEnvironment.calculateValues(c) else mk_(<fmi3OK>, c) in
			if s <> <fmi3OK>
			then mk_(s, nil)
			else mk_(<fmi3OK>, conc [ c2.variables(vr) | vr in seq vrs ])
	pre
		getterPreconditions(c, allowed, <BooleanKind>, vrs, nvr, nval)
	post
		RESULT.#1 = <fmi3OK> => len RESULT.#2 = nval;

	fmi3GetBoolean: fmi3Instance * seq of fmi3ValueReference * nat * nat +> fmi3Status * [seq of fmi3Boolean]
	fmi3GetBoolean(c, vrs, nvr, nval) ==
		if getterArgChecks(c, STATES_fmi3GetBoolean, <BooleanKind>, vrs, nvr, nval)
		then fmi3GetBoolean_Impl(c, STATES_fmi3GetBoolean, vrs, nvr, nval)
		else mk_(<fmi3Error>, nil)
	post
	 	RESULT.#1 = <fmi3OK> <=> RESULT.#2 <> nil;


	/**
	 * Implementation and API for fmi3GetString.
	 */
	fmi3GetString_Impl: fmi3Instance * States * seq of fmi3ValueReference * nat * nat +> fmi3Status * [seq of fmi3String]
	fmi3GetString_Impl(c, allowed, vrs, nvr, nval) ==
		let mk_(s, c2) = if c.dirty then c.instanceEnvironment.calculateValues(c) else mk_(<fmi3OK>, c) in
			if s <> <fmi3OK>
			then mk_(s, nil)
			else mk_(<fmi3OK>, conc [ c2.variables(vr) | vr in seq vrs ])
	pre
		getterPreconditions(c, allowed, <StringKind>, vrs, nvr, nval)
	post
		RESULT.#1 = <fmi3OK> => len RESULT.#2 = nval;

	fmi3GetString: fmi3Instance * seq of fmi3ValueReference * nat * nat +> fmi3Status * [seq of fmi3String]
	fmi3GetString(c, vrs, nvr, nval) ==
		if getterArgChecks(c, STATES_fmi3GetString, <StringKind>, vrs, nvr, nval)
		then fmi3GetString_Impl(c, STATES_fmi3GetString, vrs, nvr, nval)
		else mk_(<fmi3Error>, nil)
	post
	 	RESULT.#1 = <fmi3OK> <=> RESULT.#2 <> nil;

	/**
	 * Implementation and API for fmi3GetBinary.
	 */
	fmi3GetBinary_Impl: fmi3Instance * States * seq of fmi3ValueReference * nat * nat +> fmi3Status * [seq of fmi3Binary]
	fmi3GetBinary_Impl(c, allowed, vrs, nvr, nval) ==
		let mk_(s, c2) = if c.dirty then c.instanceEnvironment.calculateValues(c) else mk_(<fmi3OK>, c) in
			if s <> <fmi3OK>
			then mk_(s, nil)
			else mk_(<fmi3OK>, conc [ c2.variables(vr) | vr in seq vrs ])
	pre
		getterPreconditions(c, allowed, <BinaryKind>, vrs, nvr, nval)
	post
		RESULT.#1 = <fmi3OK> => len RESULT.#2 = nval;

	fmi3GetBinary: fmi3Instance * seq of fmi3ValueReference * nat * nat +> fmi3Status * [seq of fmi3Binary]
	fmi3GetBinary(c, vrs, nvr, nval) ==
		if getterArgChecks(c, STATES_fmi3GetBinary, <BinaryKind>, vrs, nvr, nval)
		then fmi3GetBinary_Impl(c, STATES_fmi3GetBinary, vrs, nvr, nval)
		else mk_(<fmi3Error>, nil)
	post
	 	RESULT.#1 = <fmi3OK> <=> RESULT.#2 <> nil;


	/**
	 * Implementation and API for fmi3GetVariableDependencies.
	 */
	fmi3GetVariableDependencies_Impl(
		c								: fmi3Instance,
		dependent						: fmi3ValueReference,
		nDependencies					: nat1)
		result : fmi3Status *
		(
			seq1 of nat						-- elementIndicesOfDependent
			* seq1 of fmi3ValueReference	-- independents
			* seq1 of nat					-- elementIndicesOfIndependents
			* seq1 of fmi3DependencyKind	-- dependencyKinds
		)
	==
		let deps	= c.dependencies(dependent),
			eiods	= [ e.elementIndexOfDependent | e in seq deps ],
			eis		= [ e.independent | e in seq deps ],
			eiois	= [ e.elementIndexOfIndependent | e in seq deps ],
			ekinds	= [ e.dependencyKind | e in seq deps ]
		in
			mk_(<fmi3OK>, mk_(eiods, eis, eiois, ekinds))
	pre
		mk_(c.fmuKind, c.fmuState) in set STATES_fmi3GetVariableDependencies
		and (c.fmuKind = <CoSimulation> and nilBool(c.xmlModel.coSimulation.base.providesPerElementDependencies)
			or c.fmuKind = <ModelExchange> and nilBool(c.xmlModel.modelExchange.base.providesPerElementDependencies))
		and dependent in set dom c.dependencies
		and nDependencies = len c.dependencies(dependent)
	post
		result.#1 = <fmi3OK>;

	fmi3GetVariableDependencies(
		c								: fmi3Instance,
		dependent						: fmi3ValueReference,
		nDependencies					: nat1)
		result : fmi3Status *
		[
			seq1 of nat						-- elementIndicesOfDependent
			* seq1 of fmi3ValueReference	-- independents
			* seq1 of nat					-- elementIndicesOfIndependents
			* seq1 of fmi3DependencyKind	-- dependencyKinds
		]
	==
		if mk_(c.fmuKind, c.fmuState) not in set STATES_fmi3GetVariableDependencies
		then logAPIError(c, "Cannot call fmi3GetVariableDependencies in this state", mk_(<fmi3Error>, nil))

		elseif c.fmuKind = <CoSimulation> and not nilBool(c.xmlModel.coSimulation.base.providesPerElementDependencies)
		then logAPIError(c, "FMU does not provide per element dependencies", mk_(<fmi3Error>, nil))

		elseif c.fmuKind = <ModelExchange> and not nilBool(c.xmlModel.modelExchange.base.providesPerElementDependencies)
		then logAPIError(c, "FMU does not provide per element dependencies", mk_(<fmi3Error>, nil))

		elseif dependent not in set dom c.dependencies
		then logAPIError(c, "Unknown valueReference", mk_(<fmi3Error>, nil))

		elseif nDependencies <> len c.dependencies(dependent)
		then logAPIError(c, "nDependencies incorrect", mk_(<fmi3Error>, nil))

		else fmi3GetVariableDependencies_Impl(c, dependent, nDependencies)
	 post
	 	result.#1 <> <fmi3OK> <=> result.#2 = nil;
