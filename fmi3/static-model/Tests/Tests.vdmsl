/**
 * This file is part of the INTO-CPS toolchain.
 *
 * Copyright (c) 2017-2019, INTO-CPS Association,
 * c/o Professor Peter Gorm Larsen, Department of Engineering
 * Finlandsgade 22, 8200 Aarhus N.
 *
 * All rights reserved.
 *
 * THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR
 * THIS INTO-CPS ASSOCIATION PUBLIC LICENSE VERSION 1.0.
 * ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES
 * RECIPIENT'S ACCEPTANCE OF THE OSMC PUBLIC LICENSE OR THE GPL 
 * VERSION 3, ACCORDING TO RECIPIENTS CHOICE.
 *
 * The INTO-CPS toolchain  and the INTO-CPS Association Public License are
 * obtained from the INTO-CPS Association, either from the above address, from
 * the URLs: http://www.into-cps.org, and in the INTO-CPS toolchain distribution.
 * GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without
 * even the implied warranty of  MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH IN THE
 * BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF
 * THE INTO-CPS ASSOCIATION.
 *
 * See the full INTO-CPS Association Public License conditions for more details.
 */

/**
 * Various model tests
 */
traces
	/**
	 * Test the ScalarInvariant invariant function with all possible inputs - should return true/false (total)
	 * for every combination. Variable types are tested with "start" both defined and undefined.
	 */
	SVInvariantTotal:
		let c : [Causality] in
		let v : [Variability] in
		let i : [Initial] in
		let a : Annotations = [ mk_Annotation(mk_Location("modelDescription.xml", 1), "A", [mk_token("?")]) ] in
		let t in set
		{
            mk_Float64
            (
                mk_Location("modelDescription.xml", 6),
                "name",
                1234,
                nil,  -- description
                c,    -- causality
                v,    -- variabilty
                i,    -- initial
                nil,  -- canHandleMultipleSetPerTimeInstant
                nil,  -- intermediateUpdate
                nil,  -- previous
                nil,  -- clocks
                nil,  -- declaredType
                nil,  -- quantity
                nil,  -- unit
                nil,  -- displayUnit
                nil,  -- relativeQuantity
                nil,  -- unbounded
                nil,  -- min
                nil,  -- max
                nil,  -- nominal
                -- start
                [
                    1.23
                ],
                nil,  -- derivative
                nil,  -- reinit
                nil,  -- dimension
                a,    -- annotations
                -- alias
                [
                    mk_Alias
                    (
                        mk_Location("modelDescription.xml", 7),
                        "alias",
                        "desc",
                        nil   -- displayUnit
                    )
                ] 
            ),

           mk_Int64
            (
                mk_Location("modelDescription.xml", 9),
                "name2",
                1234,
                nil,  -- description
                c,    -- causality
                v,    -- variability
                i,    -- initial
                nil,  -- canHandleMultipleSetPerTimeInstant
                nil,  -- intermediateUpdate
                nil,  -- previous
                nil,  -- clocks
                nil,  -- declaredType
                nil,  -- quantity
                nil,  -- min
                nil,  -- max
                -- start
                [
                    123
                ],
                nil,  -- dimension
                a,    -- annotations
                -- alias
                [
                    mk_Alias
                    (
                        mk_Location("modelDescription.xml", 10),
                        "alias",
                        "desc",
                        nil   -- displayUnit
                    )
                ] 
            )
		}
		in
			isValidVariableAttributes(t);

functions
	/**
	 * Helper to make Reals for test below.
	 */
	mkVariable: Causality * Variability * [Initial] * [seq1 of real] +> Float64
	mkVariable(c, v, i, start) ==
            mk_Float64
            (
                mk_Location("modelDescription.xml", 6),
                "name",
                1234,
                nil,  -- description
                c,    -- causality
                v,    -- variabilty
                i,    -- initial
                nil,  -- canHandleMultipleSetPerTimeInstant
                nil,  -- intermediateUpdate
                nil,  -- previous
                nil,  -- clocks
                nil,  -- declaredType
                nil,  -- quantity
                nil,  -- unit
                nil,  -- displayUnit
                nil,  -- relativeQuantity
                nil,  -- unbounded
                nil,  -- min
                nil,  -- max
                nil,  -- nominal
                -- start
                start,
                nil,  -- derivative
                nil,  -- reinit
                nil,  -- dimension
                nil,  -- annotations
                -- alias
                [
                    mk_Alias
                    (
                        mk_Location("modelDescription.xml", 7),
                        "alias",
                        "desc",
                        nil   -- displayUnit
                    )
                ] 
            );

	/**
	 * Test the ScalarVariable invariant for the table on p48, where the SV is valid or not
	 * for particular "initial" values, given a combination of causality and variability.
	 */
	testCausalityVariabilityInitial: () +> bool
	testCausalityVariabilityInitial() ==
		let nilv   = nil,
		    startv = [1.0]
		in
			forall causality : Causality &
				forall variability : Variability &
					-- @Printf("Testing %s/%s ...\n", causality, variability)
					-- @OnFail("Test %s/%s failed", causality, variability)
					(cases causality:
						<structuralParameter> ->
							cases variability:
								<fixed>, <tunable> ->
									isValidVariableAttributes(mkVariable(causality, variability, <exact>, startv)) and
									not isValidVariableAttributes(mkVariable(causality, variability, <approx>, startv)) and
									not isValidVariableAttributes(mkVariable(causality, variability, <calculated>, nilv)),

								<constant>, <discrete>, <continuous> ->
									forall initial : Initial &
										not isValidVariableAttributes(mkVariable(causality, variability, initial, nilv))
							end,

						<parameter> ->
							cases variability:
								<fixed>, <tunable> ->
									isValidVariableAttributes(mkVariable(causality, variability, <exact>, startv)) and
									not isValidVariableAttributes(mkVariable(causality, variability, <approx>, startv)) and
									not isValidVariableAttributes(mkVariable(causality, variability, <calculated>, nilv)),

								<constant>, <discrete>, <continuous> ->
									forall initial : Initial &
										not isValidVariableAttributes(mkVariable(causality, variability, initial, nilv))
							end,

						<calculatedParameter> ->
							cases variability:
								<fixed>, <tunable> ->
									isValidVariableAttributes(mkVariable(causality, variability, <calculated>, nilv)) and
									isValidVariableAttributes(mkVariable(causality, variability, <approx>, startv)) and
									not isValidVariableAttributes(mkVariable(causality, variability, <exact>, nilv)),

								<constant>, <discrete>, <continuous> ->
									forall initial : Initial &
										not isValidVariableAttributes(mkVariable(causality, variability, initial, nilv))
							end,

						<input> ->
							cases variability:
								<discrete>, <continuous> ->
									isValidVariableAttributes(mkVariable(causality, variability, nil, startv)) and
									not isValidVariableAttributes(mkVariable(causality, variability, <calculated>, nilv)) and
									-- not isValidVariableAttributes(mkVariable(causality, variability, <approx>, startv)) and
									not isValidVariableAttributes(mkVariable(causality, variability, <exact>, nilv)),

								<constant>, <fixed>, <tunable> ->
									forall initial : Initial &
										not isValidVariableAttributes(mkVariable(causality, variability, initial, nilv))
							end,

						<output> ->
							cases variability:
								<constant> ->
									isValidVariableAttributes(mkVariable(causality, variability, <exact>, startv)) and
									not isValidVariableAttributes(mkVariable(causality, variability, <calculated>, nilv)) and
									not isValidVariableAttributes(mkVariable(causality, variability, <approx>, startv)),

								<discrete>, <continuous> ->
									isValidVariableAttributes(mkVariable(causality, variability, <calculated>, nilv)) and
									isValidVariableAttributes(mkVariable(causality, variability, <exact>, startv))
									and isValidVariableAttributes(mkVariable(causality, variability, <approx>, startv)),

								<fixed>, <tunable> ->
									forall initial : Initial &
										not isValidVariableAttributes(mkVariable(causality, variability, initial, nilv))
							end,

						<local> ->
							cases variability:
								<constant> ->
									isValidVariableAttributes(mkVariable(causality, variability, <exact>, startv)) and
									not isValidVariableAttributes(mkVariable(causality, variability, <calculated>, nilv)) and
									not isValidVariableAttributes(mkVariable(causality, variability, <approx>, startv)),

								<fixed>, <tunable> ->
									isValidVariableAttributes(mkVariable(causality, variability, <calculated>, nilv)) and
									isValidVariableAttributes(mkVariable(causality, variability, <approx>, startv)) and
									not isValidVariableAttributes(mkVariable(causality, variability, <exact>, startv)),

								<discrete>, <continuous> ->
									isValidVariableAttributes(mkVariable(causality, variability, <calculated>, nilv)) and
									isValidVariableAttributes(mkVariable(causality, variability, <approx>, startv)) and
									isValidVariableAttributes(mkVariable(causality, variability, <exact>, startv))
							end,

						<independent> ->
							forall initial : Initial &
								not isValidVariableAttributes(mkVariable(causality, variability, initial, nilv))
					end);

	testStructuredNames: () +> seq of bool
	testStructuredNames() ==
	[
		isValidStructuredName("der(a.b.c,3)"),
		isValidStructuredName("der(a)"),
		isValidStructuredName("a"),
		isValidStructuredName("'!#$'"),
		isValidStructuredName("a[1]"),
		isValidStructuredName("_abc[1,2,3]"),
		isValidStructuredName("xyz.abc.def[1,2,3]"),
		isValidStructuredName("'!!!\\?'.a10[1,2,3]"),
		isValidStructuredName("a20[1,2,3].def[1]"),
		isValidStructuredName("'\\\"\\?\\\\'"),
		not isValidStructuredName("a[1,]"),
		not isValidStructuredName("[1]"),
		not isValidStructuredName("'1@"),
		not isValidStructuredName("ABC..DEF"),
		not isValidStructuredName("ABC[1]..DEF")
	];

functions
	/**
	 * Run all tests and check that they pass.
	 */
	tests: () +> seq of bool
	tests() ==
	[
		testCausalityVariabilityInitial()
		-- isValidFMIModelDescription(example)
	]
	^	testStructuredNames()

	post elems RESULT = {true};
