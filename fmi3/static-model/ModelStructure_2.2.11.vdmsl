/**
 * This file is part of the INTO-CPS toolchain.
 *
 * Copyright (c) 2017-2019, INTO-CPS Association,
 * c/o Professor Peter Gorm Larsen, Department of Engineering
 * Finlandsgade 22, 8200 Aarhus N.
 *
 * All rights reserved.
 *
 * THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR
 * THIS INTO-CPS ASSOCIATION PUBLIC LICENSE VERSION 1.0.
 * ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES
 * RECIPIENT'S ACCEPTANCE OF THE OSMC PUBLIC LICENSE OR THE GPL 
 * VERSION 3, ACCORDING TO RECIPIENTS CHOICE.
 *
 * The INTO-CPS toolchain  and the INTO-CPS Association Public License are
 * obtained from the INTO-CPS Association, either from the above address, from
 * the URLs: http://www.into-cps.org, and in the INTO-CPS toolchain distribution.
 * GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without
 * even the implied warranty of  MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH IN THE
 * BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF
 * THE INTO-CPS ASSOCIATION.
 *
 * See the full INTO-CPS Association Public License conditions for more details.
 */

/**
 * 2.2.9 Definition of the Model Structure (ModelStructure)
 */
types
	DependencyKind	=
		<dependent> |
		<constant> |
		<fixed> |
		<tunable> |
		<discrete>;

	UnknownKind =
		<Output> |
		<Derivative> |
		<InitialUnknown>;

	Unknown ::
		location				: Location
		kind					: UnknownKind
		valueReference			: fmi3ValueReference
		dependencies			: [seq of fmi3ValueReference]
		dependenciesKind		: [seq of DependencyKind];

	EventIndicator ::
		location				: Location
		valueReference			: fmi3ValueReference;

	ModelStructure ::
		location				: Location
		unknowns				: [seq1 of Unknown]
		eventIndicators			: [seq1 of EventIndicator];

functions
	/**
	 * Validation of a ModelStructure.
	 */
	isValidModelStructure: ModelStructure +> bool
	isValidModelStructure(ms) ==
	{
		-- @OnFail(1500, "2.2.9 ModelStructure has invalid Unknowns")
		( ms.unknowns <> nil =>
			forall u in seq ms.unknowns & isValidUnknown(u) ),

		-- @OnFail(1501, "2.2.9 InitialUnknowns are not of kind dependent or constant")
		(
			ms.unknowns <> nil =>
				forall iu in seq ms.unknowns &
					iu.kind = <InitialUnknown> and iu.dependenciesKind <> nil =>
						forall dk in seq iu.dependenciesKind &
							 dk in set { <dependent>, <constant>, nil }
		)
	} = {true};

	/**
	 * Validate an Unknown structure in isolation.
	 */
	isValidUnknown: Unknown +> bool
	isValidUnknown(u) ==
	-- @OnFail(1502, "2.2.11 Unknown %s has invalid dependencies/kinds at line %s", u.valueReference, u.location)
	(
		if u.dependencies <> nil
		then u.dependenciesKind <> nil =>
			{
				-- @OnFail(1503, "2.2.9 Dependencies list does not match dependenciesKind at line %s", u.location)
				( len u.dependencies = len u.dependenciesKind ),

				/* @OnFail(1504, "2.2.9 Unknown has duplicate indexes %s at line %s",
					{ u.dependencies(a) | a, b in set inds u.dependencies &
						a <> b and u.dependencies(a) = u.dependencies(b) }, u.location ) */
				( len u.dependencies = card elems u.dependencies),

				-- @OnFail(1505, "2.2.9 Unknown cannot depend on itself at line %s", u.location)
				(true) -- CHECK THIS! ( u.index not in set elems u.dependencies )
			} = {true}
		else
			u.dependenciesKind = nil
	);
