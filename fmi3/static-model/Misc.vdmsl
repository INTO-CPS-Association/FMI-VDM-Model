/*********************************************************************************
 *
 *	Copyright (c) 2017-2022, INTO-CPS Association,
 *	c/o Professor Peter Gorm Larsen, Department of Engineering
 *	Finlandsgade 22, 8200 Aarhus N.
 *
 *	MIT Licence:
 *
 *	Permission is hereby granted, free of charge, to any person obtaining a copy of
 *	this software and associated documentation files (the "Software"), to deal in
 *	the Software without restriction, including without limitation the rights to use,
 *	copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 *	Software, and to permit persons to whom the Software is furnished to do so,
 *	subject to the following conditions:
 *
 *	The above copyright notice and this permission notice shall be included in all
 *	copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 *	INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 *	PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *	OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 *	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *	SPDX-License-Identifier: MIT
 *
 *********************************************************************************/

/**
 * Miscellaneous support types and functions, not related to a specific section of the FMI spec.
 */
types
	fmi3ValueReference = nat;

functions
	nilSeq[@T]: [seq of @T] +> seq of @T
	nilSeq(s) ==
		if s = nil then [] else s;

	nilSet[@T]: [set of @T] +> set of @T
	nilSet(s) ==
		if s = nil then {} else s;

	nilBool: [bool] +> bool
	nilBool(b) ==
		if b = nil then false else b;

	nilNat: [nat] +> nat
	nilNat(n) ==
		if n = nil then 0 else n;

	nilInt: [int] +> int
	nilInt(n) ==
		if n = nil then 0 else n;

	nilReal: [real] +> real
	nilReal(n) ==
		if n = nil then 0 else n;

	count[@T]: set of set of @T +> nat
	count(s) ==
		if s = {}
		then 0
		else let e in set s in
			card e + count[@T](s \ {e})
	measure card s;

	sum: seq of nat +> nat
	sum(s) ==
		if s = []
		then 0
		else hd s + sum(tl s)
	measure len s;

	setToSeq[@T]: set of @T +> seq of @T
	setToSeq(s) ==
		if s = {}
		then []
		else let e in set s in
			[e] ^ setToSeq[@T](s \ {e})
	measure card s;

	epsilon: real * real +> bool
	epsilon(a, b) ==
		let EPSILON = 1e-8 in
		let diff = a - b in
			if diff < 0
			then diff > -EPSILON
			else diff < EPSILON;

	loc2str: Location +> seq1 of char
	loc2str(location) ==
		location.file ^ ":" ^ nat2str(location.line);

	nat2str: nat +> seq of char
	nat2str(n) ==
		let d : char = "0123456789"(n rem 10 + 1) in
			if n < 10
			then [d]
			else nat2str(n div 10) ^ [d]
	measure n;
