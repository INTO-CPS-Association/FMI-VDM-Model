/*********************************************************************************
 *
 *	Copyright (c) 2017-2022, INTO-CPS Association,
 *	c/o Professor Peter Gorm Larsen, Department of Engineering
 *	Finlandsgade 22, 8200 Aarhus N.
 *
 *	MIT Licence:
 *
 *	Permission is hereby granted, free of charge, to any person obtaining a copy of
 *	this software and associated documentation files (the "Software"), to deal in
 *	the Software without restriction, including without limitation the rights to use,
 *	copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 *	Software, and to permit persons to whom the Software is furnished to do so,
 *	subject to the following conditions:
 *
 *	The above copyright notice and this permission notice shall be included in all
 *	copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 *	INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 *	PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *	OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 *	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *	SPDX-License-Identifier: MIT
 *
 *********************************************************************************/

/**
 * 2.4.1 Definition of an FMU (fmiModelDescription)
 */
functions
	/**
	 * Invariant definition for FmiModelDescription
	 */
	isValidFMIModelDescription: FmiModelDescription +> bool
	isValidFMIModelDescription(md) ==
		-- First fill in effective values for model variables' missing attributes
		let eModelVariables = effectiveScalarVariables(md) in
		let results = [
			-- @OnFail(1000, "2.4.1 ModelAttributes invalid at %s", loc2str(md.location))
			( md.fmiVersion(1, ..., 3) = "3.0" ),

			-- @OnFail(1001, "2.4.1 ModelExchange invalid at %s", loc2str(md.modelExchange.location))
			( isValidModelExchange(md.modelExchange) ),

			-- @OnFail(1002, "2.4.1 CoSimulation invalid at %s", loc2str(md.coSimulation.location))
			( isValidCoSimulation(md.coSimulation) ),

			-- @OnFail(1003, "2.4.1 ScheduledExecution invalid at %s", loc2str(md.scheduledExecution.location))
			( isValidScheduledExecution(md.scheduledExecution) ),

			-- @OnFail(1004, "2.4.1 UnitDefinitions invalid"))
			( isValidUnitDefinitions(md.unitDefinitions) ),

			-- @OnFail(1005, "2.4.1 TypeDefinitions invalid")
			( isValidTypeDefinitions(md.typeDefinitions) ),

			-- @OnFail(1006, "2.4.1 LogCategories invalid")
			( isValidLogCategories(md.logCategories) ),

			-- @OnFail(1007, "2.4.1 DefaultExperiment invalid at %s", loc2str(md.defaultExperiment.location))
			( isValidDefaultExperiment(md.defaultExperiment) ),

			-- @OnFail(1008, "2.4.1 Annotations invalid")
			( isValidAnnotations(md.annotations) ),

			-- @OnFail(1009, "2.4.1 Variables invalid")
			( isValidModelVariables(md.modelVariables) ),		-- NOTE: NOT effective variables!

			-- @OnFail(1010, "2.4.1 Effective Variables invalid")
			( isValidEffectiveVariables(eModelVariables) ),		-- NOTE: effective variables!

			-- @OnFail(1011, "2.4.1 ModelStructure invalid at %s", loc2str(md.modelStructure.location))
			( isValidModelStructure(md.modelStructure, eModelVariables) ),

			-- @OnFail(1012, "2.4.1 Variables typecheck against TypeDefinitions failed")
			( typeCheck(eModelVariables, md.typeDefinitions) ),

			-- @OnFail(1013, "2.4.1 Neither ModelExchange, CoSimulation nor ScheduledExecution specified")
			( md.modelExchange <> nil or md.coSimulation <> nil or md.scheduledExecution <> nil ),

			(
				md.variableNamingConvention = <structured> =>
					dunion
					{
						{
							-- @OnFail(1014, "2.4.7 Structured name %s invalid at %s", sv.name, loc2str(sv.location))
							( isValidStructuredName(sv.name) ),

							-- @OnFail(1015, "2.4.7 Name %s is not Real at %s", sv.name, loc2str(sv.location))
							( sv.name(1, ..., 4) = "der(" => isReal(sv) )
						}

						| sv in seq eModelVariables
					}
					= {true}
			),

			(
				md.typeDefinitions <> nil =>
					dunion
					{
						{
							/* @OnFail(1016, "2.4.4 TypeDefinition and Variable names overlap: %s at %s",
									std.name, loc2str(std.location)) */
							( not exists sv in seq eModelVariables & sv.name = std.name ),

							isRealType(std) =>
								std.unit <> nil =>
									/* @OnFail(1017, "2.4.4 Type %s, Real unit %s not defined in UnitDefinitions at %s",
										std.name, std.unit, loc2str(std.location)) */
									( md.unitDefinitions <> nil
									  and exists u in seq md.unitDefinitions & u.name = std.unit )
						}

						| std in seq md.typeDefinitions
					} = {true}
			),

			(
				{
					sv.canHandleMultipleSetPerTimeInstant <> nil =>
						/* @OnFail(1018, "2.4.7 Variable %s, canHandleMultipleSetPerTimeInstant invalid at %s",
							sv.name, loc2str(sv.location)) */
						( md.modelExchange <> nil and sv.causality = <input> )

					| sv in seq eModelVariables
				} = {true}
			),

			(
				{
					isReal(sv) =>
					{
						/* @OnFail(1019, "2.4.7 Variable %s, Real unit must be defined for displayUnit %s at %s",
							sv.name, sv.displayUnit, loc2str(sv.location)) */
						( sv.displayUnit <> nil => sv.unit <> nil ),

						sv.unit <> nil =>
							/* @OnFail(1020, "2.4.7 Variable %s, Real unit %s not defined in UnitDefinitions at %s",
								sv.name, sv.unit, loc2str(sv.location)) */
							( md.unitDefinitions <> nil
							  and exists u in seq md.unitDefinitions & u.name = sv.unit )
					}
					= {true}

					| sv in seq eModelVariables
				} = {true}
			),

			(
				{
					let sv = eModelVariables(svi) in
						isReal(sv) and sv.reinit <> nil =>
						/* @OnFail(1021, "2.4.7 Variable %s, Real reinit for model exchange continuous time only at %s",
								sv.name, loc2str(sv.location)) */
						( isContinuousTimeState(svi, eModelVariables) and md.modelExchange <> nil )

					| svi in set inds eModelVariables
				} = {true}
			),

			(
				let outputRefs = { sv.valueReference |
						sv in seq eModelVariables & sv.causality = <output> },
					structRefs = { u.valueReference |
						u in seq nilSeq[Output](md.modelStructure.output) }
				in
					if outputRefs <> {}
					then
						/* @OnFail(1022, "2.4.9 Output variables but no outputs declared at %s",
							loc2str(md.modelStructure.location)) */
						( structRefs <> {} )

						and
						/* @OnFail(1023, "2.4.9 Outputs section does not match output variables at %s",
							loc2str(md.modelStructure.location)) */
						( structRefs = outputRefs )
					else
						/* @OnFail(1024, "2.4.9 Outputs should be omitted at %s", loc2str(md.modelStructure.location)) */
						( structRefs = {} )
			),

			-- ModelStructure derivative indexes must be valid and if the derivative has dependencies, then
			-- it must be continuous. Note that SVs can have derivative set but not be listed here.
			(
				md.modelExchange <> nil and md.modelStructure.continuousStateDerivative <> nil =>
					let derivatives = { u | u in seq md.modelStructure.continuousStateDerivative } in
						derivatives <> {} =>
						{
							let sv = lookup(eModelVariables, uk.valueReference) in
								/* @OnFail(1025, "2.4.9 Derivative valueReference unknown at %s", loc2str(uk.location)) */
								( sv <> nil )

								and
								{
									/* @OnFail(1026, "2.4.9 SV not a state derivative at %s", loc2str(uk.location)) */
									( isStateDerivative(sv) ),

									/* @OnFail(1027, "2.4.9 Derivative must be continuous at %s", loc2str(uk.location)) */
									( uk.dependencies <> nil => sv.variability = <continuous> )
								}
								= {true}

							| uk in set derivatives
						}
						= {true}
			),

			-- InitalUnknowns must include all output (approx/calculated), calculatedParameters and 
			-- all continuous-time states and derivatives that are approx/calculated.
			(
				let ctVars = continuousTimeStates(eModelVariables),
					sdVars = stateDerivatives(eModelVariables),
					initRefs = { sv.valueReference | sv in seq eModelVariables &
						(sv.clocks = nil and not is_Clock(sv) and sv.causality = <output>
							and sv.initial in set { <approx>, <calculated> })

						or (sv.causality = <calculatedParameter>)

						or (sv in set ctVars
							and sv.initial in set { <approx>, <calculated> })

						or (sv in set sdVars
							and sv.initial in set { <approx>, <calculated> }) }
				in
					initRefs <> {} =>
						let ius = [ iu |
							iu in seq nilSeq[InitialUnknown](md.modelStructure.initialUnknown) ] in
						{
							-- @OnFail(1028, "2.4.9 InitialUnknowns must include refs: %s", initRefs)
							( ius <> [] ),

							-- @OnFail(1029, "2.4.9 InitialUnknowns must only include refs: %s", initRefs)
							( { u.valueReference | u in seq ius } subset initRefs )
						} = {true}
			),

			(
				md.modelStructure.eventIndicator <> nil =>
				{
					/* @OnFail(1030, "2.4.9 EventIndicator valueReference %s invalid at %s",
						ei.valueReference, loc2str(ei.location)) */
					( exists sv in seq eModelVariables &
						sv.valueReference = ei.valueReference )

					| ei in seq md.modelStructure.eventIndicator
				}
				= {true}
			),

			(
				let allUnknowns = conc
				[
					nilSeq[Output](md.modelStructure.output),
					nilSeq[ContinuousStateDerivative](md.modelStructure.continuousStateDerivative),
					nilSeq[ClockedState](md.modelStructure.clockedState),
					nilSeq[InitialUnknown](md.modelStructure.initialUnknown),
					nilSeq[EventIndicator](md.modelStructure.eventIndicator)
				] in
					allUnknowns <> [] =>
					{
						unk.dependencies <> nil and unk.dependencies <> [] =>
						{
							-- @OnFail(1031, "2.4.9 Unknown dependency %s invalid at %s", vr, loc2str(unk.location))
							( exists sv in seq eModelVariables & sv.valueReference = vr )

							| vr in seq unk.dependencies
						} = {true}

						| unk in seq allUnknowns
					}
					= {true}
			),

			(
				{
					if md.scheduledExecution <> nil then
						-- @OnFail(1043, "2.4.4 Clock %s must have a priority for Scheduled Execution at %s", v.name, loc2str(v.location))
						( is_Clock(v) and v.causality <> <output> => v.priority <> nil )
					else
						-- @OnFail(1044, "2.4.4 Clock %s must not have a priority unless Scheduled Execution at %s", v.name, loc2str(v.location))
						( is_Clock(v) => v.priority = nil )
						
					| v in seq eModelVariables
				}
				= {true}
			)
		]
		in elems results = {true};

	/**
	 * Check that all variables' declaredTypes are defined, that the variables' types match
	 * the declared types.
	 */
	typeCheck: seq1 of Variable * [seq of VariableType] +> bool
	typeCheck(variables, typedefs) ==
		{
			sv.declaredType <> nil =>
				let matchingTypes = { td |
					td in seq nilSeq[VariableType](typedefs) &
					td.name = sv.declaredType } in
				{
					/* @OnFail(1032, "2.4.4 Typedefs have multiple matching names: %s",
						{ m.name | m in set matchingTypes } ) */
					( matchingTypes <> {} => card matchingTypes = 1 ),

					/* @OnFail(1033, "2.4.4 Declared type %s unknown at %s",
						sv.declaredType, loc2str(sv.location) ) */
					( card matchingTypes <> 0 ),

					-- The match is has compatible values in the Variable
					card matchingTypes = 1 => let { simpleType } = matchingTypes in
						cases simpleType:
							mk_Float64Type(-, -, -, -, -, -, -, -, min, max, -, -),
							mk_Float32Type(-, -, -, -, -, -, -, -, min, max, -, -) ->
								/* @OnFail(1034, "2.4.7 Variable %s min/max exceeds RealType %s at %s",
									sv.name, sv.declaredType, loc2str(sv.location)) */
								( (min <> nil and sv.min <> nil => min <= sv.min)
									and
								  (max <> nil and sv.max <> nil => max >= sv.max) ),

							mk_Int64Type(-, -, -, -, min, max, -),
							mk_Int32Type(-, -, -, -, min, max, -),
							mk_Int16Type(-, -, -, -, min, max, -),
							mk_Int8Type(-, -, -, -, min, max, -),
							mk_UInt64Type(-, -, -, -, min, max, -),
							mk_UInt32Type(-, -, -, -, min, max, -),
							mk_UInt16Type(-, -, -, -, min, max, -),
							mk_UInt8Type(-, -, -, -, min, max, -) ->
								/* @OnFail(1035, "2.4.7 Variable %s min/max exceeds IntegerType %s at %s",
									sv.name, sv.declaredType, loc2str(sv.location)) */
								( (min <> nil and sv.min <> nil => min <= sv.min)
									and
								  (max <> nil and sv.max <> nil => max >= sv.max) ),

							others -> true
						end,

					-- The match is the same type as the Variable type and for numerics,
					card matchingTypes = 1 => let { simpleType } = matchingTypes in
						cases simpleType:
							mk_Float64Type(-, -, -, -, -, -, -, -, -, -, -, -),
							mk_Float32Type(-, -, -, -, -, -, -, -, -, -, -, -) ->
								/* @OnFail(1036, "2.4.7 Variable %s, RealType not referenced by Real variable %s at %s",
									sv.name, sv.declaredType, loc2str(sv.location)) */
								( isReal(sv) ),

							mk_Int64Type(-, -, -, -, -, -, -),
							mk_Int32Type(-, -, -, -, -, -, -),
							mk_Int16Type(-, -, -, -, -, -, -),
							mk_Int8Type(-, -, -, -, -, -, -),
							mk_UInt64Type(-, -, -, -, -, -, -),
							mk_UInt32Type(-, -, -, -, -, -, -),
							mk_UInt16Type(-, -, -, -, -, -, -),
							mk_UInt8Type(-, -, -, -, -, -, -) ->
								/* @OnFail(1037, "2.4.7 Variable %s, IntegerType not referenced by Integer variable %s at %s",
									sv.name, sv.declaredType, loc2str(sv.location)) */
								( isInteger(sv) ),

							mk_BooleanType(-, -, -, -) ->
								/* @OnFail(1038, "2.4.7 Variable %s, BooleanType not referenced by Boolean variable %s at %s",
									sv.name, sv.declaredType, loc2str(sv.location)) */
								( is_Boolean(sv) ),

							mk_StringType(-, -, -, -) ->
								/* @OnFail(1039, "2.4.7 Variable %s, StringType not referenced by String variable %s at %s",
									sv.name, sv.declaredType, loc2str(sv.location)) */
								( is_String(sv) ),

							mk_BinaryType(-, -, -, -, -, -) ->
								/* @OnFail(1040, "2.4.7 Variable %s, BinaryType not referenced by Binary variable %s at %s",
									sv.name, sv.declaredType, loc2str(sv.location)) */
								( is_Binary(sv) ),

							mk_EnumerationType(-, -, -, -, -, -, -, -) ->
								/* @OnFail(1041, "2.4.7 Variable %s, EnumerationType not referenced by Enumeration variable %s at %s",
									sv.name, sv.declaredType, loc2str(sv.location)) */
								( is_Enumeration(sv) ),

							mk_ClockType(-, -, -, -, -, -, -, -, -, -, -, -, -) ->
								/* @OnFail(1042, "2.4.7 Variable %s, StringType not referenced by String variable %s at %s",
									sv.name, sv.declaredType, loc2str(sv.location)) */
								( is_Clock(sv) )
						end
				} = {true}
			| sv in seq variables
		} = {true};
